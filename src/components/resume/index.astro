---
import type { CollectionEntry } from 'astro:content';
import { Certificates, Education, hash, linq, Work } from '@/lib';

import ContactDetails from './ContactDetails.svelte';
import Timeline from './Timeline.astro';
import TagsCatalog from './TagsCatalog.svelte';

interface Props {
	data: CollectionEntry<'resume'>['data'] | undefined;
}

const {
	data: {
		basics,
		work,
		certificates,
		education,
		skills,
		projects,
	} = {
		basics: {
			name: undefined,
			label: undefined,
		},
		work: undefined,
		certificates: undefined,
		education: undefined,
		skills: [],
		projects: [],
	},
} = Astro.props;
---

<section id="resume" class="resume">
	<table border={0} cellspacing={0} cellpadding={0}>
		<tbody>
			<!-- Profile -->
			<tr class="profile">
				<th colspan="5" style="width: 592.91px" class="[ flow ]">
					<!-- Introduction -->
					<div aria-label="Introduction">
						<h1 aria-label={basics.name}>{basics.name}</h1>
						<h2 aria-label={basics.label}>{basics.label}</h2>
					</div>

					<!-- Objective Statement -->
					<p class="text-accent">
						{basics.summary}
					</p>
				</th>

				<th colspan="1" style="width: 175.47px" align="right">
					<!-- Contact Details -->
					<ContactDetails {basics} aria-label="Details" />
				</th>
			</tr>
			<tr>
				<!-- Relevant Experience History -->
				<td
					colspan="4"
					style="width: 500px"
					class="[ grid-column ]"
					aria-label="Relevant Experience History"
				>
					<section
						class="experience"
						aria-label="Relevant Professional Experience"
					>
						<Timeline experiences={work} type={new Work()} />
					</section>

					<!-- Certificates -->
					<section class="experience" aria-labelledby="cert-title">
						<Timeline experiences={certificates} type={new Certificates()} />
					</section>

					<!-- Education -->
					<section class="experience" aria-labelledby="ed-title">
						<Timeline experiences={education} type={new Education()} />
					</section>
				</td>

				<td colspan="2" style="width: 280px" class="[ grid-column ]">
					<!-- Skills -->
					<section
						class="skills [ tags-catalog extend ] [ bg-none ]"
						aria-label="skills"
					>
						{
							linq(skills)
		.groupBy(({ category, categoryTag }) => [category, categoryTag], {
			equals: ([a, b], [c, d]) => a === c && b === d,
			getHashCode: hash,
		})
		.select((g) =>
			[
				g.key,
				g.select((s) => ({ tag: s.tag, name: s.name, keywords: s.keywords }))
					.toArray(),
			] as const
		)
		.select(([[category, categoryTag], collectiveSkills]) => (
								<section
									class:list={['category', { 'extend': collectiveSkills.length > 1 }]}
									aria-labelledby={categoryTag}
								>
									<h2
										id={categoryTag}
										class="heading__icon heading"
										data-icon={categoryTag}
									>
										{
											collectiveSkills.length === 1 ? collectiveSkills[0]?.name : collectiveSkills.length > 1 ? category : ''
										}
									</h2>{
										collectiveSkills.length === 1
		? (
											<TagsCatalog labels={collectiveSkills[0]?.keywords ?? ''} />
										)
		: collectiveSkills.length > 1
		? collectiveSkills.map((skill) => (
											<div class="sub-category" aria-labelledby={skill.tag}>
												<h3 id={skill.tag} class="subheading">{skill.name}:</h3>
												<TagsCatalog labels={skill.keywords.sort()} />
											</div>
										))
		: null
									}
								</section>
							))
						}
					</section>

					<!-- Interests -->
					<!-- {#if interests}
							<section
							class="interests [ tags-catalog ]"
							class:extend={interests.length > 1}
							aria-labelledby="interests-title"
							>
							<h2 id="interests-title" class="heading__icon heading" data-icon="interests">Interests</h2>
							{#if interests.length === 1}
							<TagsCatalog labels={interests[0]?.keywords ?? ''} />
							{:else if interests.length > 1}
							{#each interests as interest ((interest.tag = slug(interest.name)))}
							<div class="sub-category" aria-labelledby="{interest.tag}-title">
								<h4 id="{interest.tag}-title" class="subheading">{interest.name}:</h4>
											<TagsCatalog labels={interest.keywords} />
										</div>
									{/each}
								{/if}
							</section>
						{/if} -->

					<!-- Projects -->
					<section
						class="personal-projects"
						aria-labelledby="personal-projects-title"
					>
						<h2
							id="personal-projects-title"
							class="heading__icon heading"
							data-icon="personal-projects"
						>
							Projects
						</h2>

						<div class="project gallery">
							{
								projects.map((project) => (
									<header>
										{
											project.url ? (
												<a
													href={project.url}
													rel="external nofollow noopener noreferrer"
													target="blank"
												>
													{project.name}
												</a>
											) : (
												<span>
													{project.name}
												</span>
											)
										}
									</header>
									<div>
										<img alt="{project.name} screen-shot" />
									</div>
									<div>
										<p>
											{project.description}
										</p>
										<!-- project_used-technologies -->
									</div>
								))
							}
						</div>
					</section>
				</td>
			</tr>
		</tbody>
	</table>
</section>

<style lang="scss">
	@use 'sass:map';
	@use '@/styles/base/root';
	@use '@/styles/abstracts/mixins' as *;
	@use '@/styles/abstracts/colors' as *;

	@include headings() {
		font-family: var(--secondary-ff);
		font-optical-sizing: auto;
		font-style: normal;
		padding-block: var(--mini-space);
	}

	section#resume.resume {
		--primary-color: #{map.get($light, 'primary')};
	}

	table {
		// display: grid;
		// grid-template-columns: 2fr 1fr;
		width: 100%;
		text-align: left;
		border: 0;
		border-collapse: collapse;
		border-spacing: 0;

		& th {
			--flow-space: var(--small-space);
			vertical-align: top;
			height: 100%;
			// font-weight: 400;
		}
		& td {
			vertical-align: top;
		}

		// & td {
		// 	padding: 0;
		// }

		// & td:has(.profile) {
		// 	grid-column: 1 / span 2;
		// }
	}

	// .profile {
	// 	display: grid;
	// }

	.project.gallery {
		margin-block-start: var(--mini-space);
		margin-inline: var(--tiny-space);
	}
</style>
