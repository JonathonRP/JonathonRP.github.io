let UA, eB = 0, OB = null;
function LB() {
  return (OB === null || OB.buffer !== UA.memory.buffer) && (OB = new Uint8Array(UA.memory.buffer)), OB;
}
let fB = new TextEncoder("utf-8");
const XI = typeof fB.encodeInto == "function" ? function(B, A) {
  return fB.encodeInto(B, A);
} : function(B, A) {
  const Q = fB.encode(B);
  return A.set(Q), {
    read: B.length,
    written: Q.length
  };
};
function mE(B, A, Q) {
  if (Q === void 0) {
    const t = fB.encode(B), w = A(t.length);
    return LB().subarray(w, w + t.length).set(t), eB = t.length, w;
  }
  let E = B.length, g = A(E);
  const I = LB();
  let c = 0;
  for (; c < E; c++) {
    const t = B.charCodeAt(c);
    if (t > 127) break;
    I[g + c] = t;
  }
  if (c !== E) {
    c !== 0 && (B = B.slice(c)), g = Q(g, E, E = c + B.length * 3);
    const t = LB().subarray(g + c, g + E), w = XI(B, t);
    c += w.written;
  }
  return eB = c, g;
}
let uB = null;
function qB() {
  return (uB === null || uB.buffer !== UA.memory.buffer) && (uB = new Int32Array(UA.memory.buffer)), uB;
}
let Vg = new TextDecoder("utf-8", {
  ignoreBOM: !0,
  fatal: !0
});
Vg.decode();
function rg(B, A) {
  return Vg.decode(LB().subarray(B, B + A));
}
function OI(B) {
  try {
    const I = UA.__wbindgen_add_to_stack_pointer(-16);
    var A = mE(
      B,
      UA.__wbindgen_malloc,
      UA.__wbindgen_realloc
    ), Q = eB;
    UA.parse(I, A, Q);
    var E = qB()[I / 4 + 0], g = qB()[I / 4 + 1];
    return rg(E, g);
  } finally {
    UA.__wbindgen_add_to_stack_pointer(16), UA.__wbindgen_free(E, g);
  }
}
function uI(B, A) {
  try {
    const w = UA.__wbindgen_add_to_stack_pointer(-16);
    var Q = mE(
      B,
      UA.__wbindgen_malloc,
      UA.__wbindgen_realloc
    ), E = eB, g = mE(
      A,
      UA.__wbindgen_malloc,
      UA.__wbindgen_realloc
    ), I = eB;
    UA.parse_frag(w, Q, E, g, I);
    var c = qB()[w / 4 + 0], t = qB()[w / 4 + 1];
    return rg(c, t);
  } finally {
    UA.__wbindgen_add_to_stack_pointer(16), UA.__wbindgen_free(c, t);
  }
}
async function xI(B, A) {
  if (typeof Response == "function" && B instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(B, A);
      } catch (E) {
        if (B.headers.get("Content-Type") != "application/wasm")
          console.warn(
            "`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",
            E
          );
        else
          throw E;
      }
    const Q = await B.arrayBuffer();
    return await WebAssembly.instantiate(Q, A);
  } else {
    const Q = await WebAssembly.instantiate(B, A);
    return Q instanceof WebAssembly.Instance ? { instance: Q, module: B } : Q;
  }
}
async function pg(B) {
  typeof B > "u" && (B = new URL("deno-wasm_bg.wasm", import.meta.url));
  const A = {};
  A.env = { now() {
  } }, B = Uint8Array.from(
    atob(
      ""
    ),
    (g) => g.charCodeAt(0)
  );
  const { instance: Q, module: E } = await xI(B, A);
  return UA = Q.exports, pg.__wbindgen_wasm_module = E, UA;
}
let PB = (B) => {
  console.error("Error: deno-dom: No parser registered"), Deno.exit(1);
}, Xg = (B, A) => {
  console.error("Error: deno-dom: No parser registered"), Deno.exit(1);
};
const HI = PB;
function jI(B, A) {
  PB === HI && (PB = B, Xg = A);
}
const gA = Symbol("CTOR_KEY"), SI = Symbol("HTMLCollectionMutatorSym"), LE = (() => {
  class B extends Array {
    forEach(Q, E) {
      super.forEach(Q, E);
    }
    item(Q) {
      return this[Q] ?? null;
    }
    [SI]() {
      return {
        push: Array.prototype.push.bind(this),
        splice: Array.prototype.splice.bind(this),
        indexOf: Array.prototype.indexOf.bind(this)
      };
    }
    toString() {
      return "[object HTMLCollection]";
    }
  }
  return B;
})();
for (const B of [
  "from",
  "isArray",
  "of"
])
  LE[B] = void 0;
for (const B of [
  "concat",
  "copyWithin",
  "every",
  "fill",
  "filter",
  "find",
  "findIndex",
  "flat",
  "flatMap",
  "includes",
  "indexOf",
  "join",
  "lastIndexOf",
  "map",
  "pop",
  "push",
  "reduce",
  "reduceRight",
  "reverse",
  "shift",
  "slice",
  "some",
  "sort",
  "splice",
  "toLocaleString",
  "unshift",
  // Unlike NodeList, HTMLCollection also doesn't implement these
  "entries",
  "forEach",
  "keys",
  "values"
])
  LE.prototype[B] = void 0;
const fE = LE, yB = Symbol("nodeListMutatorSym"), cg = Symbol("nodeListCachedMutator"), { push: nE, splice: eE, slice: KI, indexOf: YE, filter: og } = Array.prototype;
class LI {
  constructor(A) {
    this.arrayInstance = A;
  }
  // There should only ever be one elementView per element. Element views
  // are basically just the source of HTMLCollections/.children properties
  // on elements that are always in sync with their .childNodes counterpart.
  elementViews = [];
  push(...A) {
    for (const Q of this.elementViews)
      for (const E of A)
        E.nodeType === QA.ELEMENT_NODE && nE.call(Q, E);
    return nE.call(this.arrayInstance, ...A);
  }
  splice(A, Q = 0, ...E) {
    for (const g of this.elementViews) {
      const I = og.call(
        KI.call(this.arrayInstance, A, A + Q),
        (w) => w.nodeType === QA.ELEMENT_NODE
      ), c = E.filter(
        (w) => w.nodeType === QA.ELEMENT_NODE
      );
      let t = -1;
      for (let w = A; w < this.arrayInstance.length; w++) {
        const s = this.arrayInstance[w];
        if (s.nodeType === QA.ELEMENT_NODE) {
          t = YE.call(g, s);
          break;
        }
      }
      t === -1 && (t = g.length), I.length && eE.call(g, t, I.length), eE.call(g, t, 0, ...c);
    }
    return eE.call(this.arrayInstance, A, Q, ...E);
  }
  indexOf(A, Q = 0) {
    return YE.call(this.arrayInstance, A, Q);
  }
  indexOfElementsView(A, Q = 0) {
    return YE.call(this.elementsView(), A, Q);
  }
  // Return the elements-only view for this NodeList. Creates one if
  // it doesn't already exist.
  elementsView() {
    let A = this.elementViews[0];
    return A || (A = new fE(), this.elementViews.push(A), nE.call(
      A,
      ...og.call(
        this.arrayInstance,
        (Q) => Q.nodeType === QA.ELEMENT_NODE
      )
    )), A;
  }
}
const vE = (() => {
  class B extends Array {
    forEach(Q, E) {
      super.forEach(Q, E);
    }
    item(Q) {
      return this[Q] ?? null;
    }
    [yB]() {
      const Q = this[cg];
      if (Q)
        return Q;
      {
        const E = new LI(this);
        return this[cg] = E, E;
      }
    }
    toString() {
      return "[object NodeList]";
    }
  }
  return B;
})();
for (const B of [
  "from",
  "isArray",
  "of"
])
  vE[B] = void 0;
for (const B of [
  "concat",
  "copyWithin",
  "every",
  "fill",
  "filter",
  "find",
  "findIndex",
  "flat",
  "flatMap",
  "includes",
  "indexOf",
  "join",
  "lastIndexOf",
  "map",
  "pop",
  "push",
  "reduce",
  "reduceRight",
  "reverse",
  "shift",
  "slice",
  "some",
  "sort",
  "splice",
  "toLocaleString",
  "unshift"
])
  vE.prototype[B] = void 0;
const cB = vE;
var YB = {
  Element: null,
  Document: null,
  DocumentFragment: null
};
const Og = /[A-Z]/, ug = /[a-z]/;
function xB(B) {
  let A = "data-";
  for (const Q of B)
    Og.test(Q) ? A += "-" + Q.toLowerCase() : A += Q;
  return A;
}
function fI(B) {
  let A = "", Q = "";
  for (const E of B.slice(5))
    Q === "-" && ug.test(E) ? (A += E.toUpperCase(), Q = "") : (A += Q, Q = E);
  return A + Q;
}
function iE(B, A, Q) {
  for (const E of B.childNodes)
    if (E.nodeType === GA.ELEMENT_NODE) {
      let g = 0;
      for (const I of A)
        E.classList.contains(I) && g++;
      g === A.length && Q.push(E), iE(E, A, Q);
    }
  return Q;
}
function ig(B) {
  return "<" + B.localName + xg(B) + ">";
}
const Rg = /* @__PURE__ */ new Set([
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
function kE(B, A) {
  let Q = "", E = "", g = "";
  if (A && (Q = ig(B), E = `</${B.localName}>`, Rg.has(B.localName)))
    return Q;
  const c = [B.localName === "template" ? B.content.childNodes : B.childNodes], t = [0], w = [E];
  let s = 0;
  A:
    for (; s > -1; ) {
      const d = c[s][t[s]];
      if (d)
        switch (d.nodeType) {
          case GA.ELEMENT_NODE: {
            g += ig(d);
            const y = d.localName;
            if (!Rg.has(y)) {
              y === "template" ? c.push(
                d.content.childNodes
              ) : c.push(d.childNodes), t.push(0), w.push(`</${y}>`), s++;
              continue A;
            }
            break;
          }
          case GA.COMMENT_NODE:
            g += `<!--${d.data}-->`;
            break;
          case GA.TEXT_NODE:
            switch (d.parentNode.localName) {
              case "style":
              case "script":
              case "xmp":
              case "iframe":
              case "noembed":
              case "noframes":
              case "plaintext": {
                g += d.data;
                break;
              }
              case "noscript": {
                g += d.data;
                break;
              }
              default: {
                g += d.data.replace(/&/g, "&amp;").replace(/\xA0/g, "&nbsp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                break;
              }
            }
            break;
        }
      else
        s--, t.pop(), c.pop(), g += w.pop();
      t[s]++;
    }
  return Q + g;
}
function xg(B) {
  let A = "";
  for (const Q of B.getAttributeNames())
    A += ` ${Q}`, A += `="${B.getAttribute(Q).replace(/&/g, "&amp;").replace(/\xA0/g, "&nbsp;").replace(/"/g, "&quot;")}"`;
  return A;
}
function _B(B, A, Q) {
  const E = B.parentNode, g = E._getChildNodesMutator();
  let I = null;
  {
    const t = Q ? -1 : 1;
    for (let w = g.indexOf(B) + t; 0 <= w && w < E.childNodes.length; w += t)
      if (!A.includes(E.childNodes[w])) {
        I = E.childNodes[w];
        break;
      }
  }
  A = LQ(A, E);
  let c;
  I ? c = g.indexOf(I) + (Q ? 1 : 0) : c = Q ? 0 : E.childNodes.length, g.splice(c, 0, ...A);
}
function ME(B) {
  let A = B;
  if (!(A && typeof A == "object"))
    return !1;
  for (; ; )
    switch (A.constructor) {
      case YB.DocumentFragment:
        return !0;
      case QA:
      case YB.Element:
        return !1;
      // FIXME: We should probably throw here?
      case Object:
      case null:
      case void 0:
        return !1;
      default:
        A = Reflect.getPrototypeOf(A);
    }
}
function UE(B, A) {
  const Q = B.childNodes.length;
  for (const g of B.childNodes)
    g._setParent(A);
  B._getChildNodesMutator().splice(0, Q);
}
var GA = /* @__PURE__ */ ((B) => (B[B.ELEMENT_NODE = 1] = "ELEMENT_NODE", B[B.ATTRIBUTE_NODE = 2] = "ATTRIBUTE_NODE", B[B.TEXT_NODE = 3] = "TEXT_NODE", B[B.CDATA_SECTION_NODE = 4] = "CDATA_SECTION_NODE", B[B.ENTITY_REFERENCE_NODE = 5] = "ENTITY_REFERENCE_NODE", B[B.ENTITY_NODE = 6] = "ENTITY_NODE", B[B.PROCESSING_INSTRUCTION_NODE = 7] = "PROCESSING_INSTRUCTION_NODE", B[B.COMMENT_NODE = 8] = "COMMENT_NODE", B[B.DOCUMENT_NODE = 9] = "DOCUMENT_NODE", B[B.DOCUMENT_TYPE_NODE = 10] = "DOCUMENT_TYPE_NODE", B[B.DOCUMENT_FRAGMENT_NODE = 11] = "DOCUMENT_FRAGMENT_NODE", B[B.NOTATION_NODE = 12] = "NOTATION_NODE", B))(GA || {});
function LQ(B, A) {
  return B.flatMap((Q) => {
    if (ME(Q)) {
      const E = Array.from(Q.childNodes);
      return UE(Q, A), E;
    } else {
      const E = Q instanceof QA ? Q : new zQ(String(Q));
      return Q === E && A && A._assertNotAncestor(E), E._remove(!0), E._setParent(A, !0), [E];
    }
  });
}
class QA extends EventTarget {
  constructor(A, Q, E, g) {
    if (g !== gA)
      throw new TypeError("Illegal constructor.");
    super(), this.nodeName = A, this.nodeType = Q, this.#A = null, E && E.appendChild(this);
  }
  #A = null;
  parentNode = null;
  #E = null;
  get parentElement() {
    return this.parentNode?.nodeType === 1 ? this.parentNode : null;
  }
  // Instance constants defined after Node
  // class body below to avoid clutter
  static ELEMENT_NODE = 1;
  static ATTRIBUTE_NODE = 2;
  static TEXT_NODE = 3;
  static CDATA_SECTION_NODE = 4;
  static ENTITY_REFERENCE_NODE = 5;
  static ENTITY_NODE = 6;
  static PROCESSING_INSTRUCTION_NODE = 7;
  static COMMENT_NODE = 8;
  static DOCUMENT_NODE = 9;
  static DOCUMENT_TYPE_NODE = 10;
  static DOCUMENT_FRAGMENT_NODE = 11;
  static NOTATION_NODE = 12;
  #B = null;
  get childNodes() {
    return this.#B || (this.#B = new cB());
  }
  _getChildNodesMutator() {
    return this.childNodes[yB]();
  }
  _hasInitializedChildNodes() {
    return !!this.#B;
  }
  /**
   * Update ancestor chain & owner document for this child
   * and all its children.
   */
  _setParent(A, Q = !1) {
    const E = this.parentNode === A, g = !E || Q;
    if (g && (this.parentNode = A, A && (E || this._setOwnerDocument(A.#E)), this._hasInitializedChildNodes()))
      for (const I of this.childNodes)
        I._setParent(this, g);
  }
  _assertNotAncestor(A) {
    if (A.contains(this))
      throw new DOMException("The new child is an ancestor of the parent");
  }
  _setOwnerDocument(A) {
    if (this.#E !== A && (this.#E = A, this._hasInitializedChildNodes()))
      for (const Q of this.childNodes)
        Q._setOwnerDocument(A);
  }
  contains(A) {
    let Q = A;
    for (; Q; ) {
      if (Q === this)
        return !0;
      Q = Q.parentNode;
    }
    return !1;
  }
  get ownerDocument() {
    return this.#E;
  }
  get nodeValue() {
    return this.#A;
  }
  set nodeValue(A) {
  }
  get textContent() {
    let A = "";
    for (const Q of this.childNodes)
      switch (Q.nodeType) {
        case 3:
          A += Q.nodeValue;
          break;
        case 1:
          A += Q.textContent;
          break;
      }
    return A;
  }
  set textContent(A) {
    for (const Q of this.childNodes)
      Q._setParent(null);
    this._getChildNodesMutator().splice(0, this.childNodes.length), this.appendChild(new zQ(A));
  }
  get firstChild() {
    return this._hasInitializedChildNodes() && this.childNodes[0] || null;
  }
  get lastChild() {
    return this._hasInitializedChildNodes() && this.childNodes[this.childNodes.length - 1] || null;
  }
  hasChildNodes() {
    return this._hasInitializedChildNodes() && !!this.childNodes.length;
  }
  cloneNode(A = !1) {
    const Q = this._shallowClone();
    if (Q._setOwnerDocument(this.ownerDocument), A && this._hasInitializedChildNodes())
      for (const E of this.childNodes)
        Q.appendChild(E.cloneNode(!0));
    return Q;
  }
  _shallowClone() {
    throw new Error("Illegal invocation");
  }
  _remove(A = !1) {
    const Q = this.parentNode;
    if (Q) {
      const E = Q._getChildNodesMutator(), g = E.indexOf(this);
      E.splice(g, 1), A || this._setParent(null);
    }
  }
  appendChild(A) {
    return ME(A) ? (this._getChildNodesMutator().push(...A.childNodes), UE(A, this), A) : A._appendTo(this);
  }
  _appendTo(A) {
    A._assertNotAncestor(this);
    const Q = this.parentNode;
    if (Q === A) {
      if (A._getChildNodesMutator().indexOf(this) !== -1)
        return this;
    } else Q && this._remove();
    return this._setParent(A, !0), A._getChildNodesMutator().push(this), this;
  }
  removeChild(A) {
    if (A && typeof A == "object") {
      if (A.parentNode === this)
        return A._remove(), A;
      throw new DOMException(
        "Node.removeChild: The node to be removed is not a child of this node"
      );
    } else
      throw new TypeError("Node.removeChild: Argument 1 is not an object.");
  }
  replaceChild(A, Q) {
    if (Q.parentNode !== this)
      throw new Error("Old child's parent is not the current node.");
    return Q._replaceWith(A), Q;
  }
  insertBefore(A, Q) {
    this._assertNotAncestor(A);
    const E = this._getChildNodesMutator();
    if (Q === null)
      return this.appendChild(A), A;
    const g = E.indexOf(Q);
    if (g === -1)
      throw new Error(
        "DOMException: Child to insert before is not a child of this node"
      );
    if (ME(A))
      E.splice(g, 0, ...A.childNodes), UE(A, this);
    else {
      const I = A.parentNode, c = I?._getChildNodesMutator();
      c && c.splice(c.indexOf(A), 1), A._setParent(this, I !== this), E.splice(g, 0, A);
    }
    return A;
  }
  _replaceWith(...A) {
    if (this.parentNode) {
      const Q = this.parentNode, E = Q._getChildNodesMutator();
      let g = null;
      {
        const t = E.indexOf(this);
        for (let w = t + 1; w < Q.childNodes.length; w++)
          if (!A.includes(Q.childNodes[w])) {
            g = Q.childNodes[w];
            break;
          }
      }
      A = LQ(A, Q);
      let I = g ? E.indexOf(g) : Q.childNodes.length, c;
      Q.childNodes[I - 1] === this ? (I--, c = 1) : c = 0, E.splice(I, c, ...A), this._setParent(null);
    }
  }
  get nextSibling() {
    const A = this.parentNode;
    if (!A)
      return null;
    const Q = A._getChildNodesMutator().indexOf(this);
    return A.childNodes[Q + 1] || null;
  }
  get previousSibling() {
    const A = this.parentNode;
    if (!A)
      return null;
    const Q = A._getChildNodesMutator().indexOf(this);
    return A.childNodes[Q - 1] || null;
  }
  // Node.compareDocumentPosition()'s bitmask values
  static DOCUMENT_POSITION_DISCONNECTED = 1;
  static DOCUMENT_POSITION_PRECEDING = 2;
  static DOCUMENT_POSITION_FOLLOWING = 4;
  static DOCUMENT_POSITION_CONTAINS = 8;
  static DOCUMENT_POSITION_CONTAINED_BY = 16;
  static DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
  /**
   * FIXME: Does not implement attribute node checks
   * ref: https://dom.spec.whatwg.org/#dom-node-comparedocumentposition
   * MDN: https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
   */
  compareDocumentPosition(A) {
    if (A === this)
      return 0;
    if (!(A instanceof QA))
      throw new TypeError(
        "Node.compareDocumentPosition: Argument 1 does not implement interface Node."
      );
    let Q = A, E = this;
    const g = [Q], I = [E];
    for (; Q.parentNode ?? E.parentNode; )
      Q = Q.parentNode ? (g.push(Q.parentNode), Q.parentNode) : Q, E = E.parentNode ? (I.push(E.parentNode), E.parentNode) : E;
    if (Q !== E)
      return QA.DOCUMENT_POSITION_DISCONNECTED | QA.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | QA.DOCUMENT_POSITION_PRECEDING;
    const c = g.length > I.length ? g : I, t = c === g ? I : g;
    if (c[c.length - t.length] === t[0])
      return c === g ? QA.DOCUMENT_POSITION_CONTAINED_BY | QA.DOCUMENT_POSITION_FOLLOWING : QA.DOCUMENT_POSITION_CONTAINS | QA.DOCUMENT_POSITION_PRECEDING;
    const w = c.length - t.length;
    for (let s = t.length - 1; s >= 0; s--) {
      const d = t[s], y = c[w + s];
      if (y !== d) {
        const F = d.parentNode._getChildNodesMutator();
        return F.indexOf(d) < F.indexOf(y) ? t === g ? QA.DOCUMENT_POSITION_PRECEDING : QA.DOCUMENT_POSITION_FOLLOWING : c === g ? QA.DOCUMENT_POSITION_PRECEDING : QA.DOCUMENT_POSITION_FOLLOWING;
      }
    }
    return QA.DOCUMENT_POSITION_FOLLOWING;
  }
  getRootNode(A = {}) {
    return this.parentNode ? this.parentNode.getRootNode(A) : A.composed && this.host ? this.host.getRootNode(A) : this;
  }
}
QA.prototype.ELEMENT_NODE = 1;
QA.prototype.ATTRIBUTE_NODE = 2;
QA.prototype.TEXT_NODE = 3;
QA.prototype.CDATA_SECTION_NODE = 4;
QA.prototype.ENTITY_REFERENCE_NODE = 5;
QA.prototype.ENTITY_NODE = 6;
QA.prototype.PROCESSING_INSTRUCTION_NODE = 7;
QA.prototype.COMMENT_NODE = 8;
QA.prototype.DOCUMENT_NODE = 9;
QA.prototype.DOCUMENT_TYPE_NODE = 10;
QA.prototype.DOCUMENT_FRAGMENT_NODE = 11;
QA.prototype.NOTATION_NODE = 12;
class Hg extends QA {
  #A = "";
  constructor(A, Q, E, g, I) {
    super(
      Q,
      E,
      g,
      I
    ), this.#A = A;
  }
  get nodeValue() {
    return this.#A;
  }
  set nodeValue(A) {
    this.#A = String(A ?? "");
  }
  get data() {
    return this.#A;
  }
  set data(A) {
    this.nodeValue = A;
  }
  get textContent() {
    return this.#A;
  }
  set textContent(A) {
    this.nodeValue = A;
  }
  get length() {
    return this.data.length;
  }
  before(...A) {
    this.parentNode && _B(this, A, !0);
  }
  after(...A) {
    this.parentNode && _B(this, A, !1);
  }
  remove() {
    this._remove();
  }
  replaceWith(...A) {
    this._replaceWith(...A);
  }
  // TODO: Implement NonDocumentTypeChildNode.nextElementSibling, etc
  // ref: https://developer.mozilla.org/en-US/docs/Web/API/CharacterData
}
class zQ extends Hg {
  constructor(A = "") {
    super(
      String(A),
      "#text",
      3,
      null,
      gA
    );
  }
  _shallowClone() {
    return new zQ(this.textContent);
  }
}
let jg = class Sg extends Hg {
  constructor(A = "") {
    super(
      String(A),
      "#comment",
      8,
      null,
      gA
    );
  }
  _shallowClone() {
    return new Sg(this.textContent);
  }
  get textContent() {
    return this.nodeValue;
  }
};
const Gg = /* @__PURE__ */ new Map(), ag = /* @__PURE__ */ new Map();
function $B(B) {
  return Gg.get(B) ?? Gg.set(B, B.toUpperCase()).get(B);
}
function SQ(B) {
  return ag.get(B) ?? ag.set(B, B.toLowerCase()).get(B);
}
class bQ {
  // Minimum number of classnames/tokens in order to switch from
  // an array-backed to a set-backed list
  static #A = 32;
  #E = "";
  get #B() {
    return this.#E;
  }
  set #B(A) {
    this.#E = A, this.#g(A);
  }
  #Q = [];
  #g;
  constructor(A, Q) {
    if (Q !== gA)
      throw new TypeError("Illegal constructor");
    this.#g = A;
  }
  static #I(A) {
    return A === "" || /[\t\n\f\r ]/.test(A);
  }
  #C() {
    const A = Array.from(this.#Q);
    for (let Q = 0; Q < A.length; Q++)
      this[Q] = A[Q];
  }
  set value(A) {
    if (this.#B = A, this.#Q = A.trim().split(/[\t\n\f\r\s]+/g).filter(Boolean), this.#Q.length > bQ.#A)
      this.#Q = new Set(this.#Q);
    else {
      const Q = [];
      for (const E of this.#Q)
        Q.includes(E) || Q.push(E);
      this.#Q = Q;
    }
    this.#C();
  }
  get value() {
    return this.#E;
  }
  get length() {
    return this.#Q.constructor === Array ? this.#Q.length : this.#Q.size;
  }
  *entries() {
    const A = Array.from(this.#Q);
    for (let Q = 0; Q < A.length; Q++)
      yield [Q, A[Q]];
  }
  *values() {
    yield* this.#Q.values();
  }
  *keys() {
    const A = this.length;
    for (let Q = 0; Q < A; Q++)
      yield Q;
  }
  *[Symbol.iterator]() {
    yield* this.#Q.values();
  }
  item(A) {
    return A = Number(A), (Number.isNaN(A) || A === 1 / 0) && (A = 0), this[Math.trunc(A) % 2 ** 32] ?? null;
  }
  contains(A) {
    return this.#Q.constructor === Array ? this.#Q.includes(A) : this.#Q.has(A);
  }
  #D(A) {
    const Q = this.#Q;
    Q.includes(A) || (this[Q.length] = A, Q.push(A));
  }
  #o(A) {
    const Q = this.#Q, { size: E } = Q;
    Q.add(A), E < Q.size && (this[E] = A);
  }
  add(...A) {
    const Q = (this.#Q.constructor === Array ? this.#D : this.#o).bind(
      this
    );
    for (const E of A) {
      if (bQ.#I(E))
        throw new DOMException(
          "Failed to execute 'add' on 'DOMTokenList': The token provided must not be empty."
        );
      Q(E);
    }
    this.#c();
  }
  #i(A) {
    const Q = this.#Q, E = Q.indexOf(A);
    E >= 0 && Q.splice(E, 1);
  }
  #R(A) {
    this.#Q.delete(A);
  }
  remove(...A) {
    const Q = (this.#Q.constructor === Array ? this.#i : this.#R).bind(this), E = this.length;
    for (const I of A) {
      if (bQ.#I(I))
        throw new DOMException(
          "Failed to execute 'remove' on 'DOMTokenList': The token provided must not be empty."
        );
      Q(I);
    }
    const g = this.length;
    if (E !== g) {
      for (let I = g; I < E; I++)
        delete this[I];
      this.#C();
    }
    this.#c();
  }
  replace(A, Q) {
    const E = this.#Q.constructor === Array, g = (E ? this.#i : this.#R).bind(this), I = (E ? this.#D : this.#o).bind(
      this
    );
    if ([A, Q].some((c) => bQ.#I(c)))
      throw new DOMException(
        "Failed to execute 'replace' on 'DOMTokenList': The token provided must not be empty."
      );
    return this.contains(A) ? (this.contains(Q) ? this.remove(A) : (g(A), I(Q), this.#C(), this.#c()), !0) : !1;
  }
  supports() {
    throw new Error("Not implemented");
  }
  toggle(A, Q) {
    if (Q !== void 0)
      return this[Q ? "add" : "remove"](A), !1;
    {
      const E = this.contains(A);
      return this[E ? "remove" : "add"](A), !E;
    }
  }
  forEach(A) {
    for (const [Q, E] of this.entries())
      A(E, Q, this);
  }
  #c() {
    this.#B = Array.from(this.#Q).join(" "), this.#Q.constructor === Array && this.#Q.length > bQ.#A && (this.#Q = new Set(this.#Q));
  }
}
const vB = Symbol("initializeClassListSym"), wQ = Symbol("domTokenListCurrentElementSym");
class vI {
  // This will always be populated with the current element
  // being queried
  [wQ];
  constructor(A) {
    this[wQ] = A;
  }
  #A() {
    const A = this[wQ].classList;
    return A === this ? null : A;
  }
  set value(A) {
    this[wQ][vB](), this[wQ].classList.value = String(A);
  }
  get value() {
    return this.#A()?.value ?? "";
  }
  get length() {
    return this.#A()?.length ?? 0;
  }
  *entries() {
    const A = this.#A();
    A && (yield* A.entries());
  }
  *values() {
    const A = this.#A();
    A && (yield* A.values());
  }
  *keys() {
    const A = this.#A();
    A && (yield* A.keys());
  }
  *[Symbol.iterator]() {
    yield* this.values();
  }
  item(A) {
    return this.#A()?.item(A) ?? null;
  }
  contains(A) {
    return this.#A()?.contains(A) ?? !1;
  }
  add(...A) {
    this[wQ][vB](), this[wQ].classList.add(...A);
  }
  remove(...A) {
    this.#A()?.remove(...A);
  }
  replace(A, Q) {
    return this.#A()?.replace(A, Q) ?? !1;
  }
  supports() {
    throw new Error("Not implemented");
  }
  toggle(A, Q) {
    return Q === !1 ? this.#A()?.toggle(A, Q) ?? !1 : (this[wQ][vB](), this[wQ].classList.add(A), !0);
  }
  forEach(A) {
    this.#A()?.forEach(A);
  }
}
const wB = Symbol("setNamedNodeMapOwnerElementSym"), Kg = Symbol("setAttrValueSym");
class TE extends QA {
  #A = null;
  #E = "";
  #B = "";
  #Q = null;
  constructor(A, Q, E, g) {
    if (g !== gA)
      throw new TypeError("Illegal constructor");
    super(Q, GA.ATTRIBUTE_NODE, null, gA), this.#E = Q, this.#B = E, this.#A = A;
  }
  [wB](A) {
    this.#Q = A, this.#A = A?.attributes ?? null, A && this._setOwnerDocument(A.ownerDocument);
  }
  [Kg](A) {
    this.#B = A;
  }
  _shallowClone() {
    const A = new TE(null, this.#E, this.#B, gA);
    return A._setOwnerDocument(this.ownerDocument), A;
  }
  cloneNode() {
    return super.cloneNode();
  }
  appendChild() {
    throw new DOMException("Cannot add children to an Attribute");
  }
  replaceChild() {
    throw new DOMException("Cannot add children to an Attribute");
  }
  insertBefore() {
    throw new DOMException("Cannot add children to an Attribute");
  }
  removeChild() {
    throw new DOMException(
      "The node to be removed is not a child of this node"
    );
  }
  get name() {
    return this.#E;
  }
  get localName() {
    return this.#E;
  }
  get value() {
    return this.#B;
  }
  set value(A) {
    this.#B = String(A), this.#A && this.#A[gB](
      this.#E,
      this.#B,
      !0
    );
  }
  get ownerElement() {
    return this.#Q ?? null;
  }
  get specified() {
    return !0;
  }
  // TODO
  get prefix() {
    return null;
  }
}
const gB = Symbol("setNamedNodeMapValueSym"), TB = Symbol("getNamedNodeMapValueSym"), Lg = Symbol("getNamedNodeMapAttrNamesSym"), HB = Symbol("getNamedNodeMapAttrNodeSym"), WE = Symbol("removeNamedNodeMapAttrSym");
class zE {
  static #A = function(A, Q) {
    if (Q + 1 > this.length)
      return;
    const E = Object.keys(A).filter((g) => A[g] !== void 0)[Q]?.slice(1);
    return this[HB](E);
  };
  #E;
  constructor(A, Q, E) {
    if (E !== gA)
      throw new TypeError("Illegal constructor.");
    this.#C = A, this.#E = Q;
    for (const g of A.getAttributeNames())
      this[gB](
        g,
        A.getAttribute(g)
      );
  }
  #B = {};
  #Q = {};
  #g = 0;
  #I = 0;
  #C = null;
  [HB](A) {
    const Q = "a" + A;
    let E = this.#B[Q];
    return E || (E = this.#B[Q] = new TE(
      this,
      A,
      this.#Q[Q],
      gA
    ), E[wB](this.#C)), E;
  }
  [Lg]() {
    const A = [];
    for (const [Q, E] of Object.entries(this.#Q))
      E !== void 0 && A.push(Q.slice(1));
    return A;
  }
  [TB](A) {
    const Q = "a" + A;
    return this.#Q[Q];
  }
  [gB](A, Q, E = !1) {
    const g = "a" + A;
    if (this.#Q[g] === void 0) {
      if (this.#g++, this.#g > this.#I) {
        this.#I = this.#g;
        const I = this.#I - 1;
        Object.defineProperty(this, String(this.#I - 1), {
          get: zE.#A.bind(this, this.#Q, I)
        });
      }
    } else this.#B[g] && this.#B[g][Kg](Q);
    this.#Q[g] = Q, E && this.#E(A, Q);
  }
  /**
   * Called when an attribute is removed from
   * an element
   */
  [WE](A) {
    const Q = "a" + A;
    if (this.#Q[Q] !== void 0) {
      this.#g--, this.#Q[Q] = void 0, this.#E(A, null);
      const E = this.#B[Q];
      E && (E[wB](null), this.#B[Q] = void 0);
    }
  }
  *[Symbol.iterator]() {
    for (let A = 0; A < this.length; A++)
      yield this[A];
  }
  get length() {
    return this.#g;
  }
  // FIXME: This method should accept anything and basically
  // coerce any non numbers (and Infinity/-Infinity) into 0
  item(A) {
    return A >= this.#g ? null : this[A];
  }
  getNamedItem(A) {
    const Q = "a" + A;
    return this.#Q[Q] !== void 0 ? this[HB](A) : null;
  }
  setNamedItem(A) {
    if (A.ownerElement)
      throw new DOMException("Attribute already in use");
    const Q = "a" + A.name, E = this.#B[Q];
    E && (E[wB](null), this.#Q[Q] = void 0), A[wB](this.#C), this.#B[Q] = A, this[gB](A.name, A.value, !0);
  }
  removeNamedItem(A) {
    const Q = "a" + A;
    if (this.#Q[Q] !== void 0) {
      const E = this[HB](A);
      return this[WE](A), E;
    }
    throw new DOMException("Node was not found");
  }
}
const TI = ":A-Za-z_" + String.raw`\u{C0}-\u{D6}\u{D8}-\u{F6}\u{F8}-\u{2FF}\u{370}-\u{37D}` + String.raw`\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{2070}-\u{218F}\u{2C00}-\u{2FEF}` + String.raw`\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}`, zI = TI + String.raw`\u{B7}\u{0300}-\u{036F}\u{203F}-\u{2040}0-9.-`, qI = new RegExp(`[${zI}]`, "u");
let mQ = class fg extends QA {
  #A = null;
  get attributes() {
    return this.#A || (this.#A = new zE(this, (A, Q) => {
      const E = Q === null;
      switch (Q === null && (Q = ""), A) {
        case "class": {
          E ? this.#I = -1 : this.#I === -1 && (this.#I = this.#g + 1), this.#Q = Q, this.#D.value = Q;
          break;
        }
        case "id": {
          E ? this.#g = -1 : this.#g === -1 && (this.#g = this.#I + 1), this.#B = Q;
          break;
        }
      }
    }, gA)), this.#A;
  }
  #E = null;
  #B = "";
  #Q = "";
  #g = -1;
  #I = -1;
  // Only initialize a classList when we need one
  #C = new vI(
    this
  );
  get #D() {
    return this.#C;
  }
  [vB]() {
    this.#C.constructor !== bQ && (this.#C = new bQ(
      (A) => {
        this.#Q !== A && (this.#Q = A, this.#I === -1 && (this.#I = this.#g + 1), this.#A && (this.hasAttribute("class") || A !== "") && this.attributes[gB]("class", A));
      },
      gA
    ));
  }
  constructor(A, Q, E, g) {
    super(
      A,
      GA.ELEMENT_NODE,
      Q,
      g
    );
    for (const I of E)
      this.setAttribute(I[0], I[1]);
    this.nodeName = $B(A);
  }
  get tagName() {
    return this.nodeName;
  }
  get localName() {
    return SQ(this.tagName);
  }
  _shallowClone() {
    const A = [];
    for (const Q of this.getAttributeNames())
      A.push([Q, this.getAttribute(Q)]);
    return new fg(this.nodeName, null, A, gA);
  }
  get childElementCount() {
    return this._getChildNodesMutator().elementsView().length;
  }
  get className() {
    return this.#Q;
  }
  set className(A) {
    this.#D.value = A;
  }
  get classList() {
    return this.#D;
  }
  get outerHTML() {
    return kE(this, !0);
  }
  set outerHTML(A) {
    if (this.parentNode) {
      const { parentElement: Q, parentNode: E } = this;
      let g = Q?.localName;
      switch (E.nodeType) {
        case GA.DOCUMENT_NODE:
          throw new DOMException(
            "Modifications are not allowed for this document"
          );
        // setting outerHTML, step 4. Document Fragment
        // ref: https://w3c.github.io/DOM-Parsing/#dom-element-outerhtml
        case GA.DOCUMENT_FRAGMENT_NODE:
          g = "body";
        default: {
          const { childNodes: I } = XE(A, g).childNodes[0], c = E._getChildNodesMutator(), t = c.indexOf(this);
          for (let w = I.length - 1; w >= 0; w--) {
            const s = I[w];
            c.splice(t, 0, s), s._setParent(E), s._setOwnerDocument(E.ownerDocument);
          }
          this.remove();
        }
      }
    }
  }
  get innerHTML() {
    return kE(this, !1);
  }
  set innerHTML(A) {
    for (const E of this.childNodes)
      E._setParent(null);
    const Q = this._getChildNodesMutator();
    if (Q.splice(0, this.childNodes.length), A.length) {
      const E = XE(A, this.localName);
      for (const g of E.childNodes[0].childNodes)
        Q.push(g);
      for (const g of this.childNodes)
        g._setParent(this), g._setOwnerDocument(this.ownerDocument);
    }
  }
  get innerText() {
    return this.textContent;
  }
  set innerText(A) {
    this.textContent = A;
  }
  get children() {
    return this._getChildNodesMutator().elementsView();
  }
  get id() {
    return this.#B || "";
  }
  set id(A) {
    this.setAttribute("id", A);
  }
  get dataset() {
    return this.#E ? this.#E : (this.#E = new Proxy({}, {
      get: (A, Q, E) => {
        if (typeof Q == "string") {
          const g = xB(Q);
          return this.getAttribute(g) ?? void 0;
        }
      },
      set: (A, Q, E, g) => {
        if (typeof Q == "string") {
          let I = "data-", c = "";
          for (const t of Q) {
            if (c === "-" && ug.test(t))
              throw new DOMException(
                "An invalid or illegal string was specified"
              );
            if (!qI.test(t))
              throw new DOMException("String contains an invalid character");
            Og.test(t) && (I += "-"), I += t.toLowerCase(), c = t;
          }
          this.setAttribute(I, String(E));
        }
        return !0;
      },
      deleteProperty: (A, Q) => {
        if (typeof Q == "string") {
          const E = xB(Q);
          this.removeAttribute(E);
        }
        return !0;
      },
      ownKeys: (A) => this.getAttributeNames().flatMap((Q) => Q.startsWith?.("data-") ? [fI(Q)] : []),
      getOwnPropertyDescriptor: (A, Q) => {
        if (typeof Q == "string") {
          const E = xB(Q);
          if (this.hasAttribute(E))
            return {
              writable: !0,
              enumerable: !0,
              configurable: !0
            };
        }
      },
      has: (A, Q) => {
        if (typeof Q == "string") {
          const E = xB(Q);
          return this.hasAttribute(E);
        }
        return !1;
      }
    }), this.#E);
  }
  getAttributeNames() {
    if (!this.#A) {
      const A = [], Q = +(this.#g > this.#I);
      for (let E = 0; E < 2; E++)
        switch ((E + Q) % 2) {
          // "id" attribute
          case 0: {
            ~this.#g && A.push("id");
            break;
          }
          // "class" attribute
          case 1: {
            ~this.#I && A.push("class");
            break;
          }
        }
      return A;
    }
    return this.attributes[Lg]();
  }
  getAttribute(A) {
    const Q = SQ(String(A));
    switch (Q) {
      case "id":
        return ~this.#g ? this.#B : null;
      case "class":
        return ~this.#I ? this.#Q : null;
    }
    return this.#A ? this.attributes[TB](Q) ?? null : null;
  }
  setAttribute(A, Q) {
    const E = SQ(String(A)), g = String(Q);
    let I = !1;
    switch (E) {
      case "id": {
        this.#B = g, this.#g === -1 && (this.#g = this.#I + 1);
        break;
      }
      case "class": {
        this.#D.value = g, this.#I === -1 && (this.#I = this.#g + 1);
        break;
      }
      default:
        I = !0;
    }
    (this.#A || I) && this.attributes[gB](E, g);
  }
  removeAttribute(A) {
    const Q = SQ(String(A));
    switch (Q) {
      case "id": {
        this.#B = "", this.#g = -1;
        break;
      }
      case "class": {
        this.#D.value = "", this.#I = -1;
        break;
      }
    }
    this.#A && this.attributes[WE](Q);
  }
  toggleAttribute(A, Q) {
    const E = SQ(String(A));
    return this.hasAttribute(E) ? Q === void 0 || Q === !1 ? (this.removeAttribute(E), !1) : !0 : Q === void 0 || Q === !0 ? (this.setAttribute(E, ""), !0) : !1;
  }
  hasAttribute(A) {
    const Q = SQ(String(A));
    switch (Q) {
      case "id":
        return !!~this.#g;
      case "class":
        return !!~this.#I;
    }
    return this.#A ? this.attributes[TB](Q) !== void 0 : !1;
  }
  hasAttributeNS(A, Q) {
    const E = SQ(String(Q));
    switch (E) {
      case "id":
        return !!~this.#g;
      case "class":
        return !!~this.#I;
    }
    return this.#A ? this.attributes[TB](E) !== void 0 : !1;
  }
  replaceWith(...A) {
    this._replaceWith(...A);
  }
  remove() {
    this._remove();
  }
  append(...A) {
    this._getChildNodesMutator().push(...LQ(A, this));
  }
  prepend(...A) {
    this._getChildNodesMutator().splice(0, 0, ...LQ(A, this));
  }
  before(...A) {
    this.parentNode && _B(this, A, !0);
  }
  after(...A) {
    this.parentNode && _B(this, A, !1);
  }
  get firstElementChild() {
    return this._getChildNodesMutator().elementsView()[0] ?? null;
  }
  get lastElementChild() {
    const A = this._getChildNodesMutator().elementsView();
    return A[A.length - 1] ?? null;
  }
  get nextElementSibling() {
    const A = this.parentNode;
    if (!A)
      return null;
    const Q = A._getChildNodesMutator(), E = Q.indexOfElementsView(this);
    return Q.elementsView()[E + 1] ?? null;
  }
  get previousElementSibling() {
    const A = this.parentNode;
    if (!A)
      return null;
    const Q = A._getChildNodesMutator(), E = Q.indexOfElementsView(this);
    return Q.elementsView()[E - 1] ?? null;
  }
  querySelector(A) {
    if (!this.ownerDocument)
      throw new Error("Element must have an owner document");
    return this.ownerDocument._nwapi.first(A, this);
  }
  querySelectorAll(A) {
    if (!this.ownerDocument)
      throw new Error("Element must have an owner document");
    const Q = new cB(), E = Q[yB]();
    for (const g of this.ownerDocument._nwapi.select(A, this))
      E.push(g);
    return Q;
  }
  matches(A) {
    return this.ownerDocument._nwapi.match(A, this);
  }
  closest(A) {
    const { match: Q } = this.ownerDocument._nwapi;
    let E = this;
    do {
      if (Q(A, E))
        return E;
      E = E.parentElement;
    } while (E !== null);
    return null;
  }
  // TODO: DRY!!!
  getElementById(A) {
    if (!this._hasInitializedChildNodes())
      return null;
    for (const Q of this.childNodes)
      if (Q.nodeType === GA.ELEMENT_NODE) {
        if (Q.id === A)
          return Q;
        const E = Q.getElementById(A);
        if (E)
          return E;
      }
    return null;
  }
  getElementsByTagName(A) {
    if (!this._hasInitializedChildNodes())
      return [];
    const Q = $B(A);
    return Q === "*" ? this._getElementsByTagNameWildcard([]) : this._getElementsByTagName(Q, []);
  }
  _getElementsByTagNameWildcard(A) {
    if (!this._hasInitializedChildNodes())
      return A;
    for (const Q of this.childNodes)
      Q.nodeType === GA.ELEMENT_NODE && (A.push(Q), Q._getElementsByTagNameWildcard(A));
    return A;
  }
  _getElementsByTagName(A, Q) {
    if (!this._hasInitializedChildNodes())
      return Q;
    for (const E of this.childNodes)
      E.nodeType === GA.ELEMENT_NODE && (E.tagName === A && Q.push(E), E._getElementsByTagName(A, Q));
    return Q;
  }
  getElementsByClassName(A) {
    return this._hasInitializedChildNodes() ? iE(
      this,
      A.trim().split(/\s+/),
      []
    ) : [];
  }
  getElementsByTagNameNS(A, Q) {
    return this._hasInitializedChildNodes() ? this.getElementsByTagName(Q) : [];
  }
};
YB.Element = mQ;
const VE = Symbol(), rE = Symbol();
let vQ = class vg extends QA {
  constructor() {
    super(
      "#document-fragment",
      GA.DOCUMENT_FRAGMENT_NODE,
      null,
      gA
    );
  }
  get childElementCount() {
    return this._getChildNodesMutator().elementsView().length;
  }
  get children() {
    return this._getChildNodesMutator().elementsView();
  }
  get firstElementChild() {
    return this._getChildNodesMutator().elementsView()[0] ?? null;
  }
  get lastElementChild() {
    const A = this._getChildNodesMutator().elementsView();
    return A[A.length - 1] ?? null;
  }
  _shallowClone() {
    return new vg();
  }
  append(...A) {
    this._getChildNodesMutator().push(...LQ(A, this));
  }
  prepend(...A) {
    this._getChildNodesMutator().splice(0, 0, ...LQ(A, this));
  }
  replaceChildren(...A) {
    const Q = this._getChildNodesMutator();
    for (const E of this.childNodes)
      E._setParent(null);
    Q.splice(0, this.childNodes.length), Q.splice(0, 0, ...LQ(A, this));
  }
  // TODO: DRY!!!
  getElementById(A) {
    for (const Q of this.childNodes)
      if (Q.nodeType === GA.ELEMENT_NODE) {
        if (Q.id === A)
          return Q;
        const E = Q.getElementById(A);
        if (E)
          return E;
      }
    return null;
  }
  querySelector(A) {
    if (!this.ownerDocument)
      throw new Error("DocumentFragment must have an owner document");
    return this.ownerDocument._nwapi.first(A, this);
  }
  querySelectorAll(A) {
    if (!this.ownerDocument)
      throw new Error("DocumentFragment must have an owner document");
    const Q = new cB();
    return Q[yB]().push(
      ...this.ownerDocument._nwapi.select(A, this)
    ), Q;
  }
};
YB.DocumentFragment = vQ;
function PI(B) {
  const A = [];
  if (B === "*")
    return $I(this, A);
  for (const Q of this.childNodes)
    Q.nodeType === GA.ELEMENT_NODE && (Q.tagName === B && A.push(Q), Q._getElementsByTagName(B, A));
  return A;
}
function _I(B) {
  return iE(this, B.trim().split(/\s+/), []);
}
function $I(B, A) {
  for (const Q of B.childNodes)
    Q.nodeType === GA.ELEMENT_NODE && (A.push(Q), Q._getElementsByTagNameWildcard(A));
  return A;
}
vQ.prototype[VE] = PI;
vQ.prototype[rE] = _I;
class RE extends mQ {
  /**
   * This blocks access to the .#contents property when the
   * super() constructor is running which invokes (our
   * overridden) _setParent() method. Without it, we get
   * the following error thrown:
   *
   *   TypeError: Cannot read private member #content from
   *   an object whose class did not declare it
   *
   * FIXME: Maybe find a cleaner way to do this
   */
  __contentIsSet = !1;
  #A = null;
  constructor(A, Q, E, g) {
    super(
      "TEMPLATE",
      A,
      Q,
      E
    ), this.#A = g, this.__contentIsSet = !0;
  }
  get content() {
    return this.#A;
  }
  _setOwnerDocument(A) {
    super._setOwnerDocument(A), this.__contentIsSet && this.content._setOwnerDocument(A);
  }
  _shallowClone() {
    const A = new vQ(), Q = this.getAttributeNames().map((E) => [E, this.getAttribute(E)]);
    return new RE(null, Q, gA, A);
  }
  cloneNode(A = !1) {
    const Q = super.cloneNode(A);
    if (A) {
      const E = Q.content;
      for (const g of this.content.childNodes)
        E.appendChild(g.cloneNode(A));
    }
    return Q;
  }
  get innerHTML() {
    return kE(this, !1);
  }
  // Replace children in the `.content`
  set innerHTML(A) {
    const Q = this.content;
    for (const g of Q.childNodes)
      g._setParent(null);
    const E = Q._getChildNodesMutator();
    if (E.splice(0, Q.childNodes.length), A.length) {
      const g = XE(A, this.localName);
      E.push(...g.childNodes[0].childNodes);
      for (const I of Q.childNodes)
        I._setParent(Q), I._setOwnerDocument(Q.ownerDocument);
    }
  }
  get outerHTML() {
    return `<template${xg(this)}>${this.innerHTML}</template>`;
  }
}
const AC = (B) => {
  const A = Tg({ document: B, DOMException }, "null");
  return A.configure({
    IDS_DUPES: !1,
    LOGERRORS: !1
  }), A;
};
function Tg(B, A) {
  var Q = "nwsapi-2.2.0", E = B.document, g = E.documentElement, I = Array.prototype.slice, c = "[\\x20\\t\\r\\n\\f]", t = {
    // extensions
    operators: "[~*^$|]=|=",
    combinators: "[\\x20\\t>+~](?=[^>+~])"
  }, w = {
    // not enclosed in double/single/parens/square
    double_enc: '(?=(?:[^"]*["][^"]*["])*[^"]*$)',
    single_enc: "(?=(?:[^']*['][^']*['])*[^']*$)",
    parens_enc: "(?![^\\x28]*\\x29)",
    square_enc: "(?![^\\x5b]*\\x5d)"
  }, s = {
    // regular expressions
    HasEscapes: RegExp("\\\\"),
    HexNumbers: RegExp("^[0-9a-fA-F]"),
    EscOrQuote: RegExp("^\\\\|[\\x22\\x27]"),
    RegExpChar: RegExp("(?:(?!\\\\)[\\\\^$.*+?()[\\]{}|\\/])", "g"),
    TrimSpaces: RegExp("[\\r\\n\\f]|^" + c + "+|" + c + "+$", "g"),
    CommaGroup: RegExp("(\\s*,\\s*)" + w.square_enc + w.parens_enc, "g"),
    SplitGroup: RegExp("((?:\\x28[^\\x29]*\\x29|\\[[^\\]]*\\]|\\\\.|[^,])+)", "g"),
    FixEscapes: RegExp("\\\\([0-9a-fA-F]{1,6}" + c + "?|.)|([\\x22\\x27])", "g"),
    CombineWSP: RegExp("[\\n\\r\\f\\x20]+" + w.single_enc + w.double_enc, "g"),
    TabCharWSP: RegExp("(\\x20?\\t+\\x20?)" + w.single_enc + w.double_enc, "g"),
    PseudosWSP: RegExp("\\s+([-+])\\s+" + w.square_enc, "g")
  }, d = {
    combinator: RegExp("\\s?([>+~])\\s?", "g"),
    apimethods: RegExp("^(?:[a-z]+|\\*)\\|", "i"),
    namespaces: RegExp("(\\*|[a-z]+)\\|[-a-z]+", "i")
  }, y = {
    // pseudo-classes requiring parameters
    linguistic: "(dir|lang)\\x28\\s?([-\\w]{2,})\\s?(?:\\x29|$)",
    logicalsel: "(is|where|matches|not)\\x28\\s?([^()]*|[^\\x28]*\\x28[^\\x29]*\\x29)\\s?(?:\\x29|$)",
    treestruct: "(nth(?:-last)?(?:-child|-of-type))(?:\\x28\\s?(even|odd|(?:[-+]?\\d*)(?:n\\s?[-+]?\\s?\\d*)?)\\s?(?:\\x29|$))",
    // pseudo-classes not requiring parameters
    locationpc: "(any-link|link|visited|target)\\b",
    useraction: "(hover|active|focus|focus-within)\\b",
    structural: "(root|empty|(?:(?:first|last|only)(?:-child|-of-type)))\\b",
    inputstate: "(enabled|disabled|read-only|read-write|placeholder-shown|default)\\b",
    inputvalue: "(checked|indeterminate|required|optional|valid|invalid|in-range|out-of-range)\\b",
    // pseudo-elements starting with single colon (:)
    pseudo_sng: "(after|before|first-letter|first-line)\\b",
    // pseudo-elements starting with double colon (::)
    pseudo_dbl: ":(after|before|first-letter|first-line|selection|placeholder|-webkit-[-a-zA-Z0-9]{2,})\\b"
  }, F = {
    // pseudo-classes
    treestruct: RegExp("^:(?:" + y.treestruct + ")(.*)", "i"),
    structural: RegExp("^:(?:" + y.structural + ")(.*)", "i"),
    linguistic: RegExp("^:(?:" + y.linguistic + ")(.*)", "i"),
    useraction: RegExp("^:(?:" + y.useraction + ")(.*)", "i"),
    inputstate: RegExp("^:(?:" + y.inputstate + ")(.*)", "i"),
    inputvalue: RegExp("^:(?:" + y.inputvalue + ")(.*)", "i"),
    locationpc: RegExp("^:(?:" + y.locationpc + ")(.*)", "i"),
    logicalsel: RegExp("^:(?:" + y.logicalsel + ")(.*)", "i"),
    pseudo_dbl: RegExp("^:(?:" + y.pseudo_dbl + ")(.*)", "i"),
    pseudo_sng: RegExp("^:(?:" + y.pseudo_sng + ")(.*)", "i"),
    // combinator symbols
    children: RegExp("^" + c + "?\\>" + c + "?(.*)"),
    adjacent: RegExp("^" + c + "?\\+" + c + "?(.*)"),
    relative: RegExp("^" + c + "?\\~" + c + "?(.*)"),
    ancestor: RegExp("^" + c + "+(.*)"),
    // universal & namespace
    universal: RegExp("^\\*(.*)"),
    namespace: RegExp("^(\\w+|\\*)?\\|(.*)")
  }, J = RegExp("^[\\u0591-\\u08ff\\ufb1d-\\ufdfd\\ufe70-\\ufefc ]+$"), p = "Not enough arguments", j = " is not a valid selector", P = RegExp("(:nth(?:-last)?-child)", "i"), DA = RegExp("(:nth(?:-last)?-of-type)", "i"), X, S, b = {
    IDS_DUPES: !0,
    MIXEDCASE: !0,
    LOGERRORS: !0,
    VERBOSITY: !0
  }, u, q, FA, wA = {
    "=": 1,
    "^=": 1,
    "$=": 1,
    "|=": 1,
    "*=": 1,
    "~=": 1
  }, LA = {
    accept: 1,
    "accept-charset": 1,
    align: 1,
    alink: 1,
    axis: 1,
    bgcolor: 1,
    charset: 1,
    checked: 1,
    clear: 1,
    codetype: 1,
    color: 1,
    compact: 1,
    declare: 1,
    defer: 1,
    dir: 1,
    direction: 1,
    disabled: 1,
    enctype: 1,
    face: 1,
    frame: 1,
    hreflang: 1,
    "http-equiv": 1,
    lang: 1,
    language: 1,
    link: 1,
    media: 1,
    method: 1,
    multiple: 1,
    nohref: 1,
    noresize: 1,
    noshade: 1,
    nowrap: 1,
    readonly: 1,
    rel: 1,
    rev: 1,
    rules: 1,
    scope: 1,
    scrolling: 1,
    selected: 1,
    shape: 1,
    target: 1,
    text: 1,
    type: 1,
    valign: 1,
    valuetype: 1,
    vlink: 1
  }, XA = {}, sA = {}, rA = {
    "=": {
      p1: "^",
      p2: "$",
      p3: "true"
    },
    "^=": {
      p1: "^",
      p2: "",
      p3: "true"
    },
    "$=": {
      p1: "",
      p2: "$",
      p3: "true"
    },
    "*=": {
      p1: "",
      p2: "",
      p3: "true"
    },
    "|=": {
      p1: "^",
      p2: "(-|$)",
      p3: "true"
    },
    "~=": {
      p1: "(^|\\s)",
      p2: "(\\s|$)",
      p3: "true"
    }
  }, CQ = function(R, D) {
    for (var a = 0, N = R.length, k = Array(N); N > a && D(k[a] = R[a]) !== !1; )
      ++a;
    return k;
  }, fA = function(R, D) {
    for (var a = -1, N = D.length; N--; )
      R[R.length] = D[++a];
    return R;
  }, dA = function(R, D) {
    return !WA && R === D ? (WA = !0, 0) : R.compareDocumentPosition(D) & 4 ? -1 : 1;
  }, WA = !1, kA = function(R) {
    for (var D = 0, a = -1, N = R.length + 1, k = []; --N; )
      R[D++] !== R[D] && (k[++a] = R[D - 1]);
    return WA = !1, k;
  }, nA = function(R) {
    var D, a = "getElementsByTagNameNS";
    return R = R.ownerDocument || R, D = R.documentElement.namespaceURI || "http://www.w3.org/1999/xhtml", R[a]("*", "*").length - R[a](D, "*").length > 0;
  }, $ = function(R, D) {
    var a = E;
    return E = R.ownerDocument || R, (D || a !== E) && (g = E.documentElement, FA = oB(E), q = FA && E.compatMode.indexOf("CSS") < 0, u = g && g.namespaceURI, IA.doc = E, IA.root = g), IA.from = R;
  }, NA = function(R) {
    if (R < 1 || R > 1114111 || R > 55295 && R < 57344)
      return "\\ufffd";
    if (R < 65536) {
      var D = "000" + R.toString(16);
      return "\\u" + D.substr(D.length - 4);
    }
    return "\\u" + ((R - 65536 >> 10) + 55296).toString(16) + "\\u" + ((R - 65536) % 1024 + 56320).toString(16);
  }, T = function(R) {
    return R < 1 || R > 1114111 || R > 55295 && R < 57344 ? "�" : R < 65536 ? String.fromCharCode(R) : String.fromCodePoint ? String.fromCodePoint(R) : String.fromCharCode(
      (R - 65536 >> 10) + 55296,
      (R - 65536) % 1024 + 56320
    );
  }, eA = function(R) {
    return s.HasEscapes.test(R) ? R.replace(
      s.FixEscapes,
      function(D, a, N) {
        return N ? "\\" + N : (
          // javascript strings are UTF-16 encoded
          s.HexNumbers.test(a) ? NA(parseInt(a, 16)) : (
            // \' \"
            s.EscOrQuote.test(a) ? D : (
              // \g \h \. \# etc
              a
            )
          )
        );
      }
    ) : R;
  }, hA = function(R) {
    return s.HasEscapes.test(R) ? R.replace(
      s.FixEscapes,
      function(D, a, N) {
        return N || // javascript strings are UTF-16 encoded
        (s.HexNumbers.test(a) ? T(parseInt(a, 16)) : (
          // \' \"
          s.EscOrQuote.test(a) ? D : (
            // \g \h \. \# etc
            a
          )
        ));
      }
    ) : R;
  }, aA = {
    "#": "getElementById",
    "*": "getElementsByTagNameNS",
    ".": "getElementsByClassName"
  }, MA = {
    "#": function(R, D) {
      return s.HasEscapes.test(D) && (D = hA(D)), function(a, N) {
        return vA(D, R);
      };
    },
    "*": function(R, D) {
      return s.HasEscapes.test(D) && (D = hA(D)), function(a, N) {
        return HA(D, R);
      };
    },
    ".": function(R, D) {
      return s.HasEscapes.test(D) && (D = hA(D)), function(a, N) {
        return DQ(D, R);
      };
    }
  }, pA = function(R, D) {
    for (var a = D, N = [], k = a.firstElementChild; a = k; )
      if (a.id == R && (N[N.length] = a), !(k = a.firstElementChild || a.nextElementSibling))
        for (; !k && (a = a.parentElement) && a !== D; )
          k = a.nextElementSibling;
    return N;
  }, vA = function(R, D) {
    var a, N, k = aA["#"];
    if (b.IDS_DUPES === !1) {
      if (k in D)
        return (a = D[k](R)) ? [a] : e;
    } else if ("all" in D)
      if (a = D.all[R]) {
        if (a.nodeType == 1) return a.getAttribute("id") != R ? [] : [a];
        if (R == "length") return (a = D[k](R)) ? [a] : e;
        for (i = 0, l = a.length, N = []; l > i; ++i)
          a[i].id == R && (N[N.length] = a[i]);
        return N && N.length ? N : [N];
      } else return e;
    return pA(R, D);
  }, HA = function(R, D) {
    var a, N, k = aA["*"];
    if (k in D)
      return I.call(D[k]("*", R));
    if (R = R.toLowerCase(), a = D.firstElementChild)
      if (a.nextElementSibling || R == "*" || a.localName == R) {
        N = [];
        do
          (R == "*" || a.localName == R) && (N[N.length] = a), fA(N, a[k]("*", R));
        while (a = a.nextElementSibling);
      } else
        return I.call(a[k]("*", R));
    else N = e;
    return N;
  }, DQ = function(R, D) {
    var a, N, k = aA["."], m;
    if (k in D)
      return I.call(D[k](R));
    if (a = D.firstElementChild)
      if (m = RegExp("(^|\\s)" + R + "(\\s|$)", q ? "i" : ""), a.nextElementSibling || m.test(a.className)) {
        N = [];
        do
          m.test(a.className) && (N[N.length] = a), fA(N, a[k](R));
        while (a = a.nextElementSibling);
      } else
        return I.call(a[k](R));
    else N = e;
    return N;
  }, TA = function(R, D) {
    var a, N, k = R.getAttributeNames();
    for (D = RegExp(":?" + D + "$", FA ? "i" : ""), a = 0, N = k.length; N > a; ++a)
      if (D.test(k[a])) return !0;
    return !1;
  }, yA = function() {
    var R = 0, D = 0, a = 0, N = void 0, k = Array(), m = Array();
    return function(r, CA) {
      if (CA == 2)
        return R = 0, D = 0, a = 0, m.length = 0, k.length = 0, N = void 0, -1;
      var AA, v, z, V, f;
      if (N === r.parentElement)
        v = a, z = R, f = D;
      else {
        for (f = k.length, N = r.parentElement, v = -1, z = 0, V = f - 1; f > z; ++z, --V) {
          if (k[z] === N) {
            v = z;
            break;
          }
          if (k[V] === N) {
            v = V;
            break;
          }
        }
        if (v < 0) {
          for (k[v = f] = N, f = 0, m[v] = Array(), AA = N && N.firstElementChild || r; AA; )
            m[v][f] = AA, AA === r && (z = f), AA = AA.nextElementSibling, ++f;
          if (a = v, R = 0, D = f, f < 2) return f;
        } else
          f = m[v].length, a = v;
      }
      if (r !== m[v][z] && r !== m[v][z = 0]) {
        for (z = 0, AA = m[v], V = f - 1; f > z && AA[z] !== r; ++z, --V)
          if (AA[V] === r) {
            z = V;
            break;
          }
      }
      return R = z + 1, D = f, CA ? f - z : R;
    };
  }(), zA = function() {
    var R = 0, D = 0, a = 0, N = void 0, k = Array(), m = Array();
    return function(r, CA) {
      if (CA == 2)
        return R = 0, D = 0, a = 0, m.length = 0, k.length = 0, N = void 0, -1;
      var AA, v, z, V, f, uA = r.localName;
      if (m[a] && m[a][uA] && N === r.parentElement)
        v = a, z = R, f = D;
      else {
        for (f = k.length, N = r.parentElement, v = -1, z = 0, V = f - 1; f > z; ++z, --V) {
          if (k[z] === N) {
            v = z;
            break;
          }
          if (k[V] === N) {
            v = V;
            break;
          }
        }
        if (v < 0 || !m[v][uA]) {
          for (k[v = f] = N, m[v] || (m[v] = Object()), f = 0, m[v][uA] = Array(), AA = N && N.firstElementChild || r; AA; )
            AA === r && (z = f), AA.localName == uA && (m[v][uA][f] = AA, ++f), AA = AA.nextElementSibling;
          if (a = v, R = z, D = f, f < 2) return f;
        } else
          f = m[v][uA].length, a = v;
      }
      if (r !== m[v][uA][z] && r !== m[v][uA][z = 0]) {
        for (z = 0, AA = m[v][uA], V = f - 1; f > z && AA[z] !== r; ++z, --V)
          if (AA[V] === r) {
            z = V;
            break;
          }
      }
      return R = z + 1, D = f, CA ? f - z : R;
    };
  }(), oB = function(R) {
    var D = R.ownerDocument || R;
    return D.nodeType == 9 && // contentType not in IE <= 11
    "contentType" in D ? D.contentType.indexOf("/html") > 0 : D.createElement("DiV").localName == "div";
  }, XQ = function(R, D) {
    if (typeof R == "string")
      return !!b[R];
    if (typeof R != "object")
      return b;
    for (var a in R)
      b[a] = !!R[a];
    return D && (H = {}, _ = {}), YQ(), !0;
  }, BA = function(R, D) {
    var a;
    if (b.VERBOSITY)
      throw D ? a = new D(R) : a = new B.DOMException(R, "SyntaxError"), a;
    b.LOGERRORS && console && console.log && console.log(R);
  }, NQ = function(R) {
    YQ(), Y = $(R, !0);
  }, YQ = function() {
    var R = (
      // doesn't start with a digit
      "(?=[^0-9])(?:-{2}|[a-zA-Z0-9-_]|[^\\x00-\\x9f]|\\\\[^\\r\\n\\f0-9a-fA-F]|\\\\[0-9a-fA-F]{1,6}(?:\\r\\n|\\s)?|\\\\.)+"
    ), D = "[-\\w]+", a = "(?:[-+]?\\d*)(?:n\\s?[-+]?\\s?\\d*)", N = '"[^"\\\\]*(?:\\\\.[^"\\\\]*)*(?:"|$)', k = "'[^'\\\\]*(?:\\\\.[^'\\\\]*)*(?:'|$)", m = R + "|" + N + "|" + k, r = "([\\x22\\x27]?)((?!\\3)*|(?:\\\\?.)*?)(?:\\3|$)", CA = "\\[(?:\\*\\|)?" + c + "?(" + R + "(?::" + R + ")?)" + c + "?(?:(" + t.operators + ")" + c + "?(?:" + m + "))?" + // attribute case sensitivity
    c + "?(i)?" + c + "?(?:\\]|$)", AA = CA.replace(m, r), v = "(?:\\x28" + c + "*(?:" + a + "?)?|(?:\\*|\\|)|(?:(?::" + D + "(?:\\x28" + a + "?(?:\\x29|$))?|)|(?:[.#]?" + R + ")|(?:" + CA + "))+|(?:" + c + "?," + c + "?)|(?:" + c + "?)|(?:\\x29|$))*", z = "(?=" + c + "?[^>+~(){}<>])(?:(?:\\*|\\|)|(?:[.#]?" + R + ")+|(?:" + CA + ")+|(?:::?" + D + v + ")|(?:" + c + "?" + t.combinators + c + "?)|(?:" + c + "?," + c + "?)|(?:" + c + "?))+";
    X = RegExp(
      "(?:([.:#*]?)(" + R + ")(?::[-\\w]+|\\[[^\\]]+(?:\\]|$)|\\x28[^\\x29]+(?:\\x29|$))*)$"
    ), S = RegExp(z, "g"), F.id = RegExp("^#(" + R + ")(.*)"), F.tagName = RegExp("^(" + R + ")(.*)"), F.className = RegExp("^\\.(" + R + ")(.*)"), F.attribute = RegExp("^(?:" + AA + ")(.*)");
  }, cQ = '"use strict";return function Resolver(c,f,x,r)', OA = "var e,n,o,j=r.length-1,k=-1", jA = "var e,n,o", PQ = "main:while((e=c[++k]))", _Q = "main:while((e=c.item(++k)))", $Q = "e=c;", WB = "r[++j]=c[k];", EA = "r[++j]=c.item(k);", OQ = "", qA = "continue main;", oQ = "r=true;", AB = "if(f(c[k])){break main;}", VB = "if(f(c.item(k))){break main;}", rB = "f(c);", JQ = [], lQ = [], gQ = function(R, D, a) {
    var N, k = "", m = "", r = "", CA = "", AA = "";
    switch (D) {
      case !0:
        if (O[R])
          return O[R];
        r = WB + (a ? AB : "") + qA, k = OA, m = PQ;
        break;
      case !1:
        if (K[R])
          return K[R];
        r = OQ + (a ? rB : "") + oQ, k = jA, m = $Q;
        break;
      case null:
        if (O[R])
          return O[R];
        r = EA + (a ? VB : "") + qA, k = OA, m = _Q;
        break;
    }
    return CA = iB(R, r, D, a), m += D || D === null ? "{" + CA + "}" : CA, (D || D === null && R.includes(":nth")) && (m += P.test(R) ? "s.nthElement(null, 2);" : "", m += DA.test(R) ? "s.nthOfType(null, 2);" : ""), (JQ[0] || lQ[0]) && (AA = "," + (JQ.join(",") || lQ.join(",")), JQ.length = 0, lQ.length = 0), N = Function("s", cQ + "{" + k + AA + ";" + m + "return r;}")(IA), D || D === null ? O[R] = N : K[R] = N;
  }, iB = function(R, D, a, N, k) {
    var m, r, CA, AA, v, z, V = "", f = "!", uA, YA, Z, BB, XB, xQ, xA, HQ, iA = R, PA, jQ;
    for (PA = a ? W : M, iA = iA.replace(d.combinator, "$1"); iA; ) {
      switch (xQ = d.apimethods.test(iA) ? "|" : iA[0], xQ) {
        // universal resolver
        case "*":
          Z = iA.match(F.universal);
          break;
        // id resolver
        case "#":
          Z = iA.match(F.id), D = "if(" + V + "(/^" + Z[1] + '$/.test(e.getAttribute("id")))){' + D + "}";
          break;
        // class name resolver
        case ".":
          Z = iA.match(F.className), uA = (q ? "i" : "") + '.test(e.getAttribute("class"))', D = "if(" + V + "(/(^|\\s)" + Z[1] + "(\\s|$)/" + uA + ")){" + D + "}";
          break;
        // tag name resolver
        case (/[_a-z]/i.test(xQ) ? xQ : void 0):
          Z = iA.match(F.tagName), D = "if(" + V + "(e.localName" + (b.MIXEDCASE || nA(E) ? '=="' + Z[1].toLowerCase() + '"' : '=="' + Z[1].toUpperCase() + '"') + ")){" + D + "}";
          break;
        // namespace resolver
        case "|":
          Z = iA.match(F.namespace), Z[1] == "*" ? D = "if(" + V + "true){" + D + "}" : Z[1] ? typeof Z[1] == "string" && g.prefix == Z[1] ? D = "if(" + V + '(e.namespaceURI=="' + u + '")){' + D + "}" : BA("'" + PA + "'" + j) : D = "if(" + V + "(!e.namespaceURI)){" + D + "}";
          break;
        // attributes resolver
        case "[":
          if (Z = iA.match(F.attribute), z = Z[0].match(d.namespaces), v = Z[1], YA = v.split(":"), YA = YA.length == 2 ? YA[1] : YA[0], Z[2] && !(xA = rA[Z[2]]))
            return BA("'" + PA + "'" + j), "";
          if (Z[4] === "")
            xA = Z[2] == "~=" ? { p1: "^\\s", p2: "+$", p3: "true" } : Z[2] in wA && Z[2] != "~=" ? { p1: "^", p2: "$", p3: "true" } : xA;
          else if (Z[2] == "~=" && Z[4].includes(" ")) {
            D = "if(" + V + "false){" + D + "}";
            break;
          } else Z[4] && (Z[4] = eA(Z[4]).replace(s.RegExpChar, "\\$&"));
          HQ = Z[5] == "i" || FA && LA[YA.toLowerCase()] ? "i" : "", D = "if(" + V + "(" + (Z[2] ? !Z[4] && wA[Z[2]] && Z[2] != "~=" ? 'e.getAttribute&&e.getAttribute("' + v + '")==""' : "(/" + xA.p1 + Z[4] + xA.p2 + "/" + HQ + ').test(e.getAttribute&&e.getAttribute("' + v + '"))==' + xA.p3 : z ? 's.hasAttributeNS(e,"' + v + '")' : 'e.hasAttribute&&e.hasAttribute("' + v + '")') + ")){" + D + "}";
          break;
        // *** General sibling combinator
        // E ~ F (F relative sibling of E)
        case "~":
          Z = iA.match(F.relative), D = "n=e;while((e=e.previousElementSibling)){" + D + "}e=n;";
          break;
        // *** Adjacent sibling combinator
        // E + F (F adiacent sibling of E)
        case "+":
          Z = iA.match(F.adjacent), D = "n=e;if((e=e.previousElementSibling)){" + D + "}e=n;";
          break;
        // *** Descendant combinator
        // E F (E ancestor of F)
        case "	":
        case " ":
          Z = iA.match(F.ancestor), D = "n=e;while((e=e.parentElement)){" + D + "}e=n;";
          break;
        // *** Child combinator
        // E > F (F children of E)
        case ">":
          Z = iA.match(F.children), D = "n=e;if((e=e.parentElement)){" + D + "}e=n;";
          break;
        // *** user supplied combinators extensions
        case (xQ in XA ? xQ : void 0):
          Z[Z.length - 1] = "*", D = XA[xQ](Z) + D;
          break;
        // *** tree-structural pseudo-classes
        // :root, :empty, :first-child, :last-child, :only-child, :first-of-type, :last-of-type, :only-of-type
        case ":":
          if (Z = iA.match(F.structural))
            switch (Z[1] = Z[1].toLowerCase(), Z[1]) {
              case "root":
                D = "if(" + V + "(e===s.root)){" + D + (a ? "break main;" : "") + "}";
                break;
              case "empty":
                D = "n=e.firstChild;while(n&&!(/1|3/).test(n.nodeType)){n=n.nextSibling}if(" + f + "n){" + D + "}";
                break;
              // *** child-indexed pseudo-classes
              // :first-child, :last-child, :only-child
              case "only-child":
                D = "if(" + V + "(!e.nextElementSibling&&!e.previousElementSibling)){" + D + "}";
                break;
              case "last-child":
                D = "if(" + V + "(!e.nextElementSibling)){" + D + "}";
                break;
              case "first-child":
                D = "if(" + V + "(!e.previousElementSibling)){" + D + "}";
                break;
              // *** typed child-indexed pseudo-classes
              // :only-of-type, :last-of-type, :first-of-type
              case "only-of-type":
                D = "o=e.localName;n=e;while((n=n.nextElementSibling)&&n.localName!=o);if(!n){n=e;while((n=n.previousElementSibling)&&n.localName!=o);}if(" + f + "n){" + D + "}";
                break;
              case "last-of-type":
                D = "n=e;o=e.localName;while((n=n.nextElementSibling)&&n.localName!=o);if(" + f + "n){" + D + "}";
                break;
              case "first-of-type":
                D = "n=e;o=e.localName;while((n=n.previousElementSibling)&&n.localName!=o);if(" + f + "n){" + D + "}";
                break;
              default:
                BA("'" + PA + "'" + j);
                break;
            }
          else if (Z = iA.match(F.treestruct))
            switch (Z[1] = Z[1].toLowerCase(), Z[1]) {
              case "nth-child":
              case "nth-of-type":
              case "nth-last-child":
              case "nth-last-of-type":
                if (YA = /-of-type/i.test(Z[1]), Z[1] && Z[2]) {
                  if (HQ = /last/i.test(Z[1]), Z[2] == "n") {
                    D = "if(" + V + "true){" + D + "}";
                    break;
                  } else if (Z[2] == "1") {
                    xA = HQ ? "next" : "previous", D = YA ? "n=e;o=e.localName;while((n=n." + xA + "ElementSibling)&&n.localName!=o);if(" + f + "n){" + D + "}" : "if(" + V + "!e." + xA + "ElementSibling){" + D + "}";
                    break;
                  } else Z[2] == "even" || Z[2] == "2n0" || Z[2] == "2n+0" || Z[2] == "2n" ? xA = "n%2==0" : Z[2] == "odd" || Z[2] == "2n1" || Z[2] == "2n+1" ? xA = "n%2==1" : (AA = /n/i.test(Z[2]), CA = Z[2].split("n"), m = parseInt(CA[0], 10) || 0, r = parseInt(CA[1], 10) || 0, CA[0] == "-" && (m = -1), CA[0] == "+" && (m = 1), xA = (r ? "(n" + (r > 0 ? "-" : "+") + Math.abs(r) + ")" : "n") + "%" + m + "==0", xA = m >= 1 ? AA ? "n>" + (r - 1) + (Math.abs(m) != 1 ? "&&" + xA : "") : "n==" + m : m <= -1 ? AA ? "n<" + (r + 1) + (Math.abs(m) != 1 ? "&&" + xA : "") : "n==" + m : m === 0 ? CA[0] ? "n==" + r : "n>" + (r - 1) : "false");
                  YA = YA ? "OfType" : "Element", HQ = HQ ? "true" : "false", D = "n=s.nth" + YA + "(e," + HQ + ");if(" + V + "(" + xA + ")){" + D + "}";
                } else
                  BA("'" + PA + "'" + j);
                break;
              default:
                BA("'" + PA + "'" + j);
                break;
            }
          else if (Z = iA.match(F.logicalsel))
            switch (Z[1] = Z[1].toLowerCase(), Z[1]) {
              case "is":
              case "where":
              case "matches":
                YA = Z[2].replace(s.CommaGroup, ",").replace(s.TrimSpaces, ""), D = 'if(s.match("' + YA.replace(/\x22/g, '\\"') + '",e)){' + D + "}";
                break;
              case "not":
                YA = Z[2].replace(s.CommaGroup, ",").replace(s.TrimSpaces, ""), D = 'if(!s.match("' + YA.replace(/\x22/g, '\\"') + '",e)){' + D + "}";
                break;
              default:
                BA("'" + PA + "'" + j);
                break;
            }
          else if (Z = iA.match(F.linguistic))
            switch (Z[1] = Z[1].toLowerCase(), Z[1]) {
              case "dir":
                D = "var p;if(" + V + "((/" + Z[2] + '/i.test(e.dir))||(p=s.ancestor("[dir]", e))&&(/' + Z[2] + '/i.test(p.dir))||(e.dir==""||e.dir=="auto")&&(' + (Z[2] == "ltr" ? "!" : "") + J + ".test(e.textContent)))){" + D + "};";
                break;
              case "lang":
                YA = "(?:^|-)" + Z[2] + "(?:-|$)", D = "var p;if(" + V + '((e.isConnected&&(e.lang==""&&(p=s.ancestor("[lang]",e)))&&(p.lang=="' + Z[2] + '")||/' + YA + "/i.test(e.lang)))){" + D + "};";
                break;
              default:
                BA("'" + PA + "'" + j);
                break;
            }
          else if (Z = iA.match(F.locationpc))
            switch (Z[1] = Z[1].toLowerCase(), Z[1]) {
              case "any-link":
                D = "if(" + V + '(/^a|area$/i.test(e.localName)&&e.hasAttribute("href")||e.visited)){' + D + "}";
                break;
              case "link":
                D = "if(" + V + '(/^a|area$/i.test(e.localName)&&e.hasAttribute("href"))){' + D + "}";
                break;
              case "visited":
                D = "if(" + V + '(/^a|area$/i.test(e.localName)&&e.hasAttribute("href")&&e.visited)){' + D + "}";
                break;
              case "target":
                D = "if(" + V + "((s.doc.compareDocumentPosition(e)&16)&&s.doc.location.hash&&e.id==s.doc.location.hash.slice(1))){" + D + "}";
                break;
              default:
                BA("'" + PA + "'" + j);
                break;
            }
          else if (Z = iA.match(F.useraction))
            switch (Z[1] = Z[1].toLowerCase(), Z[1]) {
              case "hover":
                D = "hasFocus" in E && E.hasFocus() ? "if(" + V + "(e===s.doc.hoverElement)){" + D + "}" : "if(" + f + "true){" + D + "}";
                break;
              case "active":
                D = "hasFocus" in E && E.hasFocus() ? "if(" + V + "(e===s.doc.activeElement)){" + D + "}" : "if(" + f + "true){" + D + "}";
                break;
              case "focus":
                D = "hasFocus" in E ? "if(" + V + '(e===s.doc.activeElement&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex=="number"))){' + D + "}" : "if(" + V + "(e===s.doc.activeElement&&(e.type||e.href))){" + D + "}";
                break;
              case "focus-within":
                D = "hasFocus" in E ? "n=s.doc.activeElement;while(e){if(e===n||e.parentNode===n)break;}if(" + V + '(e===n&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex=="number"))){' + D + "}" : D;
                break;
              default:
                BA("'" + PA + "'" + j);
                break;
            }
          else if (Z = iA.match(F.inputstate))
            switch (Z[1] = Z[1].toLowerCase(), Z[1]) {
              case "enabled":
                D = "if(" + V + '(("form" in e||/^optgroup$/i.test(e.localName))&&"disabled" in e &&e.disabled===false)){' + D + "}";
                break;
              case "disabled":
                D = "if(" + V + '(("form" in e||/^optgroup$/i.test(e.localName))&&"disabled" in e&&(e.disabled===true||(n=s.ancestor("fieldset",e))&&(n=s.first("legend",n))&&!n.contains(e)))){' + D + "}";
                break;
              case "read-only":
                D = "if(" + V + '((/^textarea$/i.test(e.localName)&&(e.readOnly||e.disabled))||("|password|text|".includes("|"+e.type+"|")&&e.readOnly))){' + D + "}";
                break;
              case "read-write":
                D = "if(" + V + '(((/^textarea$/i.test(e.localName)&&!e.readOnly&&!e.disabled)||("|password|text|".includes("|"+e.type+"|")&&!e.readOnly&&!e.disabled))||(e.hasAttribute("contenteditable")||(s.doc.designMode=="on")))){' + D + "}";
                break;
              case "placeholder-shown":
                D = "if(" + V + '((/^input|textarea$/i.test(e.localName))&&e.hasAttribute("placeholder")&&("|textarea|password|number|search|email|text|tel|url|".includes("|"+e.type+"|"))&&(!s.match(":focus",e)))){' + D + "}";
                break;
              case "default":
                D = "if(" + V + '("form" in e && e.form)){var x=0;n=[];if(e.type=="image")n=e.form.getElementsByTagName("input");if(e.type=="submit")n=e.form.elements;while(n[x]&&e!==n[x]){if(n[x].type=="image")break;if(n[x].type=="submit")break;x++;}}if(' + V + '(e.form&&(e===n[x]&&"|image|submit|".includes("|"+e.type+"|"))||((/^option$/i.test(e.localName))&&e.defaultSelected)||(("|radio|checkbox|".includes("|"+e.type+"|"))&&e.defaultChecked))){' + D + "}";
                break;
              default:
                BA("'" + PA + "'" + j);
                break;
            }
          else if (Z = iA.match(F.inputvalue))
            switch (Z[1] = Z[1].toLowerCase(), Z[1]) {
              case "checked":
                D = "if(" + V + '(/^input$/i.test(e.localName)&&("|radio|checkbox|".includes("|"+e.type+"|")&&e.checked)||(/^option$/i.test(e.localName)&&(e.selected||e.checked)))){' + D + "}";
                break;
              case "indeterminate":
                D = "if(" + V + '(/^progress$/i.test(e.localName)&&!e.hasAttribute("value"))||(/^input$/i.test(e.localName)&&("checkbox"==e.type&&e.indeterminate)||("radio"==e.type&&e.name&&!s.first("input[name="+e.name+"]:checked",e.form)))){' + D + "}";
                break;
              case "required":
                D = "if(" + V + "(/^input|select|textarea$/i.test(e.localName)&&e.required)){" + D + "}";
                break;
              case "optional":
                D = "if(" + V + "(/^input|select|textarea$/i.test(e.localName)&&!e.required)){" + D + "}";
                break;
              case "invalid":
                D = "if(" + V + '(((/^form$/i.test(e.localName)&&!e.noValidate)||(e.willValidate&&!e.formNoValidate))&&!e.checkValidity())||(/^fieldset$/i.test(e.localName)&&s.first(":invalid",e))){' + D + "}";
                break;
              case "valid":
                D = "if(" + V + '(((/^form$/i.test(e.localName)&&!e.noValidate)||(e.willValidate&&!e.formNoValidate))&&e.checkValidity())||(/^fieldset$/i.test(e.localName)&&s.first(":valid",e))){' + D + "}";
                break;
              case "in-range":
                D = "if(" + V + '(/^input$/i.test(e.localName))&&(e.willValidate&&!e.formNoValidate)&&(!e.validity.rangeUnderflow&&!e.validity.rangeOverflow)&&("|date|datetime-local|month|number|range|time|week|".includes("|"+e.type+"|"))&&("range"==e.type||e.getAttribute("min")||e.getAttribute("max"))){' + D + "}";
                break;
              case "out-of-range":
                D = "if(" + V + '(/^input$/i.test(e.localName))&&(e.willValidate&&!e.formNoValidate)&&(e.validity.rangeUnderflow||e.validity.rangeOverflow)&&("|date|datetime-local|month|number|range|time|week|".includes("|"+e.type+"|"))&&("range"==e.type||e.getAttribute("min")||e.getAttribute("max"))){' + D + "}";
                break;
              default:
                BA("'" + PA + "'" + j);
                break;
            }
          else if (Z = iA.match(F.pseudo_sng))
            D = 'if(e.element&&e.type.toLowerCase()==":' + Z[0].toLowerCase() + '"){e=e.element;' + D + "}";
          else if (Z = iA.match(F.pseudo_dbl))
            D = 'if(e.element&&e.type.toLowerCase()=="' + Z[0].toLowerCase() + '"){e=e.element;' + D + "}";
          else {
            YA = !1, XB = !1;
            for (YA in sA)
              if ((Z = iA.match(sA[YA].Expression)) && (BB = sA[YA].Callback(Z, D, a, N), "match" in BB && (Z = BB.match), jQ = BB.modvar, a ? jQ && JQ.indexOf(jQ) < 0 && (JQ[JQ.length] = jQ) : jQ && lQ.indexOf(jQ) < 0 && (lQ[lQ.length] = jQ), D = BB.source, XB = BB.status, XB))
                break;
            if (!XB)
              return BA("unknown pseudo-class selector '" + iA + "'"), "";
            if (!YA)
              return BA("unknown token in selector '" + iA + "'"), "";
          }
          break;
        default:
          BA("'" + PA + "'" + j);
          break;
      }
      if (!Z)
        return BA("'" + PA + "'" + j), "";
      iA = Z.pop();
    }
    return D;
  }, QB = function(R, D) {
    return R.replace(
      /:scope/ig,
      D.localName + (D.id ? "#" + D.id : "") + (D.className ? "." + D.classList[0] : "")
    );
  }, iQ = function(D, a, N) {
    for (/:scope/i.test(D) && (D = QB(D, a)); a && !ZQ(D, a, N); )
      a = a.parentElement;
    return a;
  }, uQ = function(R, D, a) {
    for (var N = 0, k = R.length, m = !1; k > N; ++N)
      R[N](D, a, null, !1) && (m = !0);
    return m;
  }, RB = function(R, D) {
    for (var a = 0, N = R.length, k = []; N > a; ++a)
      k[a] = gQ(R[a], !1, D);
    return { factory: k };
  }, ZQ = function(D, a, N) {
    var k, m;
    if (a && H[D])
      return uQ(H[D].factory, a, N);
    if (M = D, arguments.length === 0)
      return BA(p, TypeError), b.VERBOSITY ? void 0 : !1;
    if (arguments[0] === "")
      return BA("''" + j), b.VERBOSITY ? void 0 : !1;
    if (typeof D != "string" && (D = "" + D), /:scope/i.test(D) && (D = QB(D, a)), m = D.replace(/\x00|\\$/g, "�").replace(s.CombineWSP, " ").replace(s.PseudosWSP, "$1").replace(s.TabCharWSP, "	").replace(s.CommaGroup, ",").replace(s.TrimSpaces, ""), (k = m.match(S)) && k.join("") == m) {
      if (k = m.match(s.SplitGroup), m[m.length - 1] == ",")
        return BA(j), b.VERBOSITY ? void 0 : !1;
    } else
      return BA("'" + D + "'" + j), b.VERBOSITY ? void 0 : !1;
    return H[D] = RB(k, N), uQ(H[D].factory, a, N);
  }, RQ = function(D, a, N) {
    return arguments.length === 0 && BA(p, TypeError), hQ(
      D,
      a,
      typeof N == "function" ? function(m) {
        return N(m), !1;
      } : function() {
        return !1;
      }
    )[0] || null;
  }, hQ = function(D, a, N) {
    var k, m, r, CA;
    if (a || (a = E), D && (CA = _[D]) && CA.context === a && CA.callback === N) {
      var AA = CA.factory, v = CA.htmlset, z = CA.nodeset, m = [];
      if (z.length > 1) {
        for (var V = 0, f = z.length, uA; f > V; ++V)
          uA = MA[z[V][0]](a, z[V].slice(1))(), AA[V] !== null ? AA[V](uA, N, a, m) : m = m.concat(uA);
        f > 1 && m.length > 1 && (m.sort(dA), WA && (m = kA(m)));
      } else
        AA[0] ? m = AA[0](v[0](), N, a, m) : m = v[0]();
      return typeof N == "function" ? CQ(m, N) : m;
    }
    if (W = D, arguments.length === 0)
      return BA(p, TypeError), b.VERBOSITY ? void 0 : e;
    if (arguments[0] === "")
      return BA("''" + j), b.VERBOSITY ? void 0 : e;
    if (Y !== a && (Y = $(a)), typeof D != "string" && (D = "" + D), /:scope/i.test(D) && (D = QB(D, a)), r = D.replace(/\x00|\\$/g, "�").replace(s.CombineWSP, " ").replace(s.PseudosWSP, "$1").replace(s.TabCharWSP, "	").replace(s.CommaGroup, ",").replace(s.TrimSpaces, ""), (k = r.match(S)) && k.join("") == r) {
      if (k = r.match(s.SplitGroup), r[r.length - 1] == ",")
        return BA(j), b.VERBOSITY ? void 0 : !1;
    } else
      return BA("'" + D + "'" + j), b.VERBOSITY ? void 0 : !1;
    return _[D] = FE(k, a, N), m = _[D].results, typeof N == "function" ? CQ(m, N) : m;
  }, GB = function(R, D) {
    var a = D.index, N = D[1].length + D[2].length;
    return R.slice(0, a) + (" >+~".indexOf(R.charAt(a - 1)) > -1 && ":[".indexOf(R.charAt(a + N + 1)) > -1 ? "*" : "") + R.slice(a + N - (D[1] == "*" ? 1 : 0));
  }, FE = function(R, D, a) {
    var N, k, m = {}, r = ["", "*", "*"], CA = R, AA = [], v = [], z = [], V = [], f;
    for (N = 0, k = R.length; k > N; ++N)
      !m[R[N]] && (m[R[N]] = !0) && (f = R[N].match(X), f && f[1] != ":" && (r = f) ? (r[1] || (r[1] = "*"), CA[N] = GB(CA[N], r)) : r = ["", "*", "*"]), z[N] = r[1] + r[2], v[N] = MA[r[1]](D, r[2]), AA[N] = gQ(CA[N], !0, null), AA[N] ? AA[N](v[N](), a, D, V) : result.concat(v[N]());
    return k > 1 && (V.sort(dA), WA && (V = kA(V))), {
      callback: a,
      context: D,
      factory: AA,
      htmlset: v,
      nodeset: z,
      results: V
    };
  }, pB, C, o, G, n = function(R) {
    pB = Element.prototype.closest, C = Element.prototype.matches, o = Document.prototype.querySelector, G = Document.prototype.querySelectorAll, Element.prototype.closest = function() {
      var a = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
      return "nodeType" in this || BA("'closest' called on an object that does not implement interface " + a + ".", TypeError), arguments.length < 1 ? iQ.apply(this, []) : arguments.length < 2 ? iQ.apply(this, [arguments[0], this]) : iQ.apply(this, [arguments[0], this, typeof arguments[1] == "function" ? arguments[1] : void 0]);
    }, Element.prototype.matches = function() {
      var a = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
      return "nodeType" in this || BA("'matches' called on an object that does not implement interface " + a + ".", TypeError), arguments.length < 1 ? ZQ.apply(this, []) : arguments.length < 2 ? ZQ.apply(this, [arguments[0], this]) : ZQ.apply(this, [arguments[0], this, typeof arguments[1] == "function" ? arguments[1] : void 0]);
    }, Element.prototype.querySelector = Document.prototype.querySelector = DocumentFragment.prototype.querySelector = function() {
      var a = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
      return "nodeType" in this || BA("'querySelector' called on an object that does not implement interface " + a + ".", TypeError), arguments.length < 1 ? RQ.apply(this, []) : arguments.length < 2 ? RQ.apply(this, [arguments[0], this]) : RQ.apply(this, [arguments[0], this, typeof arguments[1] == "function" ? arguments[1] : void 0]);
    }, Element.prototype.querySelectorAll = Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = function() {
      var a = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
      return "nodeType" in this || BA("'querySelectorAll' called on an object that does not implement interface " + a + ".", TypeError), arguments.length < 1 ? hQ.apply(this, []) : arguments.length < 2 ? hQ.apply(this, [arguments[0], this]) : hQ.apply(this, [arguments[0], this, typeof arguments[1] == "function" ? arguments[1] : void 0]);
    }, R && document.addEventListener("load", function(D) {
      var a, N, k, m, r = D.target;
      /iframe/i.test(r.localName) && (a = "(" + A + ")(this, " + Tg + ");", N = r.contentDocument, m = N.createElement("script"), m.textContent = a + "NW.Dom.install()", k = N.documentElement, k.removeChild(k.insertBefore(m, k.firstChild)));
    }, !0);
  }, h = function() {
    Element.prototype.closest = pB, Element.prototype.matches = C, Element.prototype.querySelector = Document.prototype.querySelector = DocumentFragment.prototype.querySelector = o, Element.prototype.querySelectorAll = Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = G;
  }, e = Array(), Y, M, W, K = {}, O = {}, H = {}, _ = {}, IA = {
    doc: E,
    from: E,
    root: g,
    byTag: HA,
    first: RQ,
    match: ZQ,
    ancestor: iQ,
    nthOfType: zA,
    nthElement: yA,
    hasAttributeNS: TA
  }, L = {
    // exported cache objects
    lastMatched: M,
    lastSelected: W,
    matchLambdas: K,
    selectLambdas: O,
    matchResolvers: H,
    selectResolvers: _,
    // exported compiler macros
    CFG: t,
    M_BODY: OQ,
    S_BODY: WB,
    M_TEST: rB,
    S_TEST: AB,
    // exported engine methods
    byId: vA,
    byTag: HA,
    byClass: DQ,
    match: ZQ,
    first: RQ,
    select: hQ,
    closest: iQ,
    compile: gQ,
    configure: XQ,
    emit: BA,
    Config: b,
    Snapshot: IA,
    Version: Q,
    install: n,
    uninstall: h,
    Operators: rA,
    Selectors: sA,
    // register a new selector combinator symbol and its related function resolver
    registerCombinator: function(R, D) {
      for (var a = 0, N = R.length, k; N > a; ++a)
        if (R[a] != "=") {
          k = R[a];
          break;
        }
      t.combinators.indexOf(k) < 0 ? (t.combinators = t.combinators.replace("](", k + "]("), t.combinators = t.combinators.replace("])", k + "])"), XA[R] = D, YQ()) : console.warn("Warning: the '" + R + "' combinator is already registered.");
    },
    // register a new attribute operator symbol and its related function resolver
    registerOperator: function(R, D) {
      for (var a = 0, N = R.length, k; N > a; ++a)
        if (R[a] != "=") {
          k = R[a];
          break;
        }
      t.operators.indexOf(k) < 0 && !rA[R] ? (t.operators = t.operators.replace("]=", k + "]="), rA[R] = D, YQ()) : console.warn("Warning: the '" + R + "' operator is already registered.");
    },
    // register a new selector symbol and its related function resolver
    registerSelector: function(R, D, a) {
      sA[R] || (sA[R] = {
        Expression: D,
        Callback: a
      });
    }
  };
  return NQ(E), L;
}
const QC = AC;
/*!
 * Sizzle CSS Selector Engine v2.3.7-pre
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2022-04-02
 *
 * git commit hash for Deno DOM: ede0e97563c8473b8cfa4045c7c2cd6129ecc1aa
 */
const BC = (B) => {
  const A = {
    document: B
  };
  EC(A);
  const { Sizzle: Q } = A;
  return {
    first(E, g) {
      return Q(E, g)[0] ?? null;
    },
    select(E, g) {
      return Q(E, g);
    },
    match(E, g) {
      return Q.matchesSelector(g, E);
    }
  };
};
function EC(B) {
  var A, Q, E, g, I, c, t, w, s, d, y, F, J, p, j, P, DA, X, S, b = "sizzle" + 1 * /* @__PURE__ */ new Date(), u = B.document, q = 0, FA = 0, wA = OQ(), LA = OQ(), XA = OQ(), sA = OQ(), rA = function(C, o) {
    return C === o && (y = !0), 0;
  }, CQ = {}.hasOwnProperty, fA = [], dA = fA.pop, WA = fA.push, kA = fA.push, nA = fA.slice, $ = function(C, o) {
    for (var G = 0, n = C.length; G < n; G++)
      if (C[G] === o)
        return G;
    return -1;
  }, NA = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", T = "[\\x20\\t\\r\\n\\f]", eA = "(?:\\\\[\\da-fA-F]{1,6}" + T + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", hA = "\\[" + T + "*(" + eA + ")(?:" + T + // Operator (capture 2)
  "*([*^$|!~]?=)" + T + // "Attribute values must be CSS identifiers [capture 5]
  // or strings [capture 3 or capture 4]"
  `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + eA + "))|)" + T + "*\\]", aA = ":(" + eA + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + hA + ")*)|.*)\\)|)", MA = new RegExp(T + "+", "g"), pA = new RegExp(
    "^" + T + "+|((?:^|[^\\\\])(?:\\\\.)*)" + T + "+$",
    "g"
  ), vA = new RegExp("^" + T + "*," + T + "*"), HA = new RegExp(
    "^" + T + "*([>+~]|" + T + ")" + T + "*"
  ), DQ = new RegExp(T + "|>"), TA = new RegExp(aA), yA = new RegExp("^" + eA + "$"), zA = {
    ID: new RegExp("^#(" + eA + ")"),
    CLASS: new RegExp("^\\.(" + eA + ")"),
    TAG: new RegExp("^(" + eA + "|[*])"),
    ATTR: new RegExp("^" + hA),
    PSEUDO: new RegExp("^" + aA),
    CHILD: new RegExp(
      "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + T + "*(even|odd|(([+-]|)(\\d*)n|)" + T + "*(?:([+-]|)" + T + "*(\\d+)|))" + T + "*\\)|)",
      "i"
    ),
    bool: new RegExp("^(?:" + NA + ")$", "i"),
    // For use in libraries implementing .is()
    // We use this for POS matching in `select`
    needsContext: new RegExp(
      "^" + T + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + T + "*((?:-\\d)?\\d*)" + T + "*\\)|)(?=[^-]|$)",
      "i"
    )
  }, oB = /HTML$/i, XQ = /^(?:input|select|textarea|button)$/i, BA = /^h\d$/i, NQ = /^[^{]+\{\s*\[native \w/, YQ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, cQ = /[+~]/, OA = new RegExp(
    "\\\\[\\da-fA-F]{1,6}" + T + "?|\\\\([^\\r\\n\\f])",
    "g"
  ), jA = function(C, o) {
    var G = "0x" + C.slice(1) - 65536;
    return o || // Replace a hexadecimal escape sequence with the encoded Unicode code point
    // Support: IE <=11+
    // For values outside the Basic Multilingual Plane (BMP), manually construct a
    // surrogate pair
    (G < 0 ? String.fromCharCode(G + 65536) : String.fromCharCode(G >> 10 | 55296, G & 1023 | 56320));
  }, PQ = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, _Q = function(C, o) {
    return o ? C === "\0" ? "�" : C.slice(0, -1) + "\\" + C.charCodeAt(C.length - 1).toString(16) + " " : "\\" + C;
  }, $Q = function() {
    F();
  }, WB = uQ(
    function(C) {
      return C.disabled === !0 && C.nodeName.toLowerCase() === "fieldset";
    },
    { dir: "parentNode", next: "legend" }
  );
  try {
    kA.apply(
      fA = nA.call(u.childNodes),
      u.childNodes
    ), fA[u.childNodes.length].nodeType;
  } catch {
    kA = {
      apply: fA.length ? (
        // Leverage slice if possible
        function(o, G) {
          WA.apply(o, nA.call(G));
        }
      ) : (
        // Support: IE<9
        // Otherwise append directly
        function(o, G) {
          for (var n = o.length, h = 0; o[n++] = G[h++]; )
            ;
          o.length = n - 1;
        }
      )
    };
  }
  function EA(C, o, G, n) {
    var h, e, Y, M, W, K, O, H = o && o.ownerDocument, _ = o ? o.nodeType : 9;
    if (G = G || [], typeof C != "string" || !C || _ !== 1 && _ !== 9 && _ !== 11)
      return G;
    if (!n && (F(o), o = o || J, j)) {
      if (_ !== 11 && (W = YQ.exec(C)))
        if (h = W[1]) {
          if (_ === 9)
            if (Y = o.getElementById(h)) {
              if (Y.id === h)
                return G.push(Y), G;
            } else
              return G;
          else if (H && (Y = H.getElementById(h)) && S(o, Y) && Y.id === h)
            return G.push(Y), G;
        } else {
          if (W[2])
            return kA.apply(G, o.getElementsByTagName(C)), G;
          if ((h = W[3]) && Q.getElementsByClassName && o.getElementsByClassName)
            return kA.apply(G, o.getElementsByClassName(h)), G;
        }
      if (Q.qsa && !sA[C + " "] && (!P || !P.test(C)) && // Support: IE 8 only
      // Exclude object elements
      (_ !== 1 || o.nodeName.toLowerCase() !== "object")) {
        if (O = C, H = o, _ === 1 && (DQ.test(C) || HA.test(C))) {
          for (H = cQ.test(C) && iB(o.parentNode) || o, (H !== o || !Q.scope) && ((M = o.getAttribute("id")) ? M = M.replace(PQ, _Q) : o.setAttribute("id", M = b)), K = c(C), e = K.length; e--; )
            K[e] = (M ? "#" + M : ":scope") + " " + iQ(K[e]);
          O = K.join(",");
        }
        try {
          return kA.apply(G, H.querySelectorAll(O)), G;
        } catch {
          sA(C, !0);
        } finally {
          M === b && o.removeAttribute("id");
        }
      }
    }
    return w(C.replace(pA, "$1"), o, G, n);
  }
  function OQ() {
    var C = [];
    function o(G, n) {
      return C.push(G + " ") > E.cacheLength && delete o[C.shift()], o[G + " "] = n;
    }
    return o;
  }
  function qA(C) {
    return C[b] = !0, C;
  }
  function oQ(C) {
    return !0;
  }
  function AB(C, o) {
    for (var G = C.split("|"), n = G.length; n--; )
      E.attrHandle[G[n]] = o;
  }
  function VB(C, o) {
    var G = o && C, n = G && C.nodeType === 1 && o.nodeType === 1 && C.sourceIndex - o.sourceIndex;
    if (n)
      return n;
    if (G) {
      for (; G = G.nextSibling; )
        if (G === o)
          return -1;
    }
    return C ? 1 : -1;
  }
  function rB(C) {
    return function(o) {
      var G = o.nodeName.toLowerCase();
      return G === "input" && o.type === C;
    };
  }
  function JQ(C) {
    return function(o) {
      var G = o.nodeName.toLowerCase();
      return (G === "input" || G === "button") && o.type === C;
    };
  }
  function lQ(C) {
    return function(o) {
      return "form" in o ? o.parentNode && o.disabled === !1 ? "label" in o ? "label" in o.parentNode ? o.parentNode.disabled === C : o.disabled === C : o.isDisabled === C || // Where there is no isDisabled, check manually
      /* jshint -W018 */
      o.isDisabled !== !C && WB(o) === C : o.disabled === C : "label" in o ? o.disabled === C : !1;
    };
  }
  function gQ(C) {
    return qA(function(o) {
      return o = +o, qA(function(G, n) {
        for (var h, e = C([], G.length, o), Y = e.length; Y--; )
          G[h = e[Y]] && (G[h] = !(n[h] = G[h]));
      });
    });
  }
  function iB(C) {
    return C && typeof C.getElementsByTagName < "u" && C;
  }
  Q = EA.support = {}, I = EA.isXML = function(C) {
    var o = C && C.namespaceURI, G = C && (C.ownerDocument || C).documentElement;
    return !oB.test(o || G && G.nodeName || "HTML");
  }, F = EA.setDocument = function(C) {
    var o, G, n = C ? C.ownerDocument || C : u;
    return n == J || n.nodeType !== 9 || !n.documentElement || (J = n, p = J.documentElement, j = !I(J), u != J && (G = J.defaultView) && G.top !== G && (G.addEventListener ? G.addEventListener("unload", $Q, !1) : G.attachEvent && G.attachEvent("onunload", $Q)), Q.scope = oQ(), Q.attributes = oQ(), Q.getElementsByTagName = oQ(), Q.getElementsByClassName = NQ.test(
      J.getElementsByClassName
    ), Q.getById = oQ(), Q.getById ? (E.filter.ID = function(h) {
      var e = h.replace(OA, jA);
      return function(Y) {
        return Y.getAttribute("id") === e;
      };
    }, E.find.ID = function(h, e) {
      if (typeof e.getElementById < "u" && j) {
        var Y = e.getElementById(h);
        return Y ? [Y] : [];
      }
    }) : (E.filter.ID = function(h) {
      var e = h.replace(OA, jA);
      return function(Y) {
        var M = typeof Y.getAttributeNode < "u" && Y.getAttributeNode("id");
        return M && M.value === e;
      };
    }, E.find.ID = function(h, e) {
      if (typeof e.getElementById < "u" && j) {
        var Y, M, W, K = e.getElementById(h);
        if (K) {
          if (Y = K.getAttributeNode("id"), Y && Y.value === h)
            return [K];
          for (W = e.getElementsByName(h), M = 0; K = W[M++]; )
            if (Y = K.getAttributeNode("id"), Y && Y.value === h)
              return [K];
        }
        return [];
      }
    }), E.find.TAG = Q.getElementsByTagName ? function(h, e) {
      if (typeof e.getElementsByTagName < "u")
        return e.getElementsByTagName(h);
      if (e[VE])
        return e[VE](h);
      if (Q.qsa)
        return e.querySelectorAll(h);
    } : function(h, e) {
      var Y, M = [], W = 0, K = e.getElementsByTagName(h);
      if (h === "*") {
        for (; Y = K[W++]; )
          Y.nodeType === 1 && M.push(Y);
        return M;
      }
      return K;
    }, E.find.CLASS = Q.getElementsByClassName && function(h, e) {
      if (typeof e.getElementsByClassName < "u" && j)
        return e.getElementsByClassName(h);
      if (e[rE])
        return e[rE](h);
    }, DA = [], P = [], Q.qsa = NQ.test(J.querySelectorAll), Q.matchesSelector = NQ.test(
      X = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.oMatchesSelector || p.msMatchesSelector
    ), P = P.length && new RegExp(P.join("|")), DA = DA.length && new RegExp(DA.join("|")), o = NQ.test(p.compareDocumentPosition), S = o || NQ.test(p.contains) ? function(h, e) {
      var Y = h.nodeType === 9 ? h.documentElement : h, M = e && e.parentNode;
      return h === M || !!(M && M.nodeType === 1 && (Y.contains ? Y.contains(M) : h.compareDocumentPosition && h.compareDocumentPosition(M) & 16));
    } : function(h, e) {
      if (e) {
        for (; e = e.parentNode; )
          if (e === h)
            return !0;
      }
      return !1;
    }, rA = o ? function(h, e) {
      if (h === e)
        return y = !0, 0;
      var Y = !h.compareDocumentPosition - !e.compareDocumentPosition;
      return Y || (Y = (h.ownerDocument || h) == (e.ownerDocument || e) ? h.compareDocumentPosition(e) : (
        // Otherwise we know they are disconnected
        1
      ), Y & 1 || !Q.sortDetached && e.compareDocumentPosition(h) === Y ? h == J || h.ownerDocument == u && S(u, h) ? -1 : e == J || e.ownerDocument == u && S(u, e) ? 1 : d ? $(d, h) - $(d, e) : 0 : Y & 4 ? -1 : 1);
    } : function(h, e) {
      if (h === e)
        return y = !0, 0;
      var Y, M = 0, W = h.parentNode, K = e.parentNode, O = [h], H = [e];
      if (!W || !K)
        return h == J ? -1 : e == J ? 1 : (
          /* eslint-enable eqeqeq */
          W ? -1 : K ? 1 : d ? $(d, h) - $(d, e) : 0
        );
      if (W === K)
        return VB(h, e);
      for (Y = h; Y = Y.parentNode; )
        O.unshift(Y);
      for (Y = e; Y = Y.parentNode; )
        H.unshift(Y);
      for (; O[M] === H[M]; )
        M++;
      return M ? (
        // Do a sibling check if the nodes have a common ancestor
        VB(O[M], H[M])
      ) : (
        // Otherwise nodes in our document sort first
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        /* eslint-disable eqeqeq */
        O[M] == u ? -1 : H[M] == u ? 1 : (
          /* eslint-enable eqeqeq */
          0
        )
      );
    }), J;
  }, EA.matches = function(C, o) {
    return EA(C, null, null, o);
  }, EA.matchesSelector = function(C, o) {
    if (F(C), Q.matchesSelector && j && !sA[o + " "] && (!DA || !DA.test(o)) && (!P || !P.test(o)))
      try {
        var G = X.call(C, o);
        if (G || Q.disconnectedMatch || // As well, disconnected nodes are said to be in a document
        // fragment in IE 9
        C.document && C.document.nodeType !== 11)
          return G;
      } catch {
        sA(o, !0);
      }
    return EA(o, J, null, [C]).length > 0;
  }, EA.contains = function(C, o) {
    return (C.ownerDocument || C) != J && F(C), S(C, o);
  }, EA.attr = function(C, o) {
    (C.ownerDocument || C) != J && F(C);
    var G = E.attrHandle[o.toLowerCase()], n = G && CQ.call(E.attrHandle, o.toLowerCase()) ? G(C, o, !j) : void 0;
    return n !== void 0 ? n : Q.attributes || !j ? C.getAttribute(o) : (n = C.getAttributeNode(o)) && n.specified ? n.value : null;
  }, EA.escape = function(C) {
    return (C + "").replace(PQ, _Q);
  }, EA.error = function(C) {
    throw new DOMException(`'${C}' is not a valid selector`);
  }, EA.uniqueSort = function(C) {
    var o, G = [], n = 0, h = 0;
    if (y = !Q.detectDuplicates, d = !Q.sortStable && C.slice(0), C.sort(rA), y) {
      for (; o = C[h++]; )
        o === C[h] && (n = G.push(h));
      for (; n--; )
        C.splice(G[n], 1);
    }
    return d = null, C;
  }, g = EA.getText = function(C) {
    var o, G = "", n = 0, h = C.nodeType;
    if (h) {
      if (h === 1 || h === 9 || h === 11) {
        if (typeof C.textContent == "string")
          return C.textContent;
        for (C = C.firstChild; C; C = C.nextSibling)
          G += g(C);
      } else if (h === 3 || h === 4)
        return C.nodeValue;
    } else for (; o = C[n++]; )
      G += g(o);
    return G;
  }, E = EA.selectors = {
    // Can be adjusted by the user
    cacheLength: 50,
    createPseudo: qA,
    match: zA,
    attrHandle: {},
    find: {},
    relative: {
      ">": { dir: "parentNode", first: !0 },
      " ": { dir: "parentNode" },
      "+": { dir: "previousSibling", first: !0 },
      "~": { dir: "previousSibling" }
    },
    preFilter: {
      ATTR: function(C) {
        return C[1] = C[1].replace(OA, jA), C[3] = (C[3] || C[4] || C[5] || "").replace(
          OA,
          jA
        ), C[2] === "~=" && (C[3] = " " + C[3] + " "), C.slice(0, 4);
      },
      CHILD: function(C) {
        return C[1] = C[1].toLowerCase(), C[1].slice(0, 3) === "nth" ? (C[3] || EA.error(C[0]), C[4] = +(C[4] ? C[5] + (C[6] || 1) : 2 * (C[3] === "even" || C[3] === "odd")), C[5] = +(C[7] + C[8] || C[3] === "odd")) : C[3] && EA.error(C[0]), C;
      },
      PSEUDO: function(C) {
        var o, G = !C[6] && C[2];
        return zA.CHILD.test(C[0]) ? null : (C[3] ? C[2] = C[4] || C[5] || "" : G && TA.test(G) && // Get excess from tokenize (recursively)
        (o = c(G, !0)) && // advance to the next closing parenthesis
        (o = G.indexOf(")", G.length - o) - G.length) && (C[0] = C[0].slice(0, o), C[2] = G.slice(0, o)), C.slice(0, 3));
      }
    },
    filter: {
      TAG: function(C) {
        var o = C.replace(OA, jA).toLowerCase();
        return C === "*" ? function() {
          return !0;
        } : function(G) {
          return G.nodeName && G.nodeName.toLowerCase() === o;
        };
      },
      CLASS: function(C) {
        var o = wA[C + " "];
        return o || (o = new RegExp(
          "(^|" + T + ")" + C + "(" + T + "|$)"
        )) && wA(C, function(G) {
          return o.test(
            typeof G.className == "string" && G.className || typeof G.getAttribute < "u" && G.getAttribute("class") || ""
          );
        });
      },
      ATTR: function(C, o, G) {
        return function(n) {
          var h = EA.attr(n, C);
          return h == null ? o === "!=" : o ? (h += "", o === "=" ? h === G : o === "!=" ? h !== G : o === "^=" ? G && h.indexOf(G) === 0 : o === "*=" ? G && h.indexOf(G) > -1 : o === "$=" ? G && h.slice(-G.length) === G : o === "~=" ? (" " + h.replace(MA, " ") + " ").indexOf(G) > -1 : o === "|=" ? h === G || h.slice(0, G.length + 1) === G + "-" : !1) : !0;
        };
      },
      CHILD: function(C, o, G, n, h) {
        var e = C.slice(0, 3) !== "nth", Y = C.slice(-4) !== "last", M = o === "of-type";
        return n === 1 && h === 0 ? (
          // Shortcut for :nth-*(n)
          function(W) {
            return !!W.parentNode;
          }
        ) : function(W, K, O) {
          var H, _, IA, L, R, D, a = e !== Y ? "nextSibling" : "previousSibling", N = W.parentNode, k = M && W.nodeName.toLowerCase(), m = !O && !M, r = !1;
          if (N) {
            if (e) {
              for (; a; ) {
                for (L = W; L = L[a]; )
                  if (M ? L.nodeName.toLowerCase() === k : L.nodeType === 1)
                    return !1;
                D = a = C === "only" && !D && "nextSibling";
              }
              return !0;
            }
            if (D = [Y ? N.firstChild : N.lastChild], Y && m) {
              for (L = N, IA = L[b] || (L[b] = {}), _ = IA[L.uniqueID] || (IA[L.uniqueID] = {}), H = _[C] || [], R = H[0] === q && H[1], r = R && H[2], L = R && N.childNodes[R]; L = ++R && L && L[a] || // Fallback to seeking `elem` from the start
              (r = R = 0) || D.pop(); )
                if (L.nodeType === 1 && ++r && L === W) {
                  _[C] = [q, R, r];
                  break;
                }
            } else if (m && (L = W, IA = L[b] || (L[b] = {}), _ = IA[L.uniqueID] || (IA[L.uniqueID] = {}), H = _[C] || [], R = H[0] === q && H[1], r = R), r === !1)
              for (; (L = ++R && L && L[a] || (r = R = 0) || D.pop()) && !((M ? L.nodeName.toLowerCase() === k : L.nodeType === 1) && ++r && (m && (IA = L[b] || (L[b] = {}), _ = IA[L.uniqueID] || (IA[L.uniqueID] = {}), _[C] = [q, r]), L === W)); )
                ;
            return r -= h, r === n || r % n === 0 && r / n >= 0;
          }
        };
      },
      PSEUDO: function(C, o) {
        var G, n = E.pseudos[C] || E.setFilters[C.toLowerCase()] || EA.error("unsupported pseudo: " + C);
        return n[b] ? n(o) : n.length > 1 ? (G = [C, C, "", o], E.setFilters.hasOwnProperty(C.toLowerCase()) ? qA(function(h, e) {
          for (var Y, M = n(h, o), W = M.length; W--; )
            Y = $(h, M[W]), h[Y] = !(e[Y] = M[W]);
        }) : function(h) {
          return n(h, 0, G);
        }) : n;
      }
    },
    pseudos: {
      // Potentially complex pseudos
      not: qA(function(C) {
        var o = [], G = [], n = t(C.replace(pA, "$1"));
        return n[b] ? qA(function(h, e, Y, M) {
          for (var W, K = n(h, null, M, []), O = h.length; O--; )
            (W = K[O]) && (h[O] = !(e[O] = W));
        }) : function(h, e, Y) {
          return o[0] = h, n(o, null, Y, G), o[0] = null, !G.pop();
        };
      }),
      has: qA(function(C) {
        return function(o) {
          return EA(C, o).length > 0;
        };
      }),
      contains: qA(function(C) {
        return C = C.replace(OA, jA), function(o) {
          return (o.textContent || g(o)).indexOf(C) > -1;
        };
      }),
      // "Whether an element is represented by a :lang() selector
      // is based solely on the element's language value
      // being equal to the identifier C,
      // or beginning with the identifier C immediately followed by "-".
      // The matching of C against the element's language value is performed case-insensitively.
      // The identifier C does not have to be a valid language name."
      // http://www.w3.org/TR/selectors/#lang-pseudo
      lang: qA(function(C) {
        return yA.test(C || "") || EA.error("unsupported lang: " + C), C = C.replace(OA, jA).toLowerCase(), function(o) {
          var G;
          do
            if (G = j ? o.lang : o.getAttribute("xml:lang") || o.getAttribute("lang"))
              return G = G.toLowerCase(), G === C || G.indexOf(C + "-") === 0;
          while ((o = o.parentNode) && o.nodeType === 1);
          return !1;
        };
      }),
      // Miscellaneous
      target: function(C) {
        var o = B.location && B.location.hash;
        return o && o.slice(1) === C.id;
      },
      root: function(C) {
        return C === p;
      },
      focus: function(C) {
        return C === J.activeElement && (!J.hasFocus || J.hasFocus()) && !!(C.type || C.href || ~C.tabIndex);
      },
      // Boolean properties
      enabled: lQ(!1),
      disabled: lQ(!0),
      checked: function(C) {
        var o = C.nodeName.toLowerCase();
        return o === "input" && !!C.checked || o === "option" && !!C.selected;
      },
      selected: function(C) {
        return C.parentNode && C.parentNode.selectedIndex, C.selected === !0;
      },
      // Contents
      empty: function(C) {
        for (C = C.firstChild; C; C = C.nextSibling)
          if (C.nodeType < 6)
            return !1;
        return !0;
      },
      parent: function(C) {
        return !E.pseudos.empty(C);
      },
      // Element/input types
      header: function(C) {
        return BA.test(C.nodeName);
      },
      input: function(C) {
        return XQ.test(C.nodeName);
      },
      button: function(C) {
        var o = C.nodeName.toLowerCase();
        return o === "input" && C.type === "button" || o === "button";
      },
      text: function(C) {
        var o;
        return C.nodeName.toLowerCase() === "input" && C.type === "text" && // Support: IE<8
        // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
        ((o = C.getAttribute("type")) == null || o.toLowerCase() === "text");
      },
      // Position-in-collection
      first: gQ(function() {
        return [0];
      }),
      last: gQ(function(C, o) {
        return [o - 1];
      }),
      eq: gQ(function(C, o, G) {
        return [G < 0 ? G + o : G];
      }),
      even: gQ(function(C, o) {
        for (var G = 0; G < o; G += 2)
          C.push(G);
        return C;
      }),
      odd: gQ(function(C, o) {
        for (var G = 1; G < o; G += 2)
          C.push(G);
        return C;
      }),
      lt: gQ(function(C, o, G) {
        for (var n = G < 0 ? G + o : G > o ? o : G; --n >= 0; )
          C.push(n);
        return C;
      }),
      gt: gQ(function(C, o, G) {
        for (var n = G < 0 ? G + o : G; ++n < o; )
          C.push(n);
        return C;
      })
    }
  }, E.pseudos.nth = E.pseudos.eq;
  for (A in {
    radio: !0,
    checkbox: !0,
    file: !0,
    password: !0,
    image: !0
  })
    E.pseudos[A] = rB(A);
  for (A in { submit: !0, reset: !0 })
    E.pseudos[A] = JQ(A);
  function QB() {
  }
  QB.prototype = E.filters = E.pseudos, E.setFilters = new QB(), c = EA.tokenize = function(C, o) {
    var G, n, h, e, Y, M, W, K = LA[C + " "];
    if (K)
      return o ? 0 : K.slice(0);
    for (Y = C, M = [], W = E.preFilter; Y; ) {
      (!G || (n = vA.exec(Y))) && (n && (Y = Y.slice(n[0].length) || Y), M.push(h = [])), G = !1, (n = HA.exec(Y)) && (G = n.shift(), h.push({
        value: G,
        // Cast descendant combinators to space
        type: n[0].replace(pA, " ")
      }), Y = Y.slice(G.length));
      for (e in E.filter)
        (n = zA[e].exec(Y)) && (!W[e] || (n = W[e](n))) && (G = n.shift(), h.push({
          value: G,
          type: e,
          matches: n
        }), Y = Y.slice(G.length));
      if (!G)
        break;
    }
    return o ? Y.length : Y ? EA.error(C) : (
      // Cache the tokens
      LA(C, M).slice(0)
    );
  };
  function iQ(C) {
    for (var o = 0, G = C.length, n = ""; o < G; o++)
      n += C[o].value;
    return n;
  }
  function uQ(C, o, G) {
    var n = o.dir, h = o.next, e = h || n, Y = G && e === "parentNode", M = FA++;
    return o.first ? (
      // Check against closest ancestor/preceding element
      function(W, K, O) {
        for (; W = W[n]; )
          if (W.nodeType === 1 || Y)
            return C(W, K, O);
        return !1;
      }
    ) : (
      // Check against all ancestor/preceding elements
      function(W, K, O) {
        var H, _, IA, L = [q, M];
        if (O) {
          for (; W = W[n]; )
            if ((W.nodeType === 1 || Y) && C(W, K, O))
              return !0;
        } else
          for (; W = W[n]; )
            if (W.nodeType === 1 || Y)
              if (IA = W[b] || (W[b] = {}), _ = IA[W.uniqueID] || (IA[W.uniqueID] = {}), h && h === W.nodeName.toLowerCase())
                W = W[n] || W;
              else {
                if ((H = _[e]) && H[0] === q && H[1] === M)
                  return L[2] = H[2];
                if (_[e] = L, L[2] = C(W, K, O))
                  return !0;
              }
        return !1;
      }
    );
  }
  function RB(C) {
    return C.length > 1 ? function(o, G, n) {
      for (var h = C.length; h--; )
        if (!C[h](o, G, n))
          return !1;
      return !0;
    } : C[0];
  }
  function ZQ(C, o, G) {
    for (var n = 0, h = o.length; n < h; n++)
      EA(C, o[n], G);
    return G;
  }
  function RQ(C, o, G, n, h) {
    for (var e, Y = [], M = 0, W = C.length, K = o != null; M < W; M++)
      (e = C[M]) && (!G || G(e, n, h)) && (Y.push(e), K && o.push(M));
    return Y;
  }
  function hQ(C, o, G, n, h, e) {
    return n && !n[b] && (n = hQ(n)), h && !h[b] && (h = hQ(h, e)), qA(function(Y, M, W, K) {
      var O, H, _, IA = [], L = [], R = M.length, D = Y || ZQ(
        o || "*",
        W.nodeType ? [W] : W,
        []
      ), a = C && (Y || !o) ? RQ(D, IA, C, W, K) : D, N = G ? (
        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        h || (Y ? C : R || n) ? (
          // ...intermediate processing is necessary
          []
        ) : (
          // ...otherwise use results directly
          M
        )
      ) : a;
      if (G && G(a, N, W, K), n)
        for (O = RQ(N, L), n(O, [], W, K), H = O.length; H--; )
          (_ = O[H]) && (N[L[H]] = !(a[L[H]] = _));
      if (Y) {
        if (h || C) {
          if (h) {
            for (O = [], H = N.length; H--; )
              (_ = N[H]) && O.push(a[H] = _);
            h(null, N = [], O, K);
          }
          for (H = N.length; H--; )
            (_ = N[H]) && (O = h ? $(Y, _) : IA[H]) > -1 && (Y[O] = !(M[O] = _));
        }
      } else
        N = RQ(
          N === M ? N.splice(R, N.length) : N
        ), h ? h(null, M, N, K) : kA.apply(M, N);
    });
  }
  function GB(C) {
    for (var o, G, n, h = C.length, e = E.relative[C[0].type], Y = e || E.relative[" "], M = e ? 1 : 0, W = uQ(
      function(H) {
        return H === o;
      },
      Y,
      !0
    ), K = uQ(
      function(H) {
        return $(o, H) > -1;
      },
      Y,
      !0
    ), O = [
      function(H, _, IA) {
        var L = !e && (IA || _ !== s) || ((o = _).nodeType ? W(H, _, IA) : K(H, _, IA));
        return o = null, L;
      }
    ]; M < h; M++)
      if (G = E.relative[C[M].type])
        O = [uQ(RB(O), G)];
      else {
        if (G = E.filter[C[M].type].apply(null, C[M].matches), G[b]) {
          for (n = ++M; n < h && !E.relative[C[n].type]; n++)
            ;
          return hQ(
            M > 1 && RB(O),
            M > 1 && iQ(
              // If the preceding token was a descendant combinator, insert an implicit any-element `*`
              C.slice(0, M - 1).concat({ value: C[M - 2].type === " " ? "*" : "" })
            ).replace(pA, "$1"),
            G,
            M < n && GB(C.slice(M, n)),
            n < h && GB(C = C.slice(n)),
            n < h && iQ(C)
          );
        }
        O.push(G);
      }
    return RB(O);
  }
  function FE(C, o) {
    var G = o.length > 0, n = C.length > 0, h = function(e, Y, M, W, K) {
      var O, H, _, IA = 0, L = "0", R = e && [], D = [], a = s, N = e || n && E.find.TAG("*", K), k = q += a == null ? 1 : Math.random() || 0.1, m = N.length;
      for (K && (s = Y == J || Y || K); L !== m && (O = N[L]) != null; L++) {
        if (n && O) {
          for (H = 0, !Y && O.ownerDocument != J && (F(O), M = !j); _ = C[H++]; )
            if (_(O, Y || J, M)) {
              W.push(O);
              break;
            }
          K && (q = k);
        }
        G && ((O = !_ && O) && IA--, e && R.push(O));
      }
      if (IA += L, G && L !== IA) {
        for (H = 0; _ = o[H++]; )
          _(R, D, Y, M);
        if (e) {
          if (IA > 0)
            for (; L--; )
              R[L] || D[L] || (D[L] = dA.call(W));
          D = RQ(D);
        }
        kA.apply(W, D), K && !e && D.length > 0 && IA + o.length > 1 && EA.uniqueSort(W);
      }
      return K && (q = k, s = a), R;
    };
    return G ? qA(h) : h;
  }
  t = EA.compile = function(C, o) {
    var G, n = [], h = [], e = XA[C + " "];
    if (!e) {
      for (o || (o = c(C)), G = o.length; G--; )
        e = GB(o[G]), e[b] ? n.push(e) : h.push(e);
      e = XA(
        C,
        FE(h, n)
      ), e.selector = C;
    }
    return e;
  }, w = EA.select = function(C, o, G, n) {
    var h, e, Y, M, W, K = typeof C == "function" && C, O = !n && c(C = K.selector || C);
    if (G = G || [], O.length === 1) {
      if (e = O[0] = O[0].slice(0), e.length > 2 && (Y = e[0]).type === "ID" && o.nodeType === 9 && j && E.relative[e[1].type]) {
        if (o = (E.find.ID(
          Y.matches[0].replace(OA, jA),
          o
        ) || [])[0], o)
          K && (o = o.parentNode);
        else return G;
        C = C.slice(e.shift().value.length);
      }
      for (h = zA.needsContext.test(C) ? 0 : e.length; h-- && (Y = e[h], !E.relative[M = Y.type]); )
        if ((W = E.find[M]) && (n = W(
          Y.matches[0].replace(OA, jA),
          cQ.test(e[0].type) && iB(o.parentNode) || o
        ))) {
          if (e.splice(h, 1), C = n.length && iQ(e), !C)
            return kA.apply(G, n), G;
          break;
        }
    }
    return (K || t(C, O))(
      n,
      o,
      !j,
      G,
      !o || cQ.test(C) && iB(o.parentNode) || o
    ), G;
  }, Q.sortStable = b.split("").sort(rA).join("") === b, Q.detectDuplicates = !!y, F(), Q.sortDetached = oQ(), oQ() || AB("type|href|height|width", function(C, o, G) {
    if (!G)
      return C.getAttribute(o, o.toLowerCase() === "type" ? 1 : 2);
  }), (!Q.attributes || !oQ()) && AB("value", function(C, o, G) {
    if (!G && C.nodeName.toLowerCase() === "input")
      return C.defaultValue;
  }), oQ() || AB(NA, function(C, o, G) {
    var n;
    if (!G)
      return C[o] === !0 ? o.toLowerCase() : (n = C.getAttributeNode(o)) && n.specified ? n.value : null;
  });
  var pB = B.Sizzle;
  EA.noConflict = function() {
    return B.Sizzle === EA && (B.Sizzle = pB), EA;
  }, typeof define == "function" && define.amd ? define(function() {
    return EA;
  }) : typeof module < "u" && module.exports ? module.exports = EA : B.Sizzle = EA;
}
const gC = BC;
let jB = null;
function IC() {
  if (jB === null)
    try {
      new Function(""), jB = !0;
    } catch {
      jB = !1;
    }
  return jB ? QC : gC;
}
class CC {
  constructor(A) {
    if (A !== gA)
      throw new TypeError("Illegal constructor.");
  }
  createDocument() {
    throw new Error("Unimplemented");
  }
  createHTMLDocument(A) {
    A += "";
    const Q = new GE(gA), E = new TQ("html", "", "", gA);
    Q.appendChild(E);
    const g = new mQ("html", Q, [], gA);
    g._setOwnerDocument(Q);
    const I = new mQ("head", g, [], gA), c = new mQ("body", g, [], gA), t = new mQ("title", I, [], gA), w = new zQ(A);
    return t.appendChild(w), Q.head = I, Q.body = c, Q;
  }
  createDocumentType(A, Q, E) {
    return new TQ(
      A,
      Q,
      E,
      gA
    );
  }
}
class TQ extends QA {
  #A = "";
  #E = "";
  #B = "";
  constructor(A, Q, E, g) {
    super(
      "html",
      GA.DOCUMENT_TYPE_NODE,
      null,
      g
    ), this.#A = A, this.#E = Q, this.#B = E;
  }
  get name() {
    return this.#A;
  }
  get publicId() {
    return this.#E;
  }
  get systemId() {
    return this.#B;
  }
  _shallowClone() {
    return new TQ(
      this.#A,
      this.#E,
      this.#B,
      gA
    );
  }
}
let zg = class pE extends QA {
  head = null;
  body = null;
  implementation;
  #A = "about:blank";
  // TODO
  #E = null;
  constructor() {
    super(
      "#document",
      GA.DOCUMENT_NODE,
      null,
      gA
    ), this.implementation = new CC(gA);
  }
  _shallowClone() {
    return new pE();
  }
  // Expose the document's NWAPI for Element's access to
  // querySelector/querySelectorAll
  get _nwapi() {
    return this.#E || (this.#E = IC()(this));
  }
  get documentURI() {
    return this.#A;
  }
  get title() {
    return this.querySelector("title")?.textContent || "";
  }
  set title(A) {
    let Q = this.querySelector("title");
    if (!Q) {
      const { head: E } = this;
      if (!E) return;
      Q = this.createElement("title"), E.appendChild(Q);
    }
    Q.textContent = A;
  }
  get cookie() {
    return "";
  }
  set cookie(A) {
  }
  get visibilityState() {
    return "visible";
  }
  get hidden() {
    return !1;
  }
  get compatMode() {
    return "CSS1Compat";
  }
  get documentElement() {
    for (const A of this.childNodes)
      if (A.nodeType === GA.ELEMENT_NODE)
        return A;
    return null;
  }
  get doctype() {
    for (const A of this.childNodes)
      if (A.nodeType === GA.DOCUMENT_TYPE_NODE)
        return A;
    return null;
  }
  get childElementCount() {
    let A = 0;
    for (const { nodeType: Q } of this.childNodes)
      Q === GA.ELEMENT_NODE && A++;
    return A;
  }
  appendChild(A) {
    return super.appendChild(A), A._setOwnerDocument(this), A;
  }
  createElement(A, Q) {
    switch (A = $B(A), A) {
      case "TEMPLATE": {
        const E = new vQ(), g = new RE(
          null,
          [],
          gA,
          E
        );
        return g._setOwnerDocument(this), g;
      }
      default: {
        const E = new mQ(A, null, [], gA);
        return E._setOwnerDocument(this), E;
      }
    }
  }
  createElementNS(A, Q, E) {
    if (A === "http://www.w3.org/1999/xhtml")
      return this.createElement(Q, E);
    throw new Error(
      `createElementNS: "${A}" namespace unimplemented`
    );
  }
  createTextNode(A) {
    return new zQ(A);
  }
  createComment(A) {
    return new jg(A);
  }
  createDocumentFragment() {
    const A = new vQ();
    return A._setOwnerDocument(this), A;
  }
  importNode(A, Q = !1) {
    const E = A.cloneNode(Q);
    return E._setOwnerDocument(this), E;
  }
  adoptNode(A) {
    if (A instanceof pE)
      throw new DOMException(
        "Adopting a Document node is not supported.",
        "NotSupportedError"
      );
    return A._setParent(null), A._setOwnerDocument(this), A;
  }
  // FIXME: This is a bad solution. The correct solution
  // would be to make `.body` and `.head` dynamic getters,
  // but that would be a breaking change since `.body`
  // and `.head` would need to be typed as `Element | null`.
  // Currently they're typed as `Element` which is incorrect...
  cloneNode(A) {
    const Q = super.cloneNode(A);
    for (const E of Q.documentElement?.childNodes || [])
      switch (E.nodeName) {
        case "BODY": {
          Q.body = E;
          break;
        }
        case "HEAD": {
          Q.head = E;
          break;
        }
      }
    return Q;
  }
  querySelector(A) {
    return this._nwapi.first(A, this);
  }
  querySelectorAll(A) {
    const Q = new cB(), E = Q[yB]();
    for (const g of this._nwapi.select(A, this))
      E.push(g);
    return Q;
  }
  // TODO: DRY!!!
  getElementById(A) {
    if (!this._hasInitializedChildNodes())
      return null;
    for (const Q of this.childNodes)
      if (Q.nodeType === GA.ELEMENT_NODE) {
        if (Q.id === A)
          return Q;
        const E = Q.getElementById(A);
        if (E)
          return E;
      }
    return null;
  }
  getElementsByTagName(A) {
    return A === "*" ? this.documentElement ? this._getElementsByTagNameWildcard(
      this.documentElement,
      []
    ) : [] : this._getElementsByTagName($B(A), []);
  }
  _getElementsByTagNameWildcard(A, Q) {
    for (const E of this.childNodes)
      E.nodeType === GA.ELEMENT_NODE && (Q.push(E), E._getElementsByTagNameWildcard(Q));
    return Q;
  }
  _getElementsByTagName(A, Q) {
    for (const E of this.childNodes)
      E.nodeType === GA.ELEMENT_NODE && (E.tagName === A && Q.push(E), E._getElementsByTagName(A, Q));
    return Q;
  }
  getElementsByTagNameNS(A, Q) {
    return this.getElementsByTagName(Q);
  }
  getElementsByClassName(A) {
    return iE(
      this,
      A.trim().split(/\s+/),
      []
    );
  }
  hasFocus() {
    return !0;
  }
};
class GE extends zg {
  constructor(A) {
    if (A !== gA)
      throw new TypeError("Illegal constructor.");
    super();
  }
  _shallowClone() {
    return new GE(gA);
  }
}
YB.Document = zg;
function DC(B) {
  const A = JSON.parse(PB(B));
  return AE(A, null);
}
function XE(B, A) {
  const Q = JSON.parse(Xg(B, A));
  return AE(Q, null);
}
function AE(B, A) {
  if (B[1] === "template") {
    const I = AE(B[3], null), c = new vQ(), t = c._getChildNodesMutator();
    for (const w of I.childNodes)
      t.push(w), w._setParent(c);
    return new RE(
      A,
      B[2],
      gA,
      c
    );
  }
  const Q = new mQ(B[1], A, B[2], gA), E = Q._getChildNodesMutator();
  let g;
  for (const I of B.slice(3))
    switch (I[0]) {
      case GA.TEXT_NODE:
        g = new zQ(I[1]), g.parentNode = Q, E.push(g);
        break;
      case GA.COMMENT_NODE:
        g = new jg(I[1]), g.parentNode = Q, E.push(g);
        break;
      case GA.DOCUMENT_NODE:
      case GA.ELEMENT_NODE:
        AE(I, Q);
        break;
      case GA.DOCUMENT_TYPE_NODE:
        g = new TQ(I[1], I[2], I[3], gA), g.parentNode = Q, E.push(g);
        break;
    }
  return Q;
}
class cC {
  parseFromString(A, Q) {
    if (Q !== "text/html")
      throw new Error(`DOMParser: "${Q}" unimplemented`);
    const E = new GE(gA), g = DC(A);
    let I = null, c = !1;
    for (const t of [...g.childNodes])
      E.appendChild(t), t instanceof TQ ? c = !0 : t.nodeName === "HTML" && (I = t);
    if (!c) {
      const t = new TQ("html", "", "", gA);
      E.childNodes.length === 0 ? E.appendChild(t) : E.insertBefore(t, E.childNodes[0]);
    }
    if (I)
      for (const t of I.childNodes)
        switch (t.tagName) {
          case "HEAD":
            E.head = t;
            break;
          case "BODY":
            E.body = t;
            break;
        }
    return E;
  }
}
const oC = Array[Symbol.hasInstance];
Object.defineProperty(Array, Symbol.hasInstance, {
  value(B) {
    switch (B?.constructor) {
      case fE:
      case cB:
        return !1;
      default:
        return oC.call(this, B);
    }
  },
  configurable: !0
});
const iC = Array.isArray;
Object.defineProperty(Array, "isArray", {
  value: (B) => {
    switch (B?.constructor) {
      case fE:
      case cB:
        return !1;
      default:
        return iC.call(Array, B);
    }
  },
  configurable: !0
});
await pg();
jI(
  OI,
  uI
);
const qE = 1, PE = 2, qg = 4, RC = 8, GC = 16, aC = 1, tC = 2, NC = "[", lC = "]", hC = Symbol(), wC = "http://www.w3.org/1999/xhtml", sC = "@attach";
function Pg(B) {
  var A, Q, E = "";
  if (typeof B == "string" || typeof B == "number") E += B;
  else if (typeof B == "object") if (Array.isArray(B)) {
    var g = B.length;
    for (A = 0; A < g; A++) B[A] && (Q = Pg(B[A])) && (E && (E += " "), E += Q);
  } else for (Q in B) B[Q] && (E && (E += " "), E += Q);
  return E;
}
function FC() {
  for (var B, A, Q = 0, E = "", g = arguments.length; Q < g; Q++) (B = arguments[Q]) && (A = Pg(B)) && (E && (E += " "), E += A);
  return E;
}
function _g(B) {
  return typeof B == "object" ? FC(B) : B ?? "";
}
const tg = [...` 	
\r\f \v\uFEFF`];
function nC(B, A, Q) {
  var E = B == null ? "" : "" + B;
  if (Q) {
    for (var g in Q)
      if (Q[g])
        E = E ? E + " " + g : g;
      else if (E.length)
        for (var I = g.length, c = 0; (c = E.indexOf(g, c)) >= 0; ) {
          var t = c + I;
          (c === 0 || tg.includes(E[c - 1])) && (t === E.length || tg.includes(E[t])) ? E = (c === 0 ? "" : E.substring(0, c)) + E.substring(t + 1) : c = t;
        }
  }
  return E === "" ? null : E;
}
function Ng(B, A = !1) {
  var Q = A ? " !important;" : ";", E = "";
  for (var g in B) {
    var I = B[g];
    I != null && I !== "" && (E += " " + g + ": " + I + Q);
  }
  return E;
}
function JE(B) {
  return B[0] !== "-" || B[1] !== "-" ? B.toLowerCase() : B;
}
function eC(B, A) {
  if (A) {
    var Q = "", E, g;
    if (Array.isArray(A) ? (E = A[0], g = A[1]) : E = A, B) {
      B = String(B).replaceAll(/\s*\/\*.*?\*\/\s*/g, "").trim();
      var I = !1, c = 0, t = !1, w = [];
      E && w.push(...Object.keys(E).map(JE)), g && w.push(...Object.keys(g).map(JE));
      var s = 0, d = -1;
      const j = B.length;
      for (var y = 0; y < j; y++) {
        var F = B[y];
        if (t ? F === "/" && B[y - 1] === "*" && (t = !1) : I ? I === F && (I = !1) : F === "/" && B[y + 1] === "*" ? t = !0 : F === '"' || F === "'" ? I = F : F === "(" ? c++ : F === ")" && c--, !t && I === !1 && c === 0) {
          if (F === ":" && d === -1)
            d = y;
          else if (F === ";" || y === j - 1) {
            if (d !== -1) {
              var J = JE(B.substring(s, d).trim());
              if (!w.includes(J)) {
                F !== ";" && y++;
                var p = B.substring(s, y).trim();
                Q += " " + p + ";";
              }
            }
            s = y + 1, d = -1;
          }
        }
      }
    }
    return E && (Q += Ng(E)), g && (Q += Ng(g, !0)), Q = Q.trim(), Q === "" ? null : Q;
  }
  return B == null ? null : String(B);
}
var _E = Array.isArray, YC = Array.prototype.indexOf, $g = Array.from, JC = Object.defineProperty, ZC = Object.getOwnPropertyDescriptors, dC = Object.getPrototypeOf;
function yC(B) {
  for (var A = 0; A < B.length; A++)
    B[A]();
}
function bC(B, A, Q = !1) {
  return B === void 0 ? Q ? (
    /** @type {() => V} */
    A()
  ) : (
    /** @type {V} */
    A
  ) : B;
}
function OE(B, A) {
  if (Array.isArray(B))
    return B;
  if (!(Symbol.iterator in B))
    return Array.from(B);
  const Q = [];
  for (const E of B)
    if (Q.push(E), Q.length === A) break;
  return Q;
}
const lg = !1, aQ = 2, AI = 4, $E = 8, QI = 16, pQ = 32, bB = 64, Ag = 128, EQ = 256, QE = 512, _A = 1024, tQ = 2048, qQ = 4096, FQ = 8192, Qg = 16384, BI = 32768, Bg = 65536, mC = 1 << 19, EI = 1 << 20, uE = 1 << 21, hg = Symbol("$state"), kC = Symbol("");
function gI(B) {
  return B === this.v;
}
function MC(B, A) {
  return B != B ? A == A : B !== A || B !== null && typeof B == "object" || typeof B == "function";
}
function II(B) {
  return !MC(B, this.v);
}
function UC() {
  throw new Error("https://svelte.dev/e/effect_update_depth_exceeded");
}
let WC = !1, WQ = null;
function wg(B) {
  WQ = B;
}
function CI(B, A = !1, Q) {
  var E = WQ = {
    p: WQ,
    c: null,
    d: !1,
    e: null,
    m: !1,
    s: B,
    x: null,
    l: null
  };
  fC(() => {
    E.d = !0;
  });
}
function DI(B) {
  const A = WQ;
  if (A !== null) {
    const c = A.e;
    if (c !== null) {
      var Q = mA, E = VA;
      A.e = null;
      try {
        for (var g = 0; g < c.length; g++) {
          var I = c[g];
          rQ(I.effect), VQ(I.reaction), Eg(I.fn);
        }
      } finally {
        rQ(Q), VQ(E);
      }
    }
    WQ = A.p, A.m = !0;
  }
  return (
    /** @type {T} */
    {}
  );
}
function VC() {
  return !0;
}
function sg(B) {
  try {
    if (B !== null && typeof B == "object" && hg in B)
      return B[hg];
  } catch {
  }
  return B;
}
function rC(B, A) {
  return Object.is(sg(B), sg(A));
}
// @__NO_SIDE_EFFECTS__
function aE(B) {
  var A = aQ | tQ, Q = VA !== null && (VA.f & aQ) !== 0 ? (
    /** @type {Derived} */
    VA
  ) : null;
  return mA === null || Q !== null && (Q.f & EQ) !== 0 ? A |= EQ : mA.f |= EI, {
    ctx: WQ,
    deps: null,
    effects: null,
    equals: gI,
    f: A,
    fn: B,
    reactions: null,
    rv: 0,
    v: (
      /** @type {V} */
      null
    ),
    wv: 0,
    parent: Q ?? mA
  };
}
// @__NO_SIDE_EFFECTS__
function bA(B) {
  const A = /* @__PURE__ */ aE(B);
  return PC(A), A;
}
// @__NO_SIDE_EFFECTS__
function pC(B) {
  const A = /* @__PURE__ */ aE(B);
  return A.equals = II, A;
}
function cI(B) {
  var A = B.effects;
  if (A !== null) {
    B.effects = null;
    for (var Q = 0; Q < A.length; Q += 1)
      nQ(
        /** @type {Effect} */
        A[Q]
      );
  }
}
function XC(B) {
  for (var A = B.parent; A !== null; ) {
    if ((A.f & aQ) === 0)
      return (
        /** @type {Effect} */
        A
      );
    A = A.parent;
  }
  return null;
}
function oI(B) {
  var A, Q = mA;
  rQ(XC(B));
  try {
    cI(B), A = eI(B);
  } finally {
    rQ(Q);
  }
  return A;
}
function iI(B) {
  var A = oI(B);
  if (B.equals(A) || (B.v = A, B.wv = FI()), !kB) {
    var Q = (kQ || (B.f & EQ) !== 0) && B.deps !== null ? qQ : _A;
    IQ(B, Q);
  }
}
const JB = /* @__PURE__ */ new Map();
function xE(B, A) {
  var Q = {
    f: 0,
    // TODO ideally we could skip this altogether, but it causes type errors
    v: B,
    reactions: null,
    equals: gI,
    rv: 0,
    wv: 0
  };
  return Q;
}
// @__NO_SIDE_EFFECTS__
function OC(B, A = !1) {
  const Q = xE(B);
  return A || (Q.equals = II), Q;
}
function Fg(B, A) {
  if (!B.equals(A)) {
    var Q = B.v;
    kB ? JB.set(B, A) : JB.set(B, Q), B.v = A, (B.f & aQ) !== 0 && ((B.f & tQ) !== 0 && oI(
      /** @type {Derived} */
      B
    ), IQ(B, (B.f & EQ) === 0 ? _A : qQ)), B.wv = FI(), RI(B, tQ), mA !== null && (mA.f & _A) !== 0 && (mA.f & (pQ | bB)) === 0 && (BQ === null ? _C([B]) : BQ.push(B));
  }
  return A;
}
function RI(B, A) {
  var Q = B.reactions;
  if (Q !== null)
    for (var E = Q.length, g = 0; g < E; g++) {
      var I = Q[g], c = I.f;
      (c & tQ) === 0 && (IQ(I, A), (c & (_A | EQ)) !== 0 && ((c & aQ) !== 0 ? RI(
        /** @type {Derived} */
        I,
        qQ
      ) : hE(
        /** @type {Effect} */
        I
      )));
    }
}
function uC() {
  console.warn("https://svelte.dev/e/select_multiple_invalid_value");
}
let xC = !1;
var HC, jC, SC;
function GI(B = "") {
  return document.createTextNode(B);
}
// @__NO_SIDE_EFFECTS__
function BE(B) {
  return jC.call(B);
}
// @__NO_SIDE_EFFECTS__
function tE(B) {
  return SC.call(B);
}
function x(B, A) {
  return /* @__PURE__ */ BE(B);
}
function IB(B, A) {
  {
    var Q = (
      /** @type {DocumentFragment} */
      /* @__PURE__ */ BE(
        /** @type {Node} */
        B
      )
    );
    return Q instanceof Comment && Q.data === "" ? /* @__PURE__ */ tE(Q) : Q;
  }
}
function lA(B, A = 1, Q = !1) {
  let E = B;
  for (; A--; )
    E = /** @type {TemplateNode} */
    /* @__PURE__ */ tE(E);
  return E;
}
function KC(B) {
  B.textContent = "";
}
function LC(B, A) {
  var Q = A.last;
  Q === null ? A.last = A.first = B : (Q.next = B, B.prev = Q, A.last = B);
}
function NE(B, A, Q, E = !0) {
  var g = mA, I = {
    ctx: WQ,
    deps: null,
    nodes_start: null,
    nodes_end: null,
    f: B | tQ,
    first: null,
    fn: A,
    last: null,
    next: null,
    parent: g,
    prev: null,
    teardown: null,
    transitions: null,
    wv: 0
  };
  if (Q)
    try {
      Ig(I), I.f |= BI;
    } catch (w) {
      throw nQ(I), w;
    }
  else A !== null && hE(I);
  var c = Q && I.deps === null && I.first === null && I.nodes_start === null && I.teardown === null && (I.f & (EI | Ag)) === 0;
  if (!c && E && (g !== null && LC(I, g), VA !== null && (VA.f & aQ) !== 0)) {
    var t = (
      /** @type {Derived} */
      VA
    );
    (t.effects ??= []).push(I);
  }
  return I;
}
function fC(B) {
  const A = NE($E, null, !1);
  return IQ(A, _A), A.teardown = B, A;
}
function Eg(B) {
  return NE(AI, B, !1);
}
function JA(B, A = [], Q = aE) {
  const E = A.map(Q);
  return mB(() => B(...E.map(U)));
}
function mB(B, A = 0) {
  return NE($E | QI | A, B, !0);
}
function DB(B, A = !0) {
  return NE($E | pQ, B, !0, A);
}
function aI(B) {
  var A = B.teardown;
  if (A !== null) {
    const Q = kB, E = VA;
    ng(!0), VQ(null);
    try {
      A.call(null);
    } finally {
      ng(Q), VQ(E);
    }
  }
}
function tI(B, A = !1) {
  var Q = B.first;
  for (B.first = B.last = null; Q !== null; ) {
    var E = Q.next;
    (Q.f & bB) !== 0 ? Q.parent = null : nQ(Q, A), Q = E;
  }
}
function vC(B) {
  for (var A = B.first; A !== null; ) {
    var Q = A.next;
    (A.f & pQ) === 0 && nQ(A), A = Q;
  }
}
function nQ(B, A = !0) {
  var Q = !1;
  (A || (B.f & mC) !== 0) && B.nodes_start !== null && B.nodes_end !== null && (TC(
    B.nodes_start,
    /** @type {TemplateNode} */
    B.nodes_end
  ), Q = !0), tI(B, A && !Q), DE(B, 0), IQ(B, Qg);
  var E = B.transitions;
  if (E !== null)
    for (const I of E)
      I.stop();
  aI(B);
  var g = B.parent;
  g !== null && g.first !== null && NI(B), B.next = B.prev = B.teardown = B.ctx = B.deps = B.fn = B.nodes_start = B.nodes_end = null;
}
function TC(B, A) {
  for (; B !== null; ) {
    var Q = B === A ? null : (
      /** @type {TemplateNode} */
      /* @__PURE__ */ tE(B)
    );
    B.remove(), B = Q;
  }
}
function NI(B) {
  var A = B.parent, Q = B.prev, E = B.next;
  Q !== null && (Q.next = E), E !== null && (E.prev = Q), A !== null && (A.first === B && (A.first = E), A.last === B && (A.last = Q));
}
function HE(B, A) {
  var Q = [];
  gg(B, Q, !0), lI(Q, () => {
    nQ(B), A && A();
  });
}
function lI(B, A) {
  var Q = B.length;
  if (Q > 0) {
    var E = () => --Q || A();
    for (var g of B)
      g.out(E);
  } else
    A();
}
function gg(B, A, Q) {
  if ((B.f & FQ) === 0) {
    if (B.f ^= FQ, B.transitions !== null)
      for (const c of B.transitions)
        (c.is_global || Q) && A.push(c);
    for (var E = B.first; E !== null; ) {
      var g = E.next, I = (E.f & Bg) !== 0 || (E.f & pQ) !== 0;
      gg(E, A, I ? Q : !1), E = g;
    }
  }
}
function EE(B) {
  hI(B, !0);
}
function hI(B, A) {
  if ((B.f & FQ) !== 0) {
    B.f ^= FQ, (B.f & _A) === 0 && (B.f ^= _A), MB(B) && (IQ(B, tQ), hE(B));
    for (var Q = B.first; Q !== null; ) {
      var E = Q.next, g = (Q.f & Bg) !== 0 || (Q.f & pQ) !== 0;
      hI(Q, g ? A : !1), Q = E;
    }
    if (B.transitions !== null)
      for (const I of B.transitions)
        (I.is_global || A) && I.in();
  }
}
let gE = [];
function zC() {
  var B = gE;
  gE = [], yC(B);
}
function lE(B) {
  gE.length === 0 && queueMicrotask(zC), gE.push(B);
}
function qC(B) {
  var A = (
    /** @type {Effect} */
    mA
  );
  if ((A.f & BI) === 0) {
    if ((A.f & Ag) === 0)
      throw B;
    A.fn(B);
  } else
    wI(B, A);
}
function wI(B, A) {
  for (; A !== null; ) {
    if ((A.f & Ag) !== 0)
      try {
        A.fn(B);
        return;
      } catch {
      }
    A = A.parent;
  }
  throw B;
}
let jE = !1, IE = null, fQ = !1, kB = !1;
function ng(B) {
  kB = B;
}
let zB = [];
let VA = null, sQ = !1;
function VQ(B) {
  VA = B;
}
let mA = null;
function rQ(B) {
  mA = B;
}
let MQ = null;
function PC(B) {
  VA !== null && VA.f & uE && (MQ === null ? MQ = [B] : MQ.push(B));
}
let SA = null, AQ = 0, BQ = null;
function _C(B) {
  BQ = B;
}
let sI = 1, CE = 0, kQ = !1;
function FI() {
  return ++sI;
}
function MB(B) {
  var A = B.f;
  if ((A & tQ) !== 0)
    return !0;
  if ((A & qQ) !== 0) {
    var Q = B.deps, E = (A & EQ) !== 0;
    if (Q !== null) {
      var g, I, c = (A & QE) !== 0, t = E && mA !== null && !kQ, w = Q.length;
      if (c || t) {
        var s = (
          /** @type {Derived} */
          B
        ), d = s.parent;
        for (g = 0; g < w; g++)
          I = Q[g], (c || !I?.reactions?.includes(s)) && (I.reactions ??= []).push(s);
        c && (s.f ^= QE), t && d !== null && (d.f & EQ) === 0 && (s.f ^= EQ);
      }
      for (g = 0; g < w; g++)
        if (I = Q[g], MB(
          /** @type {Derived} */
          I
        ) && iI(
          /** @type {Derived} */
          I
        ), I.wv > B.wv)
          return !0;
    }
    (!E || mA !== null && !kQ) && IQ(B, _A);
  }
  return !1;
}
function nI(B, A, Q = !0) {
  var E = B.reactions;
  if (E !== null)
    for (var g = 0; g < E.length; g++) {
      var I = E[g];
      MQ?.includes(B) || ((I.f & aQ) !== 0 ? nI(
        /** @type {Derived} */
        I,
        A,
        !1
      ) : A === I && (Q ? IQ(I, tQ) : (I.f & _A) !== 0 && IQ(I, qQ), hE(
        /** @type {Effect} */
        I
      )));
    }
}
function eI(B) {
  var A = SA, Q = AQ, E = BQ, g = VA, I = kQ, c = MQ, t = WQ, w = sQ, s = B.f;
  SA = /** @type {null | Value[]} */
  null, AQ = 0, BQ = null, kQ = (s & EQ) !== 0 && (sQ || !fQ || VA === null), VA = (s & (pQ | bB)) === 0 ? B : null, MQ = null, wg(B.ctx), sQ = !1, CE++, B.f |= uE;
  try {
    var d = (
      /** @type {Function} */
      (0, B.fn)()
    ), y = B.deps;
    if (SA !== null) {
      var F;
      if (DE(B, AQ), y !== null && AQ > 0)
        for (y.length = AQ + SA.length, F = 0; F < SA.length; F++)
          y[AQ + F] = SA[F];
      else
        B.deps = y = SA;
      if (!kQ)
        for (F = AQ; F < y.length; F++)
          (y[F].reactions ??= []).push(B);
    } else y !== null && AQ < y.length && (DE(B, AQ), y.length = AQ);
    if (VC() && BQ !== null && !sQ && y !== null && (B.f & (aQ | qQ | tQ)) === 0)
      for (F = 0; F < /** @type {Source[]} */
      BQ.length; F++)
        nI(
          BQ[F],
          /** @type {Effect} */
          B
        );
    return g !== null && g !== B && (CE++, BQ !== null && (E === null ? E = BQ : E.push(.../** @type {Source[]} */
    BQ))), d;
  } catch (J) {
    qC(J);
  } finally {
    SA = A, AQ = Q, BQ = E, VA = g, kQ = I, MQ = c, wg(t), sQ = w, B.f ^= uE;
  }
}
function $C(B, A) {
  let Q = A.reactions;
  if (Q !== null) {
    var E = YC.call(Q, B);
    if (E !== -1) {
      var g = Q.length - 1;
      g === 0 ? Q = A.reactions = null : (Q[E] = Q[g], Q.pop());
    }
  }
  Q === null && (A.f & aQ) !== 0 && // Destroying a child effect while updating a parent effect can cause a dependency to appear
  // to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`
  // allows us to skip the expensive work of disconnecting and immediately reconnecting it
  (SA === null || !SA.includes(A)) && (IQ(A, qQ), (A.f & (EQ | QE)) === 0 && (A.f ^= QE), cI(
    /** @type {Derived} **/
    A
  ), DE(
    /** @type {Derived} **/
    A,
    0
  ));
}
function DE(B, A) {
  var Q = B.deps;
  if (Q !== null)
    for (var E = A; E < Q.length; E++)
      $C(B, Q[E]);
}
function Ig(B) {
  var A = B.f;
  if ((A & Qg) === 0) {
    IQ(B, _A);
    var Q = mA, E = fQ;
    mA = B, fQ = !0;
    try {
      (A & QI) !== 0 ? vC(B) : tI(B), aI(B);
      var g = eI(B);
      B.teardown = typeof g == "function" ? g : null, B.wv = sI;
      var I = B.deps, c;
      lg && WC && B.f & tQ;
    } finally {
      fQ = E, mA = Q;
    }
  }
}
function AD() {
  try {
    UC();
  } catch (B) {
    if (IE !== null)
      wI(B, IE);
    else
      throw B;
  }
}
function QD() {
  var B = fQ;
  try {
    var A = 0;
    for (fQ = !0; zB.length > 0; ) {
      A++ > 1e3 && AD();
      var Q = zB, E = Q.length;
      zB = [];
      for (var g = 0; g < E; g++) {
        var I = ED(Q[g]);
        BD(I);
      }
      JB.clear();
    }
  } finally {
    jE = !1, fQ = B, IE = null;
  }
}
function BD(B) {
  var A = B.length;
  if (A !== 0)
    for (var Q = 0; Q < A; Q++) {
      var E = B[Q];
      (E.f & (Qg | FQ)) === 0 && MB(E) && (Ig(E), E.deps === null && E.first === null && E.nodes_start === null && (E.teardown === null ? NI(E) : E.fn = null));
    }
}
function hE(B) {
  jE || (jE = !0, queueMicrotask(QD));
  for (var A = IE = B; A.parent !== null; ) {
    A = A.parent;
    var Q = A.f;
    if ((Q & (bB | pQ)) !== 0) {
      if ((Q & _A) === 0) return;
      A.f ^= _A;
    }
  }
  zB.push(A);
}
function ED(B) {
  for (var A = [], Q = B; Q !== null; ) {
    var E = Q.f, g = (E & (pQ | bB)) !== 0, I = g && (E & _A) !== 0;
    if (!I && (E & FQ) === 0) {
      (E & AI) !== 0 ? A.push(Q) : g ? Q.f ^= _A : MB(Q) && Ig(Q);
      var c = Q.first;
      if (c !== null) {
        Q = c;
        continue;
      }
    }
    var t = Q.parent;
    for (Q = Q.next; Q === null && t !== null; )
      Q = t.next, t = t.parent;
  }
  return A;
}
function U(B) {
  var A = B.f, Q = (A & aQ) !== 0;
  if (VA !== null && !sQ) {
    if (!MQ?.includes(B)) {
      var E = VA.deps;
      B.rv < CE && (B.rv = CE, SA === null && E !== null && E[AQ] === B ? AQ++ : SA === null ? SA = [B] : (!kQ || !SA.includes(B)) && SA.push(B));
    }
  } else if (Q && /** @type {Derived} */
  B.deps === null && /** @type {Derived} */
  B.effects === null) {
    var g = (
      /** @type {Derived} */
      B
    ), I = g.parent;
    I !== null && (I.f & EQ) === 0 && (g.f ^= EQ);
  }
  return Q && (g = /** @type {Derived} */
  B, MB(g) && iI(g)), kB && JB.has(B) ? JB.get(B) : B.v;
}
function gD(B) {
  var A = sQ;
  try {
    return sQ = !0, B();
  } finally {
    sQ = A;
  }
}
const ID = -7169;
function IQ(B, A) {
  B.f = B.f & ID | A;
}
function CD(B) {
  return B.endsWith("capture") && B !== "gotpointercapture" && B !== "lostpointercapture";
}
const DD = [
  "beforeinput",
  "click",
  "change",
  "dblclick",
  "contextmenu",
  "focusin",
  "focusout",
  "input",
  "keydown",
  "keyup",
  "mousedown",
  "mousemove",
  "mouseout",
  "mouseover",
  "mouseup",
  "pointerdown",
  "pointermove",
  "pointerout",
  "pointerover",
  "pointerup",
  "touchend",
  "touchmove",
  "touchstart"
];
function cD(B) {
  return DD.includes(B);
}
const oD = {
  // no `class: 'className'` because we handle that separately
  formnovalidate: "formNoValidate",
  ismap: "isMap",
  nomodule: "noModule",
  playsinline: "playsInline",
  readonly: "readOnly",
  defaultvalue: "defaultValue",
  defaultchecked: "defaultChecked",
  srcobject: "srcObject",
  novalidate: "noValidate",
  allowfullscreen: "allowFullscreen",
  disablepictureinpicture: "disablePictureInPicture",
  disableremoteplayback: "disableRemotePlayback"
};
function iD(B) {
  return B = B.toLowerCase(), oD[B] ?? B;
}
function RD(B, A) {
  if (A) {
    const Q = document.body;
    B.autofocus = !0, lE(() => {
      document.activeElement === Q && B.focus();
    });
  }
}
function GD(B) {
  var A = VA, Q = mA;
  VQ(null), rQ(null);
  try {
    return B();
  } finally {
    VQ(A), rQ(Q);
  }
}
const aD = /* @__PURE__ */ new Set(), tD = /* @__PURE__ */ new Set();
function ND(B, A, Q, E = {}) {
  function g(I) {
    if (E.capture || hD.call(A, I), !I.cancelBubble)
      return GD(() => Q?.call(this, I));
  }
  return B.startsWith("pointer") || B.startsWith("touch") || B === "wheel" ? lE(() => {
    A.addEventListener(B, g, E);
  }) : A.addEventListener(B, g, E), g;
}
function lD(B) {
  for (var A = 0; A < B.length; A++)
    aD.add(B[A]);
  for (var Q of tD)
    Q(B);
}
function hD(B) {
  var A = this, Q = (
    /** @type {Node} */
    A.ownerDocument
  ), E = B.type, g = B.composedPath?.() || [], I = (
    /** @type {null | Element} */
    g[0] || B.target
  ), c = 0, t = B.__root;
  if (t) {
    var w = g.indexOf(t);
    if (w !== -1 && (A === document || A === /** @type {any} */
    window)) {
      B.__root = A;
      return;
    }
    var s = g.indexOf(A);
    if (s === -1)
      return;
    w <= s && (c = w);
  }
  if (I = /** @type {Element} */
  g[c] || B.target, I !== A) {
    JC(B, "currentTarget", {
      configurable: !0,
      get() {
        return I || Q;
      }
    });
    var d = VA, y = mA;
    VQ(null), rQ(null);
    try {
      for (var F, J = []; I !== null; ) {
        var p = I.assignedSlot || I.parentNode || /** @type {any} */
        I.host || null;
        try {
          var j = I["__" + E];
          if (j != null && (!/** @type {any} */
          I.disabled || // DOM could've been updated already by the time this is reached, so we check this as well
          // -> the target could not have been disabled because it emits the event in the first place
          B.target === I))
            if (_E(j)) {
              var [P, ...DA] = j;
              P.apply(I, [B, ...DA]);
            } else
              j.call(I, B);
        } catch (X) {
          F ? J.push(X) : F = X;
        }
        if (B.cancelBubble || p === A || p === null)
          break;
        I = p;
      }
      if (F) {
        for (let X of J)
          queueMicrotask(() => {
            throw X;
          });
        throw F;
      }
    } finally {
      B.__root = A, delete B.currentTarget, VQ(d), rQ(y);
    }
  }
}
function wD(B) {
  var A = document.createElement("template");
  return A.innerHTML = B.replaceAll("<!>", "<!---->"), A.content;
}
function SE(B, A) {
  var Q = (
    /** @type {Effect} */
    mA
  );
  Q.nodes_start === null && (Q.nodes_start = B, Q.nodes_end = A);
}
// @__NO_SIDE_EFFECTS__
function tA(B, A) {
  var Q = (A & aC) !== 0, E = (A & tC) !== 0, g, I = !B.startsWith("<!>");
  return () => {
    g === void 0 && (g = wD(I ? B : "<!>" + B), Q || (g = /** @type {Node} */
    /* @__PURE__ */ BE(g)));
    var c = (
      /** @type {TemplateNode} */
      E || HC ? document.importNode(g, !0) : g.cloneNode(!0)
    );
    if (Q) {
      var t = (
        /** @type {TemplateNode} */
        /* @__PURE__ */ BE(c)
      ), w = (
        /** @type {TemplateNode} */
        c.lastChild
      );
      SE(t, w);
    } else
      SE(c, c);
    return c;
  };
}
function YI() {
  var B = document.createDocumentFragment(), A = document.createComment(""), Q = GI();
  return B.append(A, Q), SE(A, Q), B;
}
function cA(B, A) {
  B !== null && B.before(
    /** @type {Node} */
    A
  );
}
function ZA(B, A) {
  var Q = A == null ? "" : typeof A == "object" ? A + "" : A;
  Q !== (B.__t ??= B.nodeValue) && (B.__t = Q, B.nodeValue = Q + "");
}
function KA(B, A, [Q, E] = [0, 0]) {
  var g = B, I = null, c = null, t = hC, w = Q > 0 ? Bg : 0, s = !1;
  const d = (F, J = !0) => {
    s = !0, y(J, F);
  }, y = (F, J) => {
    t !== (t = F) && (t ? (I ? EE(I) : J && (I = DB(() => J(g))), c && HE(c, () => {
      c = null;
    })) : (c ? EE(c) : J && (c = DB(() => J(g, [Q + 1, E]))), I && HE(I, () => {
      I = null;
    })));
  };
  mB(() => {
    s = !1, A(d), s || y(null, null);
  }, w);
}
function CB(B, A) {
  return A;
}
function sD(B, A, Q, E) {
  for (var g = [], I = A.length, c = 0; c < I; c++)
    gg(A[c].e, g, !0);
  var t = I > 0 && g.length === 0 && Q !== null;
  if (t) {
    var w = (
      /** @type {Element} */
      /** @type {Element} */
      Q.parentNode
    );
    KC(w), w.append(
      /** @type {Element} */
      Q
    ), E.clear(), yQ(B, A[0].prev, A[I - 1].next);
  }
  lI(g, () => {
    for (var s = 0; s < I; s++) {
      var d = A[s];
      t || (E.delete(d.k), yQ(B, d.prev, d.next)), nQ(d.e, !t);
    }
  });
}
function UQ(B, A, Q, E, g, I = null) {
  var c = B, t = { flags: A, items: /* @__PURE__ */ new Map(), first: null }, w = (A & qg) !== 0;
  if (w) {
    var s = (
      /** @type {Element} */
      B
    );
    c = s.appendChild(GI());
  }
  var d = null, y = !1, F = /* @__PURE__ */ pC(() => {
    var J = Q();
    return _E(J) ? J : J == null ? [] : $g(J);
  });
  mB(() => {
    var J = U(F), p = J.length;
    y && p === 0 || (y = p === 0, FD(J, t, c, g, A, E, Q), I !== null && (p === 0 ? d ? EE(d) : d = DB(() => I(c)) : d !== null && HE(d, () => {
      d = null;
    })), U(F));
  });
}
function FD(B, A, Q, E, g, I, c) {
  var t = (g & RC) !== 0, w = (g & (qE | PE)) !== 0, s = B.length, d = A.items, y = A.first, F = y, J, p = null, j, P = [], DA = [], X, S, b, u;
  if (t)
    for (u = 0; u < s; u += 1)
      X = B[u], S = I(X, u), b = d.get(S), b !== void 0 && (b.a?.measure(), (j ??= /* @__PURE__ */ new Set()).add(b));
  for (u = 0; u < s; u += 1) {
    if (X = B[u], S = I(X, u), b = d.get(S), b === void 0) {
      var q = F ? (
        /** @type {TemplateNode} */
        F.e.nodes_start
      ) : Q;
      p = eD(
        q,
        A,
        p,
        p === null ? A.first : p.next,
        X,
        S,
        u,
        E,
        g,
        c
      ), d.set(S, p), P = [], DA = [], F = p.next;
      continue;
    }
    if (w && nD(b, X, u, g), (b.e.f & FQ) !== 0 && (EE(b.e), t && (b.a?.unfix(), (j ??= /* @__PURE__ */ new Set()).delete(b))), b !== F) {
      if (J !== void 0 && J.has(b)) {
        if (P.length < DA.length) {
          var FA = DA[0], wA;
          p = FA.prev;
          var LA = P[0], XA = P[P.length - 1];
          for (wA = 0; wA < P.length; wA += 1)
            eg(P[wA], FA, Q);
          for (wA = 0; wA < DA.length; wA += 1)
            J.delete(DA[wA]);
          yQ(A, LA.prev, XA.next), yQ(A, p, LA), yQ(A, XA, FA), F = FA, p = XA, u -= 1, P = [], DA = [];
        } else
          J.delete(b), eg(b, F, Q), yQ(A, b.prev, b.next), yQ(A, b, p === null ? A.first : p.next), yQ(A, p, b), p = b;
        continue;
      }
      for (P = [], DA = []; F !== null && F.k !== S; )
        (F.e.f & FQ) === 0 && (J ??= /* @__PURE__ */ new Set()).add(F), DA.push(F), F = F.next;
      if (F === null)
        continue;
      b = F;
    }
    P.push(b), p = b, F = b.next;
  }
  if (F !== null || J !== void 0) {
    for (var sA = J === void 0 ? [] : $g(J); F !== null; )
      (F.e.f & FQ) === 0 && sA.push(F), F = F.next;
    var rA = sA.length;
    if (rA > 0) {
      var CQ = (g & qg) !== 0 && s === 0 ? Q : null;
      if (t) {
        for (u = 0; u < rA; u += 1)
          sA[u].a?.measure();
        for (u = 0; u < rA; u += 1)
          sA[u].a?.fix();
      }
      sD(A, sA, CQ, d);
    }
  }
  t && lE(() => {
    if (j !== void 0)
      for (b of j)
        b.a?.apply();
  }), mA.first = A.first && A.first.e, mA.last = p && p.e;
}
function nD(B, A, Q, E) {
  (E & qE) !== 0 && Fg(B.v, A), (E & PE) !== 0 ? Fg(
    /** @type {Value<number>} */
    B.i,
    Q
  ) : B.i = Q;
}
function eD(B, A, Q, E, g, I, c, t, w, s) {
  var d = (w & qE) !== 0, y = (w & GC) === 0, F = d ? y ? /* @__PURE__ */ OC(g) : xE(g) : g, J = (w & PE) === 0 ? c : xE(c), p = {
    i: J,
    v: F,
    k: I,
    a: null,
    // @ts-expect-error
    e: null,
    prev: Q,
    next: E
  };
  try {
    return p.e = DB(() => t(B, F, J, s), xC), p.e.prev = Q && Q.e, p.e.next = E && E.e, Q === null ? A.first = p : (Q.next = p, Q.e.next = p.e), E !== null && (E.prev = p, E.e.prev = p.e), p;
  } finally {
  }
}
function eg(B, A, Q) {
  for (var E = B.next ? (
    /** @type {TemplateNode} */
    B.next.e.nodes_start
  ) : Q, g = A ? (
    /** @type {TemplateNode} */
    A.e.nodes_start
  ) : Q, I = (
    /** @type {TemplateNode} */
    B.e.nodes_start
  ); I !== E; ) {
    var c = (
      /** @type {TemplateNode} */
      /* @__PURE__ */ tE(I)
    );
    g.before(I), I = c;
  }
}
function yQ(B, A, Q) {
  A === null ? B.first = Q : (A.next = Q, A.e.next = Q && Q.e), Q !== null && (Q.prev = A, Q.e.prev = A && A.e);
}
function wE(B, A) {
  lE(() => {
    var Q = B.getRootNode(), E = (
      /** @type {ShadowRoot} */
      Q.host ? (
        /** @type {ShadowRoot} */
        Q
      ) : (
        /** @type {Document} */
        Q.head ?? /** @type {Document} */
        Q.ownerDocument.head
      )
    );
    if (!E.querySelector("#" + A.hash)) {
      const g = document.createElement("style");
      g.id = A.hash, g.textContent = A.code, E.appendChild(g);
    }
  });
}
function YD(B, A) {
  var Q = void 0, E;
  mB(() => {
    Q !== (Q = A()) && (E && (nQ(E), E = null), Q && (E = DB(() => {
      Eg(() => (
        /** @type {(node: Element) => void} */
        Q(B)
      ));
    })));
  });
}
function Cg(B, A, Q, E, g, I) {
  var c = B.__className;
  if (c !== Q || c === void 0) {
    var t = nC(Q, E, I);
    t == null ? B.removeAttribute("class") : A ? B.className = t : B.setAttribute("class", t), B.__className = Q;
  } else if (I && g !== I)
    for (var w in I) {
      var s = !!I[w];
      (g == null || s !== !!g[w]) && B.classList.toggle(w, s);
    }
  return I;
}
function ZE(B, A = {}, Q, E) {
  for (var g in Q) {
    var I = Q[g];
    A[g] !== I && (Q[g] == null ? B.style.removeProperty(g) : B.style.setProperty(g, I, E));
  }
}
function JD(B, A, Q, E) {
  var g = B.__style;
  if (g !== A) {
    var I = eC(A, E);
    I == null ? B.removeAttribute("style") : B.style.cssText = I, B.__style = A;
  } else E && (Array.isArray(E) ? (ZE(B, Q?.[0], E[0]), ZE(B, Q?.[1], E[1], "important")) : ZE(B, Q, E));
  return E;
}
function KE(B, A, Q) {
  if (B.multiple) {
    if (A == null)
      return;
    if (!_E(A))
      return uC();
    for (var E of B.options)
      E.selected = A.includes(Yg(E));
    return;
  }
  for (E of B.options) {
    var g = Yg(E);
    if (rC(g, A)) {
      E.selected = !0;
      return;
    }
  }
  (!Q || A !== void 0) && (B.selectedIndex = -1);
}
function ZD(B, A) {
  let Q = !0;
  Eg(() => {
    A && KE(B, gD(A), Q), Q = !1;
    var E = new MutationObserver(() => {
      var g = B.__value;
      KE(B, g);
    });
    return E.observe(B, {
      // Listen to option element changes
      childList: !0,
      subtree: !0,
      // because of <optgroup>
      // Listen to option element value attribute changes
      // (doesn't get notified of select value changes,
      // because that property is not reflected as an attribute)
      attributes: !0,
      attributeFilter: ["value"]
    }), () => {
      E.disconnect();
    };
  });
}
function Yg(B) {
  return "__value" in B ? B.__value : B.value;
}
const aB = Symbol("class"), tB = Symbol("style"), JI = Symbol("is custom element"), ZI = Symbol("is html");
function dD(B, A) {
  A ? B.hasAttribute("selected") || B.setAttribute("selected", "") : B.removeAttribute("selected");
}
function oA(B, A, Q, E) {
  var g = dI(B);
  g[A] !== (g[A] = Q) && (A === "loading" && (B[kC] = Q), Q == null ? B.removeAttribute(A) : typeof Q != "string" && yI(B).includes(A) ? B[A] = Q : B.setAttribute(A, Q));
}
function yD(B, A, Q, E, g = !1) {
  var I = dI(B), c = I[JI], t = !I[ZI], w = A || {}, s = B.tagName === "OPTION";
  for (var d in A)
    d in Q || (Q[d] = null);
  Q.class ? Q.class = _g(Q.class) : Q[aB] && (Q.class = null), Q[tB] && (Q.style ??= null);
  var y = yI(B);
  for (const X in Q) {
    let S = Q[X];
    if (s && X === "value" && S == null) {
      B.value = B.__value = "", w[X] = S;
      continue;
    }
    if (X === "class") {
      var F = B.namespaceURI === "http://www.w3.org/1999/xhtml";
      Cg(B, F, S, E, A?.[aB], Q[aB]), w[X] = S, w[aB] = Q[aB];
      continue;
    }
    if (X === "style") {
      JD(B, S, A?.[tB], Q[tB]), w[X] = S, w[tB] = Q[tB];
      continue;
    }
    var J = w[X];
    if (S !== J) {
      w[X] = S;
      var p = X[0] + X[1];
      if (p !== "$$")
        if (p === "on") {
          const b = {}, u = "$$" + X;
          let q = X.slice(2);
          var j = cD(q);
          if (CD(q) && (q = q.slice(0, -7), b.capture = !0), !j && J) {
            if (S != null) continue;
            B.removeEventListener(q, w[u], b), w[u] = null;
          }
          if (S != null)
            if (j)
              B[`__${q}`] = S, lD([q]);
            else {
              let FA = function(wA) {
                w[X].call(this, wA);
              };
              w[u] = ND(q, B, FA, b);
            }
          else j && (B[`__${q}`] = void 0);
        } else if (X === "style")
          oA(B, X, S);
        else if (X === "autofocus")
          RD(
            /** @type {HTMLElement} */
            B,
            !!S
          );
        else if (!c && (X === "__value" || X === "value" && S != null))
          B.value = B.__value = S;
        else if (X === "selected" && s)
          dD(
            /** @type {HTMLOptionElement} */
            B,
            S
          );
        else {
          var P = X;
          t || (P = iD(P));
          var DA = P === "defaultValue" || P === "defaultChecked";
          if (S == null && !c && !DA)
            if (I[X] = null, P === "value" || P === "checked") {
              let b = (
                /** @type {HTMLInputElement} */
                B
              );
              const u = A === void 0;
              if (P === "value") {
                let q = b.defaultValue;
                b.removeAttribute(P), b.defaultValue = q, b.value = b.__value = u ? q : null;
              } else {
                let q = b.defaultChecked;
                b.removeAttribute(P), b.defaultChecked = q, b.checked = u ? q : !1;
              }
            } else
              B.removeAttribute(X);
          else DA || y.includes(P) && (c || typeof S != "string") ? B[P] = S : typeof S != "function" && oA(B, P, S);
        }
    }
  }
  return w;
}
function bD(B, A, Q = [], E, g = !1, I = aE) {
  const c = Q.map(I);
  var t = void 0, w = {}, s = B.nodeName === "SELECT", d = !1;
  mB(() => {
    var y = A(...c.map(U));
    yD(B, t, y, E, g), d && s && "value" in y && KE(
      /** @type {HTMLSelectElement} */
      B,
      y.value,
      !1
    );
    for (let J of Object.getOwnPropertySymbols(w))
      y[J] || nQ(w[J]);
    for (let J of Object.getOwnPropertySymbols(y)) {
      var F = y[J];
      J.description === sC && (!t || F !== t[J]) && (w[J] && nQ(w[J]), w[J] = DB(() => YD(B, () => F)));
    }
    t = y;
  }), s && ZD(
    /** @type {HTMLSelectElement} */
    B,
    () => (
      /** @type {Record<string | symbol, any>} */
      t.value
    )
  ), d = !0;
}
function dI(B) {
  return (
    /** @type {Record<string | symbol, unknown>} **/
    // @ts-expect-error
    B.__attributes ??= {
      [JI]: B.nodeName.includes("-"),
      [ZI]: B.namespaceURI === wC
    }
  );
}
var Jg = /* @__PURE__ */ new Map();
function yI(B) {
  var A = Jg.get(B.nodeName);
  if (A) return A;
  Jg.set(B.nodeName, A = []);
  for (var Q, E = B, g = Element.prototype; g !== E; ) {
    Q = ZC(E);
    for (var I in Q)
      Q[I].set && A.push(I);
    E = dC(E);
  }
  return A;
}
const mD = {
  get(B, A) {
    if (!B.exclude.includes(A))
      return B.props[A];
  },
  set(B, A) {
    return !1;
  },
  getOwnPropertyDescriptor(B, A) {
    if (!B.exclude.includes(A) && A in B.props)
      return {
        enumerable: !0,
        configurable: !0,
        value: B.props[A]
      };
  },
  has(B, A) {
    return B.exclude.includes(A) ? !1 : A in B.props;
  },
  ownKeys(B) {
    return Reflect.ownKeys(B.props).filter((A) => !B.exclude.includes(A));
  }
};
// @__NO_SIDE_EFFECTS__
function kD(B, A, Q) {
  return new Proxy(
    { props: B, exclude: A },
    mD
  );
}
var ZB = null;
function MD(B) {
  ZB = { p: ZB, c: null, d: null };
}
function UD() {
  var B = (
    /** @type {Component} */
    ZB
  ), A = B.d;
  A && sB.push(...A), ZB = B.p;
}
const WD = `<!--${NC}-->`, VD = `<!--${lC}-->`;
class rD {
  /** @type {Set<{ hash: string; code: string }>} */
  css = /* @__PURE__ */ new Set();
  out = "";
  uid = () => "";
  title = "";
  constructor(A = /* @__PURE__ */ new Set(), Q = "", E = "", g = () => "") {
    this.css = A, this.out = Q, this.title = E, this.uid = g;
  }
}
class pD {
  /** @type {Set<{ hash: string; code: string }>} */
  css = /* @__PURE__ */ new Set();
  out = "";
  uid = () => "";
  select_value = void 0;
  head = new rD();
  constructor(A = "") {
    this.uid = XD(A), this.head.uid = this.uid;
  }
}
function XD(B) {
  let A = 1;
  return () => `${B}s${A++}`;
}
let sB = [];
function OD(B, A = {}) {
  const Q = new pD(A.idPrefix ? A.idPrefix + "-" : ""), E = sB;
  sB = [], Q.out += WD, A.context && (MD(), ZB.c = A.context), B(Q, A.props ?? {}, {}, {}), A.context && UD(), Q.out += VD;
  for (const I of sB) I();
  sB = E;
  let g = Q.head.out + Q.head.title;
  for (const { hash: I, code: c } of Q.css)
    g += `<style id="${I}">${c}</style>`;
  return {
    head: g,
    html: Q.out,
    body: Q.out
  };
}
const uD = "5";
typeof window < "u" && ((window.__svelte ??= {}).v ??= /* @__PURE__ */ new Set()).add(uD);
class $A {
}
class UB extends $A {
  [Symbol.iterator]() {
    return this.gen();
  }
  constructor(A) {
    super(), this.gen = A;
  }
  gen;
}
function Dg(B) {
  return new UB(function* () {
    const A = B();
    for (const Q of A)
      yield Q;
  });
}
function GQ(B) {
  return Dg(function* () {
    for (const A of B)
      yield A;
  });
}
function xD(B, A) {
  let Q = B, E = 0;
  for (const g of this)
    Q = A(Q, g, E++);
  return Q;
}
$A.prototype.aggregate = xD;
function HD(B = (A) => !0) {
  let A = 0;
  for (const Q of this)
    if (B(Q, A++))
      return !0;
  return !1;
}
$A.prototype.any = HD;
function jD() {
  const B = this.aggregate(
    {
      tot: 0,
      count: 0
    },
    (A, Q) => (A.tot += Q, A.count++, A)
  );
  if (B.count === 0)
    throw Error("sequence contains no elements");
  return B.tot / B.count;
}
$A.prototype.average = jD;
function SD(B) {
  const A = this;
  let Q = 0;
  for (const E of A) {
    const g = Q++;
    B(E, g);
  }
}
$A.prototype.forEach = SD;
class FB extends UB {
  constructor(A) {
    super(function* () {
      for (const Q of A)
        yield Q;
    });
  }
}
class KD extends FB {
  _key;
  get key() {
    return this._key;
  }
  constructor(A, Q) {
    super(Q), this._key = A;
  }
}
function LD(B, A) {
  return this.toLookup(B, A).select(([E, g]) => new KD(E, g));
}
$A.prototype.groupBy = LD;
function fD(B) {
  const A = this;
  return Dg(function* () {
    let Q = 0;
    for (const E of A)
      B(E, Q++) && (yield E);
  });
}
$A.prototype.where = fD;
class nB {
  static create() {
    return new nB();
  }
  thenKey(A) {
    return this.sortKey(A);
  }
  thenKeyDescending(A) {
    return this.sortKeyDescending(A);
  }
  comparers;
  constructor(A = void 0) {
    this.comparers = A || [];
  }
  sortKey(A) {
    const Q = this.createComparer(
      A,
      (g, I) => g < I ? -1 : g > I ? 1 : 0
    ), E = [...this.comparers];
    return E.push(Q), new nB(E);
  }
  sortKeyDescending(A) {
    const Q = this.createComparer(
      A,
      (g, I) => g < I ? 1 : g > I ? -1 : 0
    ), E = [...this.comparers];
    return E.push(Q), new nB(E);
  }
  createComparer(A, Q) {
    return (E, g) => {
      const I = A(E), c = A(g);
      return Q(I, c);
    };
  }
  build() {
    return (A, Q) => {
      for (let E = 0; E < this.comparers.length; E++) {
        const g = this.comparers[E], I = g(A, Q);
        if (I !== 0)
          return I;
      }
      return 0;
    };
  }
}
class cE extends UB {
  src;
  comparerBuilder;
  depth;
  constructor(A, Q, E = 0) {
    const g = Q.build();
    super(function* () {
      const I = [...A].sort(g);
      for (const c of I)
        yield c.item;
    }), this.src = A, this.comparerBuilder = Q, this.depth = E;
  }
  thenBy(A) {
    const Q = this.src.select((g) => ({
      ...g,
      orders: [...g.orders, A(g.item)]
    })), E = this.comparerBuilder.thenKey((g) => g.orders[this.depth + 1]);
    return new cE(Q, E, this.depth + 1);
  }
  thenByDescending(A) {
    const Q = this.src.select((g) => ({
      ...g,
      orders: [...g.orders, A(g.item)]
    })), E = this.comparerBuilder.thenKeyDescending((g) => g.orders[this.depth + 1]);
    return new cE(Q, E, this.depth + 1);
  }
}
function vD(B) {
  const A = this.select((E) => ({
    item: E,
    orders: [B(E)]
  })), Q = nB.create().sortKey((E) => E.orders[0]);
  return new cE(A, Q);
}
$A.prototype.orderBy = vD;
function TD(B) {
  const A = this;
  return new UB(function* () {
    let Q = 0;
    for (const E of A)
      yield B(E, Q++);
  });
}
$A.prototype.select = TD;
function zD(B) {
  const A = this;
  return Dg(function* () {
    let Q = 0;
    for (const E of A)
      for (const g of B(E, Q++))
        yield g;
  });
}
$A.prototype.selectMany = zD;
function qD(B = () => !0) {
  let A = 0;
  for (const Q of this)
    if (B(Q, A++))
      return Q;
}
$A.prototype.firstOrDefault = qD;
const PD = {};
function _D(B = (A) => !0) {
  let A = 0, Q = PD, E = 0;
  for (const g of this)
    if (B(g, E++)) {
      if (++A, A > 1)
        throw Error("sequence contains more than one element");
      Q = g;
    }
  if (A === 1)
    return Q;
}
$A.prototype.singleOrDefault = _D;
function $D() {
  return [...this];
}
$A.prototype.toArray = $D;
class Ac extends UB {
  // @propertyIsEnumerable(false)
  _underlyingArray;
  constructor(A) {
    super(function* () {
      for (const Q of A)
        yield Q;
    }), this._underlyingArray = A;
  }
  push(A) {
    this._underlyingArray.push(A);
  }
}
const Qc = [
  3,
  7,
  11,
  17,
  23,
  29,
  37,
  47,
  59,
  71,
  89,
  107,
  131,
  163,
  197,
  239,
  293,
  353,
  431,
  521,
  631,
  761,
  919,
  1103,
  1327,
  1597,
  1931,
  2333,
  2801,
  3371,
  4049,
  4861,
  5839,
  7013,
  8419,
  10103,
  12143,
  14591,
  17519,
  21023,
  25229,
  30293,
  36353,
  43627,
  52361,
  62851,
  75431,
  90523,
  108631,
  130363,
  156437,
  187751,
  225307,
  270371,
  324449,
  389357,
  467237,
  560689,
  672827,
  807403,
  968897,
  1162687,
  1395263,
  1674319,
  2009191,
  2411033,
  2893249,
  3471899,
  4166287,
  4999559,
  5999471,
  7199369
], Bc = (B) => {
  for (const A of Qc)
    if (A >= B)
      return new Array(A);
  throw Error("too large");
}, Ec = (B, A) => (B % A + A) % A, SB = (B, A, { getHashCode: Q }, E = !1) => {
  const g = Q(B), I = Ec(g, A.length), c = A[I];
  return c || (E ? A[I] = [] : null);
}, gc = (B, A, { equals: Q, getHashCode: E }, g) => {
  const I = GQ(A).where((t) => typeof t < "u").selectMany((t) => t), c = g(B, { equals: Q, getHashCode: E });
  return I.forEach(([t, w, s]) => c.add(t, w, s)), c.buckets;
};
class Ic {
  buckets;
  count;
  avgBucketFill;
  comparer;
  insertCount;
  initialCapacity;
  hashTableFactory;
  constructor(A, Q, E, g, I, c) {
    this.buckets = A, this.count = Q, this.avgBucketFill = E, this.comparer = I, this.insertCount = 0, this.initialCapacity = g, this.hashTableFactory = c;
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  entries() {
    return [
      ...GQ(this.buckets).selectMany((Q) => Q || []).orderBy(([, , Q]) => Q).select(([Q, E]) => [Q, E])
    ][Symbol.iterator]();
  }
  keys() {
    return [...GQ(this.entries()).select(([Q]) => Q)][Symbol.iterator]();
  }
  values() {
    return [...GQ(this.entries()).select(([, Q]) => Q)][Symbol.iterator]();
  }
  clear() {
    const A = this.hashTableFactory(this.initialCapacity, this.comparer).buckets;
    this.buckets = A, this.count = 0, this.insertCount = 0;
  }
  delete(A) {
    const Q = SB(A, this.buckets, this.comparer);
    if (Q === null)
      return !1;
    const E = GQ(Q).select(([g, I], c) => ({ k: g, v: I, i: c })).where(({ k: g }) => this.comparer.equals(g, A)).select(({ i: g }) => g).singleOrDefault();
    return typeof E > "u" ? !1 : (Q.splice(E, 1), --this.count, !0);
  }
  forEach(A, Q) {
    const E = Q ? A.bind(Q) : A;
    GQ(this.entries()).forEach(([g, I]) => E(I, g, this));
  }
  set(A, Q) {
    return this.add(A, Q), this;
  }
  has(A) {
    const Q = SB(A, this.buckets, this.comparer);
    return Q === null ? !1 : GQ(Q).any(([E]) => this.comparer.equals(E, A));
  }
  get size() {
    return this.count;
  }
  add(A, Q, E) {
    (this.count / this.avgBucketFill | 0) >= this.buckets.length && (this.buckets = gc(
      this.count * 2,
      this.buckets,
      this.comparer,
      this.hashTableFactory
    ));
    const I = SB(A, this.buckets, this.comparer, !0);
    return I.every(([t]) => !this.comparer.equals(A, t)) ? (this.count++, I.push([
      A,
      Q,
      typeof E > "u" ? this.insertCount++ : E
    ]), !0) : !1;
  }
  get(A) {
    const Q = SB(A, this.buckets, this.comparer);
    return Q ? GQ(Q).where(([E]) => this.comparer.equals(E, A)).select(([, E]) => E).firstOrDefault() : void 0;
  }
  [Symbol.toStringTag];
  /* istanbul ignore next */
  toString() {
    const A = GQ(this.buckets).select((E) => E ? E.length : 0), Q = A.average();
    return JSON.stringify(
      { counts: [...A].join(","), avgBucketFill: Q },
      null,
      2
    );
  }
}
const bI = (B, A) => {
  const g = B / 2 | 0, I = Bc(
    g
  );
  return new Ic(
    I,
    0,
    2,
    B,
    A,
    bI
  );
};
class Cc extends FB {
  _underlyingMap;
  constructor(A) {
    super(A), this._underlyingMap = A;
  }
  keys() {
    return new FB(this._underlyingMap.keys());
  }
  entries() {
    return new FB(this._underlyingMap.entries());
  }
  values() {
    return new FB(this._underlyingMap.values());
  }
  has(A) {
    return this._underlyingMap.has(A);
  }
  get(A) {
    return this._underlyingMap.get(A);
  }
  convertToObject() {
    return this.entries().aggregate({}, (A, [Q, E]) => (A[Q] = E, A));
  }
}
const Dc = (B) => B != null && typeof B.equals == "function" && typeof B.getHashCode == "function", cc = (B) => typeof B == "function", oc = (B = 0, A) => A ? bI(B, A) : /* @__PURE__ */ new Map();
function ic(B, A, Q) {
  let E, g;
  Dc(A) ? E = A : (E = Q, cc(A) && (g = A));
  const I = g || ((w) => w), c = oc(
    0,
    E
  );
  let t = 0;
  for (const w of this) {
    const s = t++, d = B(w, s), y = c.get(d) || new Ac([]);
    c.set(d, y), y.push(I(w, s));
  }
  return new Cc(c);
}
$A.prototype.toLookup = ic;
const Rc = (B, A, Q) => [...B].reduce(
  (E, g) => Math.imul(E, 31) + Q(g, A),
  1
), Zg = 737245463, Gc = (B) => B.length === 0 ? Zg : B.split("").reduce(
  (A, Q) => (A << 5) - A + Q.charCodeAt(0) | 0,
  Zg
), mI = (B, A) => {
  const Q = A || /* @__PURE__ */ new Set(), E = typeof B;
  switch (E) {
    case "string":
      return Gc(B);
  }
  if (E === "object" && B[Symbol.iterator])
    return Rc(B, Q, mI);
  throw Error("not supported type: " + E);
};
function ac(B) {
  return GQ(B);
}
class tc {
  heading = void 0;
  icon = "work";
  experienceKind = "professional";
}
class Nc {
  heading = {
    id: "ed",
    title: "Education"
  };
  icon = "education";
  experienceKind = void 0;
}
class lc {
  heading = {
    id: "cert",
    title: "Certificates"
  };
  icon = "certificates";
  experienceKind = void 0;
}
var hc = /* @__PURE__ */ tA('<tr><td colspan="2" style="width: 170px" class="contact-details__text"><p> </p></td><td style="width: 18px" class="contact-details__icon location"></td></tr>'), wc = /* @__PURE__ */ tA('<tr><td colspan="2" style="width: 170px" class="contact-details__text"><p> </p></td><td style="width: 18px" class="contact-details__icon phone"></td></tr>'), sc = /* @__PURE__ */ tA('<tr><td colspan="2" style="width: 170px" class="contact-details__link"><a class="contact-email" rel="external nofollow noopener noreferrer" target="blank"> </a></td><td style="width: 18px" class="contact-details__icon email"></td></tr>'), Fc = /* @__PURE__ */ tA('<tr><td colspan="2" style="width: 170px" class="contact-details__link"><a class="contact-profile" rel="external nofollow noopener noreferrer" target="blank"> </a></td><td style="width: 18px"></td></tr>'), nc = /* @__PURE__ */ tA("<section><table><tbody><!><!><!><!></tbody></table></section>");
const ec = {
  hash: "svelte-iorrj",
  code: `
	@import '@/styles/blocks/resume/_contact-details.scss';`
};
function Yc(B, A) {
  wE(B, ec);
  const Q = /* @__PURE__ */ kD(A, ["$$slots", "$$events", "$$legacy", "basics"]), E = /* @__PURE__ */ bA(() => A.basics.location), g = /* @__PURE__ */ bA(() => A.basics.phone), I = /* @__PURE__ */ bA(() => A.basics.email), c = /* @__PURE__ */ bA(() => bC(A.basics.profiles, () => [], !0));
  var t = nc();
  bD(t, () => ({ class: "contact-details", ...Q }));
  var w = x(t);
  oA(w, "border", 0), oA(w, "width", 175.47);
  var s = x(w), d = x(s);
  {
    var y = (X) => {
      var S = hc(), b = x(S), u = x(b), q = x(u);
      JA(() => {
        oA(b, "aria-label", `${U(E).city}, ${U(E).region}`), ZA(q, `${U(E).city ?? ""}, ${U(E).region ?? ""}`);
      }), cA(X, S);
    };
    KA(d, (X) => {
      U(E) && X(y);
    });
  }
  var F = lA(d);
  {
    var J = (X) => {
      var S = wc(), b = x(S), u = x(b), q = x(u);
      JA(() => ZA(q, U(g))), cA(X, S);
    };
    KA(F, (X) => {
      U(g) && X(J);
    });
  }
  var p = lA(F);
  {
    var j = (X) => {
      var S = sc(), b = x(S), u = x(b), q = x(u);
      JA(() => {
        oA(u, "href", `mailto:${U(I) ?? ""}`), ZA(q, U(I));
      }), cA(X, S);
    };
    KA(p, (X) => {
      U(I) && X(j);
    });
  }
  var P = lA(p);
  {
    var DA = (X) => {
      var S = YI(), b = IB(S);
      UQ(b, 17, () => U(c), (u) => u.network, (u, q) => {
        var FA = Fc(), wA = x(FA), LA = x(wA), XA = x(LA), sA = lA(wA);
        JA(
          (rA) => {
            oA(LA, "href", U(q).url), ZA(XA, U(q).username), Cg(sA, 1, `contact-details__icon ${rA ?? ""}`);
          },
          [
            () => U(q).network.toLowerCase()
          ]
        ), cA(u, FA);
      }), cA(X, S);
    };
    KA(P, (X) => {
      U(c) && X(DA);
    });
  }
  cA(B, t);
}
var Jc = /* @__PURE__ */ tA("<cite> </cite>"), Zc = /* @__PURE__ */ tA("<p></p>");
const dc = {
  hash: "svelte-1fbiffj",
  code: `
	@import '@/styles/blocks/resume/_tags-catalog.scss';`
};
function dg(B, A) {
  wE(B, dc);
  var Q = Zc();
  UQ(Q, 21, () => A.labels, CB, (E, g) => {
    var I = Jc(), c = x(I);
    JA(() => {
      oA(I, "aria-label", U(g)), ZA(c, `${U(g) ?? ""} `);
    }), cA(E, I);
  }), cA(B, Q);
}
const yc = { sources: { avif: "/ColumbiaState.avif 42w", webp: "/ColumbiaState.webp 42w" }, img: { src: "/ColumbiaState.png", w: 42, h: 42 } }, bc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: yc
}, Symbol.toStringTag, { value: "Module" })), mc = { sources: { avif: "/Developing_ASP.NET_MVC_Web_Applications-Certification.avif 42w", webp: "/Developing_ASP.NET_MVC_Web_Applications-Certification.webp 42w" }, img: { src: "/Developing_ASP.NET_MVC_Web_Applications-Certification.png", w: 42, h: 42 } }, kc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: mc
}, Symbol.toStringTag, { value: "Module" })), Mc = { sources: { avif: "/HCA.avif 42w", webp: "/HCA.webp 42w" }, img: { src: "/HCA.png", w: 42, h: 42 } }, Uc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Mc
}, Symbol.toStringTag, { value: "Module" })), Wc = { sources: { avif: "/MTSU.avif 42w", webp: "/MTSU.webp 42w" }, img: { src: "/MTSU.png", w: 42, h: 27 } }, Vc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Wc
}, Symbol.toStringTag, { value: "Module" })), rc = { sources: { avif: "/MiraTech_Quovant.avif 42w", webp: "/MiraTech_Quovant.webp 42w" }, img: { src: "/MiraTech_Quovant.jpeg", w: 42, h: 42 } }, pc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: rc
}, Symbol.toStringTag, { value: "Module" })), Xc = { sources: { avif: "/Quovant.avif 42w", webp: "/Quovant.webp 42w" }, img: { src: "/Quovant.png", w: 42, h: 44 } }, Oc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Xc
}, Symbol.toStringTag, { value: "Module" })), kI = 6048e5, uc = 864e5, MI = 6e4, UI = 36e5, yg = Symbol.for("constructDateFrom");
function eQ(B, A) {
  return typeof B == "function" ? B(A) : B && typeof B == "object" && yg in B ? B[yg](A) : B instanceof Date ? new B.constructor(A) : new Date(A);
}
function QQ(B, A) {
  return eQ(A || B, B);
}
let xc = {};
function sE() {
  return xc;
}
function dB(B, A) {
  const Q = sE(), E = A?.weekStartsOn ?? A?.locale?.options?.weekStartsOn ?? Q.weekStartsOn ?? Q.locale?.options?.weekStartsOn ?? 0, g = QQ(B, A?.in), I = g.getDay(), c = (I < E ? 7 : 0) + I - E;
  return g.setDate(g.getDate() - c), g.setHours(0, 0, 0, 0), g;
}
function oE(B, A) {
  return dB(B, { ...A, weekStartsOn: 1 });
}
function WI(B, A) {
  const Q = QQ(B, A?.in), E = Q.getFullYear(), g = eQ(Q, 0);
  g.setFullYear(E + 1, 0, 4), g.setHours(0, 0, 0, 0);
  const I = oE(g), c = eQ(Q, 0);
  c.setFullYear(E, 0, 4), c.setHours(0, 0, 0, 0);
  const t = oE(c);
  return Q.getTime() >= I.getTime() ? E + 1 : Q.getTime() >= t.getTime() ? E : E - 1;
}
function bg(B) {
  const A = QQ(B), Q = new Date(
    Date.UTC(
      A.getFullYear(),
      A.getMonth(),
      A.getDate(),
      A.getHours(),
      A.getMinutes(),
      A.getSeconds(),
      A.getMilliseconds()
    )
  );
  return Q.setUTCFullYear(A.getFullYear()), +B - +Q;
}
function Hc(B, ...A) {
  const Q = eQ.bind(
    null,
    A.find((E) => typeof E == "object")
  );
  return A.map(Q);
}
function mg(B, A) {
  const Q = QQ(B, A?.in);
  return Q.setHours(0, 0, 0, 0), Q;
}
function jc(B, A, Q) {
  const [E, g] = Hc(
    Q?.in,
    B,
    A
  ), I = mg(E), c = mg(g), t = +I - bg(I), w = +c - bg(c);
  return Math.round((t - w) / uc);
}
function Sc(B, A) {
  const Q = WI(B, A), E = eQ(B, 0);
  return E.setFullYear(Q, 0, 4), E.setHours(0, 0, 0, 0), oE(E);
}
function Kc(B) {
  return B instanceof Date || typeof B == "object" && Object.prototype.toString.call(B) === "[object Date]";
}
function Lc(B) {
  return !(!Kc(B) && typeof B != "number" || isNaN(+QQ(B)));
}
function fc(B, A) {
  const Q = QQ(B, A?.in);
  return Q.setFullYear(Q.getFullYear(), 0, 1), Q.setHours(0, 0, 0, 0), Q;
}
const vc = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
}, Tc = (B, A, Q) => {
  let E;
  const g = vc[B];
  return typeof g == "string" ? E = g : A === 1 ? E = g.one : E = g.other.replace("{{count}}", A.toString()), Q?.addSuffix ? Q.comparison && Q.comparison > 0 ? "in " + E : E + " ago" : E;
};
function dE(B) {
  return (A = {}) => {
    const Q = A.width ? String(A.width) : B.defaultWidth;
    return B.formats[Q] || B.formats[B.defaultWidth];
  };
}
const zc = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
}, qc = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
}, Pc = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
}, _c = {
  date: dE({
    formats: zc,
    defaultWidth: "full"
  }),
  time: dE({
    formats: qc,
    defaultWidth: "full"
  }),
  dateTime: dE({
    formats: Pc,
    defaultWidth: "full"
  })
}, $c = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
}, Ao = (B, A, Q, E) => $c[B];
function NB(B) {
  return (A, Q) => {
    const E = Q?.context ? String(Q.context) : "standalone";
    let g;
    if (E === "formatting" && B.formattingValues) {
      const c = B.defaultFormattingWidth || B.defaultWidth, t = Q?.width ? String(Q.width) : c;
      g = B.formattingValues[t] || B.formattingValues[c];
    } else {
      const c = B.defaultWidth, t = Q?.width ? String(Q.width) : B.defaultWidth;
      g = B.values[t] || B.values[c];
    }
    const I = B.argumentCallback ? B.argumentCallback(A) : A;
    return g[I];
  };
}
const Qo = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
}, Bo = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
}, Eo = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ]
}, go = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
}, Io = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
}, Co = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
}, Do = (B, A) => {
  const Q = Number(B), E = Q % 100;
  if (E > 20 || E < 10)
    switch (E % 10) {
      case 1:
        return Q + "st";
      case 2:
        return Q + "nd";
      case 3:
        return Q + "rd";
    }
  return Q + "th";
}, co = {
  ordinalNumber: Do,
  era: NB({
    values: Qo,
    defaultWidth: "wide"
  }),
  quarter: NB({
    values: Bo,
    defaultWidth: "wide",
    argumentCallback: (B) => B - 1
  }),
  month: NB({
    values: Eo,
    defaultWidth: "wide"
  }),
  day: NB({
    values: go,
    defaultWidth: "wide"
  }),
  dayPeriod: NB({
    values: Io,
    defaultWidth: "wide",
    formattingValues: Co,
    defaultFormattingWidth: "wide"
  })
};
function lB(B) {
  return (A, Q = {}) => {
    const E = Q.width, g = E && B.matchPatterns[E] || B.matchPatterns[B.defaultMatchWidth], I = A.match(g);
    if (!I)
      return null;
    const c = I[0], t = E && B.parsePatterns[E] || B.parsePatterns[B.defaultParseWidth], w = Array.isArray(t) ? io(t, (y) => y.test(c)) : (
      // [TODO] -- I challenge you to fix the type
      oo(t, (y) => y.test(c))
    );
    let s;
    s = B.valueCallback ? B.valueCallback(w) : w, s = Q.valueCallback ? (
      // [TODO] -- I challenge you to fix the type
      Q.valueCallback(s)
    ) : s;
    const d = A.slice(c.length);
    return { value: s, rest: d };
  };
}
function oo(B, A) {
  for (const Q in B)
    if (Object.prototype.hasOwnProperty.call(B, Q) && A(B[Q]))
      return Q;
}
function io(B, A) {
  for (let Q = 0; Q < B.length; Q++)
    if (A(B[Q]))
      return Q;
}
function Ro(B) {
  return (A, Q = {}) => {
    const E = A.match(B.matchPattern);
    if (!E) return null;
    const g = E[0], I = A.match(B.parsePattern);
    if (!I) return null;
    let c = B.valueCallback ? B.valueCallback(I[0]) : I[0];
    c = Q.valueCallback ? Q.valueCallback(c) : c;
    const t = A.slice(g.length);
    return { value: c, rest: t };
  };
}
const Go = /^(\d+)(th|st|nd|rd)?/i, ao = /\d+/i, to = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
}, No = {
  any: [/^b/i, /^(a|c)/i]
}, lo = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
}, ho = {
  any: [/1/i, /2/i, /3/i, /4/i]
}, wo = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
}, so = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ]
}, Fo = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
}, no = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
}, eo = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
}, Yo = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
}, Jo = {
  ordinalNumber: Ro({
    matchPattern: Go,
    parsePattern: ao,
    valueCallback: (B) => parseInt(B, 10)
  }),
  era: lB({
    matchPatterns: to,
    defaultMatchWidth: "wide",
    parsePatterns: No,
    defaultParseWidth: "any"
  }),
  quarter: lB({
    matchPatterns: lo,
    defaultMatchWidth: "wide",
    parsePatterns: ho,
    defaultParseWidth: "any",
    valueCallback: (B) => B + 1
  }),
  month: lB({
    matchPatterns: wo,
    defaultMatchWidth: "wide",
    parsePatterns: so,
    defaultParseWidth: "any"
  }),
  day: lB({
    matchPatterns: Fo,
    defaultMatchWidth: "wide",
    parsePatterns: no,
    defaultParseWidth: "any"
  }),
  dayPeriod: lB({
    matchPatterns: eo,
    defaultMatchWidth: "any",
    parsePatterns: Yo,
    defaultParseWidth: "any"
  })
}, Zo = {
  code: "en-US",
  formatDistance: Tc,
  formatLong: _c,
  formatRelative: Ao,
  localize: co,
  match: Jo,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
function yo(B, A) {
  const Q = QQ(B, A?.in);
  return jc(Q, fc(Q)) + 1;
}
function bo(B, A) {
  const Q = QQ(B, A?.in), E = +oE(Q) - +Sc(Q);
  return Math.round(E / kI) + 1;
}
function VI(B, A) {
  const Q = QQ(B, A?.in), E = Q.getFullYear(), g = sE(), I = A?.firstWeekContainsDate ?? A?.locale?.options?.firstWeekContainsDate ?? g.firstWeekContainsDate ?? g.locale?.options?.firstWeekContainsDate ?? 1, c = eQ(A?.in || B, 0);
  c.setFullYear(E + 1, 0, I), c.setHours(0, 0, 0, 0);
  const t = dB(c, A), w = eQ(A?.in || B, 0);
  w.setFullYear(E, 0, I), w.setHours(0, 0, 0, 0);
  const s = dB(w, A);
  return +Q >= +t ? E + 1 : +Q >= +s ? E : E - 1;
}
function mo(B, A) {
  const Q = sE(), E = A?.firstWeekContainsDate ?? A?.locale?.options?.firstWeekContainsDate ?? Q.firstWeekContainsDate ?? Q.locale?.options?.firstWeekContainsDate ?? 1, g = VI(B, A), I = eQ(A?.in || B, 0);
  return I.setFullYear(g, 0, E), I.setHours(0, 0, 0, 0), dB(I, A);
}
function ko(B, A) {
  const Q = QQ(B, A?.in), E = +dB(Q, A) - +mo(Q, A);
  return Math.round(E / kI) + 1;
}
function RA(B, A) {
  const Q = B < 0 ? "-" : "", E = Math.abs(B).toString().padStart(A, "0");
  return Q + E;
}
const dQ = {
  // Year
  y(B, A) {
    const Q = B.getFullYear(), E = Q > 0 ? Q : 1 - Q;
    return RA(A === "yy" ? E % 100 : E, A.length);
  },
  // Month
  M(B, A) {
    const Q = B.getMonth();
    return A === "M" ? String(Q + 1) : RA(Q + 1, 2);
  },
  // Day of the month
  d(B, A) {
    return RA(B.getDate(), A.length);
  },
  // AM or PM
  a(B, A) {
    const Q = B.getHours() / 12 >= 1 ? "pm" : "am";
    switch (A) {
      case "a":
      case "aa":
        return Q.toUpperCase();
      case "aaa":
        return Q;
      case "aaaaa":
        return Q[0];
      case "aaaa":
      default:
        return Q === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h(B, A) {
    return RA(B.getHours() % 12 || 12, A.length);
  },
  // Hour [0-23]
  H(B, A) {
    return RA(B.getHours(), A.length);
  },
  // Minute
  m(B, A) {
    return RA(B.getMinutes(), A.length);
  },
  // Second
  s(B, A) {
    return RA(B.getSeconds(), A.length);
  },
  // Fraction of second
  S(B, A) {
    const Q = A.length, E = B.getMilliseconds(), g = Math.trunc(
      E * Math.pow(10, Q - 3)
    );
    return RA(g, A.length);
  }
}, EB = {
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
}, kg = {
  // Era
  G: function(B, A, Q) {
    const E = B.getFullYear() > 0 ? 1 : 0;
    switch (A) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return Q.era(E, { width: "abbreviated" });
      // A, B
      case "GGGGG":
        return Q.era(E, { width: "narrow" });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return Q.era(E, { width: "wide" });
    }
  },
  // Year
  y: function(B, A, Q) {
    if (A === "yo") {
      const E = B.getFullYear(), g = E > 0 ? E : 1 - E;
      return Q.ordinalNumber(g, { unit: "year" });
    }
    return dQ.y(B, A);
  },
  // Local week-numbering year
  Y: function(B, A, Q, E) {
    const g = VI(B, E), I = g > 0 ? g : 1 - g;
    if (A === "YY") {
      const c = I % 100;
      return RA(c, 2);
    }
    return A === "Yo" ? Q.ordinalNumber(I, { unit: "year" }) : RA(I, A.length);
  },
  // ISO week-numbering year
  R: function(B, A) {
    const Q = WI(B);
    return RA(Q, A.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function(B, A) {
    const Q = B.getFullYear();
    return RA(Q, A.length);
  },
  // Quarter
  Q: function(B, A, Q) {
    const E = Math.ceil((B.getMonth() + 1) / 3);
    switch (A) {
      // 1, 2, 3, 4
      case "Q":
        return String(E);
      // 01, 02, 03, 04
      case "QQ":
        return RA(E, 2);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return Q.ordinalNumber(E, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return Q.quarter(E, {
          width: "abbreviated",
          context: "formatting"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return Q.quarter(E, {
          width: "narrow",
          context: "formatting"
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return Q.quarter(E, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function(B, A, Q) {
    const E = Math.ceil((B.getMonth() + 1) / 3);
    switch (A) {
      // 1, 2, 3, 4
      case "q":
        return String(E);
      // 01, 02, 03, 04
      case "qq":
        return RA(E, 2);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return Q.ordinalNumber(E, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return Q.quarter(E, {
          width: "abbreviated",
          context: "standalone"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return Q.quarter(E, {
          width: "narrow",
          context: "standalone"
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return Q.quarter(E, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function(B, A, Q) {
    const E = B.getMonth();
    switch (A) {
      case "M":
      case "MM":
        return dQ.M(B, A);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return Q.ordinalNumber(E + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "MMM":
        return Q.month(E, {
          width: "abbreviated",
          context: "formatting"
        });
      // J, F, ..., D
      case "MMMMM":
        return Q.month(E, {
          width: "narrow",
          context: "formatting"
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return Q.month(E, { width: "wide", context: "formatting" });
    }
  },
  // Stand-alone month
  L: function(B, A, Q) {
    const E = B.getMonth();
    switch (A) {
      // 1, 2, ..., 12
      case "L":
        return String(E + 1);
      // 01, 02, ..., 12
      case "LL":
        return RA(E + 1, 2);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return Q.ordinalNumber(E + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "LLL":
        return Q.month(E, {
          width: "abbreviated",
          context: "standalone"
        });
      // J, F, ..., D
      case "LLLLL":
        return Q.month(E, {
          width: "narrow",
          context: "standalone"
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return Q.month(E, { width: "wide", context: "standalone" });
    }
  },
  // Local week of year
  w: function(B, A, Q, E) {
    const g = ko(B, E);
    return A === "wo" ? Q.ordinalNumber(g, { unit: "week" }) : RA(g, A.length);
  },
  // ISO week of year
  I: function(B, A, Q) {
    const E = bo(B);
    return A === "Io" ? Q.ordinalNumber(E, { unit: "week" }) : RA(E, A.length);
  },
  // Day of the month
  d: function(B, A, Q) {
    return A === "do" ? Q.ordinalNumber(B.getDate(), { unit: "date" }) : dQ.d(B, A);
  },
  // Day of year
  D: function(B, A, Q) {
    const E = yo(B);
    return A === "Do" ? Q.ordinalNumber(E, { unit: "dayOfYear" }) : RA(E, A.length);
  },
  // Day of week
  E: function(B, A, Q) {
    const E = B.getDay();
    switch (A) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return Q.day(E, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "EEEEE":
        return Q.day(E, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "EEEEEE":
        return Q.day(E, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "EEEE":
      default:
        return Q.day(E, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function(B, A, Q, E) {
    const g = B.getDay(), I = (g - E.weekStartsOn + 8) % 7 || 7;
    switch (A) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case "e":
        return String(I);
      // Padded numerical value
      case "ee":
        return RA(I, 2);
      // 1st, 2nd, ..., 7th
      case "eo":
        return Q.ordinalNumber(I, { unit: "day" });
      case "eee":
        return Q.day(g, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "eeeee":
        return Q.day(g, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "eeeeee":
        return Q.day(g, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "eeee":
      default:
        return Q.day(g, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function(B, A, Q, E) {
    const g = B.getDay(), I = (g - E.weekStartsOn + 8) % 7 || 7;
    switch (A) {
      // Numerical value (same as in `e`)
      case "c":
        return String(I);
      // Padded numerical value
      case "cc":
        return RA(I, A.length);
      // 1st, 2nd, ..., 7th
      case "co":
        return Q.ordinalNumber(I, { unit: "day" });
      case "ccc":
        return Q.day(g, {
          width: "abbreviated",
          context: "standalone"
        });
      // T
      case "ccccc":
        return Q.day(g, {
          width: "narrow",
          context: "standalone"
        });
      // Tu
      case "cccccc":
        return Q.day(g, {
          width: "short",
          context: "standalone"
        });
      // Tuesday
      case "cccc":
      default:
        return Q.day(g, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function(B, A, Q) {
    const E = B.getDay(), g = E === 0 ? 7 : E;
    switch (A) {
      // 2
      case "i":
        return String(g);
      // 02
      case "ii":
        return RA(g, A.length);
      // 2nd
      case "io":
        return Q.ordinalNumber(g, { unit: "day" });
      // Tue
      case "iii":
        return Q.day(E, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "iiiii":
        return Q.day(E, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "iiiiii":
        return Q.day(E, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "iiii":
      default:
        return Q.day(E, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function(B, A, Q) {
    const g = B.getHours() / 12 >= 1 ? "pm" : "am";
    switch (A) {
      case "a":
      case "aa":
        return Q.dayPeriod(g, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return Q.dayPeriod(g, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return Q.dayPeriod(g, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return Q.dayPeriod(g, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function(B, A, Q) {
    const E = B.getHours();
    let g;
    switch (E === 12 ? g = EB.noon : E === 0 ? g = EB.midnight : g = E / 12 >= 1 ? "pm" : "am", A) {
      case "b":
      case "bb":
        return Q.dayPeriod(g, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return Q.dayPeriod(g, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return Q.dayPeriod(g, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return Q.dayPeriod(g, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function(B, A, Q) {
    const E = B.getHours();
    let g;
    switch (E >= 17 ? g = EB.evening : E >= 12 ? g = EB.afternoon : E >= 4 ? g = EB.morning : g = EB.night, A) {
      case "B":
      case "BB":
      case "BBB":
        return Q.dayPeriod(g, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return Q.dayPeriod(g, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return Q.dayPeriod(g, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function(B, A, Q) {
    if (A === "ho") {
      let E = B.getHours() % 12;
      return E === 0 && (E = 12), Q.ordinalNumber(E, { unit: "hour" });
    }
    return dQ.h(B, A);
  },
  // Hour [0-23]
  H: function(B, A, Q) {
    return A === "Ho" ? Q.ordinalNumber(B.getHours(), { unit: "hour" }) : dQ.H(B, A);
  },
  // Hour [0-11]
  K: function(B, A, Q) {
    const E = B.getHours() % 12;
    return A === "Ko" ? Q.ordinalNumber(E, { unit: "hour" }) : RA(E, A.length);
  },
  // Hour [1-24]
  k: function(B, A, Q) {
    let E = B.getHours();
    return E === 0 && (E = 24), A === "ko" ? Q.ordinalNumber(E, { unit: "hour" }) : RA(E, A.length);
  },
  // Minute
  m: function(B, A, Q) {
    return A === "mo" ? Q.ordinalNumber(B.getMinutes(), { unit: "minute" }) : dQ.m(B, A);
  },
  // Second
  s: function(B, A, Q) {
    return A === "so" ? Q.ordinalNumber(B.getSeconds(), { unit: "second" }) : dQ.s(B, A);
  },
  // Fraction of second
  S: function(B, A) {
    return dQ.S(B, A);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function(B, A, Q) {
    const E = B.getTimezoneOffset();
    if (E === 0)
      return "Z";
    switch (A) {
      // Hours and optional minutes
      case "X":
        return Ug(E);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case "XXXX":
      case "XX":
        return KQ(E);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case "XXXXX":
      case "XXX":
      // Hours and minutes with `:` delimiter
      default:
        return KQ(E, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function(B, A, Q) {
    const E = B.getTimezoneOffset();
    switch (A) {
      // Hours and optional minutes
      case "x":
        return Ug(E);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case "xxxx":
      case "xx":
        return KQ(E);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case "xxxxx":
      case "xxx":
      // Hours and minutes with `:` delimiter
      default:
        return KQ(E, ":");
    }
  },
  // Timezone (GMT)
  O: function(B, A, Q) {
    const E = B.getTimezoneOffset();
    switch (A) {
      // Short
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + Mg(E, ":");
      // Long
      case "OOOO":
      default:
        return "GMT" + KQ(E, ":");
    }
  },
  // Timezone (specific non-location)
  z: function(B, A, Q) {
    const E = B.getTimezoneOffset();
    switch (A) {
      // Short
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + Mg(E, ":");
      // Long
      case "zzzz":
      default:
        return "GMT" + KQ(E, ":");
    }
  },
  // Seconds timestamp
  t: function(B, A, Q) {
    const E = Math.trunc(+B / 1e3);
    return RA(E, A.length);
  },
  // Milliseconds timestamp
  T: function(B, A, Q) {
    return RA(+B, A.length);
  }
};
function Mg(B, A = "") {
  const Q = B > 0 ? "-" : "+", E = Math.abs(B), g = Math.trunc(E / 60), I = E % 60;
  return I === 0 ? Q + String(g) : Q + String(g) + A + RA(I, 2);
}
function Ug(B, A) {
  return B % 60 === 0 ? (B > 0 ? "-" : "+") + RA(Math.abs(B) / 60, 2) : KQ(B, A);
}
function KQ(B, A = "") {
  const Q = B > 0 ? "-" : "+", E = Math.abs(B), g = RA(Math.trunc(E / 60), 2), I = RA(E % 60, 2);
  return Q + g + A + I;
}
const Wg = (B, A) => {
  switch (B) {
    case "P":
      return A.date({ width: "short" });
    case "PP":
      return A.date({ width: "medium" });
    case "PPP":
      return A.date({ width: "long" });
    case "PPPP":
    default:
      return A.date({ width: "full" });
  }
}, rI = (B, A) => {
  switch (B) {
    case "p":
      return A.time({ width: "short" });
    case "pp":
      return A.time({ width: "medium" });
    case "ppp":
      return A.time({ width: "long" });
    case "pppp":
    default:
      return A.time({ width: "full" });
  }
}, Mo = (B, A) => {
  const Q = B.match(/(P+)(p+)?/) || [], E = Q[1], g = Q[2];
  if (!g)
    return Wg(B, A);
  let I;
  switch (E) {
    case "P":
      I = A.dateTime({ width: "short" });
      break;
    case "PP":
      I = A.dateTime({ width: "medium" });
      break;
    case "PPP":
      I = A.dateTime({ width: "long" });
      break;
    case "PPPP":
    default:
      I = A.dateTime({ width: "full" });
      break;
  }
  return I.replace("{{date}}", Wg(E, A)).replace("{{time}}", rI(g, A));
}, Uo = {
  p: rI,
  P: Mo
}, Wo = /^D+$/, Vo = /^Y+$/, ro = ["D", "DD", "YY", "YYYY"];
function po(B) {
  return Wo.test(B);
}
function Xo(B) {
  return Vo.test(B);
}
function Oo(B, A, Q) {
  const E = uo(B, A, Q);
  if (console.warn(E), ro.includes(B)) throw new RangeError(E);
}
function uo(B, A, Q) {
  const E = B[0] === "Y" ? "years" : "days of the month";
  return `Use \`${B.toLowerCase()}\` instead of \`${B}\` (in \`${A}\`) for formatting ${E} to the input \`${Q}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
}
const xo = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g, Ho = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g, jo = /^'([^]*?)'?$/, So = /''/g, Ko = /[a-zA-Z]/;
function Lo(B, A, Q) {
  const E = sE(), g = E.locale ?? Zo, I = E.firstWeekContainsDate ?? E.locale?.options?.firstWeekContainsDate ?? 1, c = E.weekStartsOn ?? E.locale?.options?.weekStartsOn ?? 0, t = QQ(B, Q?.in);
  if (!Lc(t))
    throw new RangeError("Invalid time value");
  let w = A.match(Ho).map((d) => {
    const y = d[0];
    if (y === "p" || y === "P") {
      const F = Uo[y];
      return F(d, g.formatLong);
    }
    return d;
  }).join("").match(xo).map((d) => {
    if (d === "''")
      return { isToken: !1, value: "'" };
    const y = d[0];
    if (y === "'")
      return { isToken: !1, value: fo(d) };
    if (kg[y])
      return { isToken: !0, value: d };
    if (y.match(Ko))
      throw new RangeError(
        "Format string contains an unescaped latin alphabet character `" + y + "`"
      );
    return { isToken: !1, value: d };
  });
  g.localize.preprocessor && (w = g.localize.preprocessor(t, w));
  const s = {
    firstWeekContainsDate: I,
    weekStartsOn: c,
    locale: g
  };
  return w.map((d) => {
    if (!d.isToken) return d.value;
    const y = d.value;
    (Xo(y) || po(y)) && Oo(y, A, String(B));
    const F = kg[y[0]];
    return F(t, y, g.localize, s);
  }).join("");
}
function fo(B) {
  const A = B.match(jo);
  return A ? A[1].replace(So, "'") : B;
}
function vo(B, A) {
  const Q = () => eQ(A?.in, NaN), g = Po(B);
  let I;
  if (g.date) {
    const s = _o(g.date, 2);
    I = $o(s.restDateString, s.year);
  }
  if (!I || isNaN(+I)) return Q();
  const c = +I;
  let t = 0, w;
  if (g.time && (t = Ai(g.time), isNaN(t)))
    return Q();
  if (g.timezone) {
    if (w = Qi(g.timezone), isNaN(w)) return Q();
  } else {
    const s = new Date(c + t), d = QQ(0, A?.in);
    return d.setFullYear(
      s.getUTCFullYear(),
      s.getUTCMonth(),
      s.getUTCDate()
    ), d.setHours(
      s.getUTCHours(),
      s.getUTCMinutes(),
      s.getUTCSeconds(),
      s.getUTCMilliseconds()
    ), d;
  }
  return QQ(c + t + w, A?.in);
}
const KB = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
}, To = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/, zo = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/, qo = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function Po(B) {
  const A = {}, Q = B.split(KB.dateTimeDelimiter);
  let E;
  if (Q.length > 2)
    return A;
  if (/:/.test(Q[0]) ? E = Q[0] : (A.date = Q[0], E = Q[1], KB.timeZoneDelimiter.test(A.date) && (A.date = B.split(KB.timeZoneDelimiter)[0], E = B.substr(
    A.date.length,
    B.length
  ))), E) {
    const g = KB.timezone.exec(E);
    g ? (A.time = E.replace(g[1], ""), A.timezone = g[1]) : A.time = E;
  }
  return A;
}
function _o(B, A) {
  const Q = new RegExp(
    "^(?:(\\d{4}|[+-]\\d{" + (4 + A) + "})|(\\d{2}|[+-]\\d{" + (2 + A) + "})$)"
  ), E = B.match(Q);
  if (!E) return { year: NaN, restDateString: "" };
  const g = E[1] ? parseInt(E[1]) : null, I = E[2] ? parseInt(E[2]) : null;
  return {
    year: I === null ? g : I * 100,
    restDateString: B.slice((E[1] || E[2]).length)
  };
}
function $o(B, A) {
  if (A === null) return /* @__PURE__ */ new Date(NaN);
  const Q = B.match(To);
  if (!Q) return /* @__PURE__ */ new Date(NaN);
  const E = !!Q[4], g = hB(Q[1]), I = hB(Q[2]) - 1, c = hB(Q[3]), t = hB(Q[4]), w = hB(Q[5]) - 1;
  if (E)
    return Ci(A, t, w) ? Bi(A, t, w) : /* @__PURE__ */ new Date(NaN);
  {
    const s = /* @__PURE__ */ new Date(0);
    return !gi(A, I, c) || !Ii(A, g) ? /* @__PURE__ */ new Date(NaN) : (s.setUTCFullYear(A, I, Math.max(g, c)), s);
  }
}
function hB(B) {
  return B ? parseInt(B) : 1;
}
function Ai(B) {
  const A = B.match(zo);
  if (!A) return NaN;
  const Q = yE(A[1]), E = yE(A[2]), g = yE(A[3]);
  return Di(Q, E, g) ? Q * UI + E * MI + g * 1e3 : NaN;
}
function yE(B) {
  return B && parseFloat(B.replace(",", ".")) || 0;
}
function Qi(B) {
  if (B === "Z") return 0;
  const A = B.match(qo);
  if (!A) return 0;
  const Q = A[1] === "+" ? -1 : 1, E = parseInt(A[2]), g = A[3] && parseInt(A[3]) || 0;
  return ci(E, g) ? Q * (E * UI + g * MI) : NaN;
}
function Bi(B, A, Q) {
  const E = /* @__PURE__ */ new Date(0);
  E.setUTCFullYear(B, 0, 4);
  const g = E.getUTCDay() || 7, I = (A - 1) * 7 + Q + 1 - g;
  return E.setUTCDate(E.getUTCDate() + I), E;
}
const Ei = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function pI(B) {
  return B % 400 === 0 || B % 4 === 0 && B % 100 !== 0;
}
function gi(B, A, Q) {
  return A >= 0 && A <= 11 && Q >= 1 && Q <= (Ei[A] || (pI(B) ? 29 : 28));
}
function Ii(B, A) {
  return A >= 1 && A <= (pI(B) ? 366 : 365);
}
function Ci(B, A, Q) {
  return A >= 1 && A <= 53 && Q >= 0 && Q <= 6;
}
function Di(B, A, Q) {
  return B === 24 ? A === 0 && Q === 0 : Q >= 0 && Q < 60 && A >= 0 && A < 60 && B >= 0 && B < 25;
}
function ci(B, A) {
  return A >= 0 && A <= 59;
}
var oi = /* @__PURE__ */ tA('<h2 class="timeline__section-heading"> </h2>'), ii = /* @__PURE__ */ tA('<h2 class="timeline__section-heading" data-sr-only="">Experience</h2>'), Ri = /* @__PURE__ */ tA('<img width="42" height="42" loading="eager" decoding="auto"/>'), Gi = /* @__PURE__ */ tA("<source/>"), ai = /* @__PURE__ */ tA('<picture><!> <img width="42" height="42" loading="eager" decoding="auto"/></picture>'), ti = /* @__PURE__ */ tA('<div class="timeline__logo"><!></div>'), Ni = /* @__PURE__ */ tA('<div class="timeline__point"></div>'), li = /* @__PURE__ */ tA("<p> </p>"), hi = /* @__PURE__ */ tA("<li> </li>"), wi = /* @__PURE__ */ tA('<ul class="timeline__responsabilities-achievements [ flow ]"></ul>'), si = /* @__PURE__ */ tA('<h4 class="timeline__sub"> </h4> <!> <!>', 1), Fi = /* @__PURE__ */ tA('<p class="timeline__issuer"> </p>'), ni = /* @__PURE__ */ tA('<h4 class="timeline__sub"> </h4> <p class="timeline__degree"> </p>', 1), ei = /* @__PURE__ */ tA('<div class="timeline__item"><time class="timeline__duration"> </time> <!> <div class="timeline__content"><div style="width: 100%"><h3 class="timeline__header"> </h3> <div class="timeline__body"><!></div></div> <span class="timeline__icon"></span></div></div>'), Yi = /* @__PURE__ */ tA('<!> <div class="timeline"></div>', 1);
const Ji = {
  hash: "svelte-1c3h8rr",
  code: `
	@import '@/styles/blocks/resume/_timeline.scss';`
};
function bE(B, A) {
  CI(A, !0), wE(B, Ji);
  const Q = /* @__PURE__ */ bA(() => A.type === "work" ? new tc() : A.type === "education" ? new Nc() : A.type === "certificates" ? new lc() : {
    heading: void 0,
    experienceKind: void 0,
    icon: void 0
  }), E = /* @__PURE__ */ bA(() => U(Q).heading), g = /* @__PURE__ */ bA(() => U(Q).experienceKind), I = /* @__PURE__ */ bA(() => U(Q).icon), c = /* @__PURE__ */ Object.assign({ "../../images/logos/ColumbiaState.png": bc, "../../images/logos/Developing_ASP.NET_MVC_Web_Applications-Certification.png": kc, "../../images/logos/HCA.png": Uc, "../../images/logos/MTSU.png": Vc, "../../images/logos/MiraTech+Quovant.jpg": pc, "../../images/logos/Quovant.png": Oc });
  var t = Yi(), w = IB(t);
  {
    var s = (F) => {
      var J = oi(), p = x(J);
      JA(() => {
        oA(J, "id", `${U(E).id ?? ""}-title`), ZA(p, U(E).title);
      }), cA(F, J);
    }, d = (F) => {
      var J = ii();
      cA(F, J);
    };
    KA(w, (F) => {
      U(E) ? F(s) : F(d, !1);
    });
  }
  var y = lA(w, 2);
  UQ(y, 21, () => A.events, CB, (F, J) => {
    var p = ei();
    const j = /* @__PURE__ */ bA(() => Lo(vo(A.type === "work" ? U(J).startDate : A.type === "certificates" ? U(J).date : A.type === "education" ? U(J).endDate : ""), "MMM yyyy")), P = /* @__PURE__ */ bA(() => U(J).image.split(".").reverse().pop() + " Logo.");
    var DA = x(p), X = x(DA), S = lA(DA, 2);
    {
      var b = (dA) => {
        var WA = ti(), kA = x(WA);
        {
          var nA = (NA) => {
            var T = Ri();
            JA(() => {
              oA(T, "src", c[`../../images/logos/${U(J).image}`].default.img.src), oA(T, "alt", U(P));
            }), cA(NA, T);
          }, $ = (NA) => {
            var T = ai(), eA = x(T);
            UQ(eA, 17, () => Object.entries(c[`../../images/logos/${U(J).image}`].default.sources), CB, (aA, MA, pA, vA) => {
              var HA = /* @__PURE__ */ bA(() => OE(U(MA), 2));
              let DQ = () => U(HA)[0], TA = () => U(HA)[1];
              var yA = Gi();
              JA(() => {
                oA(yA, "srcset", TA()), oA(yA, "type", "image/" + DQ());
              }), cA(aA, yA);
            });
            var hA = lA(eA, 2);
            JA(() => {
              oA(hA, "src", c[`../../images/logos/${U(J).image}`].default.img.src), oA(hA, "alt", U(P));
            }), cA(NA, T);
          };
          KA(kA, (NA) => {
            typeof c[`../../images/logos/${U(J).image}`].default == "string" ? NA(nA) : NA($, !1);
          });
        }
        cA(dA, WA);
      }, u = (dA) => {
        var WA = Ni();
        cA(dA, WA);
      };
      KA(S, (dA) => {
        U(J).image ? dA(b) : dA(u, !1);
      });
    }
    var q = lA(S, 2), FA = x(q), wA = x(FA), LA = x(wA), XA = lA(wA, 2), sA = x(XA);
    {
      var rA = (dA) => {
        var WA = si(), kA = IB(WA), nA = x(kA), $ = lA(kA, 2);
        {
          var NA = (hA) => {
            var aA = li(), MA = x(aA);
            JA(() => ZA(MA, U(J).summary)), cA(hA, aA);
          };
          KA($, (hA) => {
            U(J).summary && hA(NA);
          });
        }
        var T = lA($, 2);
        {
          var eA = (hA) => {
            var aA = wi();
            UQ(aA, 21, () => U(J).highlights, CB, (MA, pA) => {
              var vA = hi(), HA = x(vA);
              JA(() => ZA(HA, U(pA))), cA(MA, vA);
            }), cA(hA, aA);
          };
          KA(T, (hA) => {
            U(J).highlights && hA(eA);
          });
        }
        JA(() => ZA(nA, U(J).position)), cA(dA, WA);
      }, CQ = (dA, WA) => {
        {
          var kA = ($) => {
            var NA = Fi(), T = x(NA);
            JA(() => ZA(T, U(J).issuer)), cA($, NA);
          }, nA = ($, NA) => {
            {
              var T = (eA) => {
                var hA = ni(), aA = IB(hA), MA = x(aA), pA = lA(aA, 2), vA = x(pA);
                JA(() => {
                  ZA(MA, U(J).area), ZA(vA, U(J).studyType);
                }), cA(eA, hA);
              };
              KA(
                $,
                (eA) => {
                  A.type === "education" && eA(T);
                },
                NA
              );
            }
          };
          KA(
            dA,
            ($) => {
              A.type === "certificates" ? $(kA) : $(nA, !1);
            },
            WA
          );
        }
      };
      KA(sA, (dA) => {
        A.type === "work" ? dA(rA) : dA(CQ, !1);
      });
    }
    var fA = lA(FA, 2);
    JA(() => {
      oA(DA, "datetime", U(j)), ZA(X, U(j)), ZA(LA, A.type === "education" ? U(J).institution : U(J).name), oA(fA, "data-icon", U(I));
    }), cA(F, p);
  }), JA(() => oA(y, "data-type", U(g))), cA(B, t), DI();
}
var Zi = /* @__PURE__ */ tA('<div class="sub-category"><h3 class="subheading"> </h3> <!></div>'), di = /* @__PURE__ */ tA('<section><h2 class="heading__icon heading"> </h2> <!></section>'), yi = /* @__PURE__ */ tA('<a rel="external nofollow noopener noreferrer" target="blank"> </a>'), bi = /* @__PURE__ */ tA("<span> </span>"), mi = /* @__PURE__ */ tA("<header><!></header> <div><img/></div> <div><p> </p></div>", 1), ki = /* @__PURE__ */ tA('<section id="resume" class="resume"><table><colgroup><col span="8" style="width: 80%"/><col span="4" style="width: 40%"/></colgroup><tbody><tr class="profile"><th colspan="8" class="[ flow ]"><div aria-label="Introduction"><h1> </h1> <h2> </h2></div> <p class="text-accent"> </p></th><th colspan="4" style="width: 175.47px" align="right"><!></th></tr><tr><td colspan="7" class="[ grid-column ]" aria-label="Relevant Experience History"><section class="experience" aria-label="Relevant Professional Experience"><!></section> <section class="experience" aria-labelledby="cert-title"><!></section> <section class="experience" aria-labelledby="ed-title"><!></section></td><td colspan="5" class="[ grid-column ]"><section class="skills [ tags-catalog extend ] [ bg-none ]" aria-label="skills"></section>  <section class="personal-projects" aria-labelledby="personal-projects-title"><h2 id="personal-projects-title" class="heading__icon heading" data-icon="personal-projects">Projects</h2> <div class="project gallery"></div></section></td></tr></tbody></table></section>');
const Mi = {
  hash: "svelte-p3nr84",
  code: `
	@import '@/styles/blocks/resume/_index.scss';
	@import '@/styles/blocks/resume/_personal-projects.scss';
	@import '@/styles/blocks/resume/_profile.scss';`
};
function Ui(B, A) {
  CI(A, !0), wE(B, Mi);
  const Q = /* @__PURE__ */ bA(() => A.data.basics), E = /* @__PURE__ */ bA(() => A.data.work), g = /* @__PURE__ */ bA(() => A.data.certificates), I = /* @__PURE__ */ bA(() => A.data.education), c = /* @__PURE__ */ bA(() => A.data.skills), t = /* @__PURE__ */ bA(() => A.data.projects);
  var w = ki(), s = x(w);
  oA(s, "border", 0), oA(s, "cellspacing", 0), oA(s, "cellpadding", 0);
  var d = lA(x(s)), y = x(d), F = x(y), J = x(F), p = x(J), j = x(p), P = lA(p, 2), DA = x(P), X = lA(J, 2), S = x(X), b = lA(F), u = x(b);
  Yc(u, {
    get basics() {
      return U(Q);
    },
    "aria-label": "Details"
  });
  var q = lA(y), FA = x(q), wA = x(FA), LA = x(wA);
  bE(LA, {
    get events() {
      return U(E);
    },
    type: "work"
  });
  var XA = lA(wA, 2), sA = x(XA);
  bE(sA, {
    get events() {
      return U(g);
    },
    type: "certificates"
  });
  var rA = lA(XA, 2), CQ = x(rA);
  bE(CQ, {
    get events() {
      return U(I);
    },
    type: "education"
  });
  var fA = lA(FA), dA = x(fA);
  UQ(
    dA,
    21,
    () => ac(U(c)).groupBy(({ category: nA, categoryTag: $ }) => [nA, $], {
      equals: ([nA, $], [NA, T]) => nA === NA && $ === T,
      getHashCode: mI
    }).select((nA) => [
      nA.key,
      nA.select(($) => ({
        tag: $.tag,
        name: $.name,
        keywords: $.keywords
      })).toArray()
    ]),
    ([[nA, $], NA]) => $,
    (nA, $) => {
      var NA = /* @__PURE__ */ bA(() => OE(U($), 2)), T = /* @__PURE__ */ bA(() => OE(U(NA)[0], 2));
      let eA = () => U(T)[0], hA = () => U(T)[1], aA = () => U(NA)[1];
      var MA = di(), pA = x(MA), vA = x(pA), HA = lA(pA, 2);
      {
        var DQ = (yA) => {
          const zA = /* @__PURE__ */ bA(() => aA()[0]?.keywords ?? "");
          dg(yA, {
            get labels() {
              return U(zA);
            }
          });
        }, TA = (yA, zA) => {
          {
            var oB = (XQ) => {
              var BA = YI(), NQ = IB(BA);
              UQ(NQ, 17, aA, CB, (YQ, cQ) => {
                var OA = Zi(), jA = x(OA), PQ = x(jA), _Q = lA(jA, 2);
                const $Q = /* @__PURE__ */ bA(() => U(cQ).keywords.sort());
                dg(_Q, {
                  get labels() {
                    return U($Q);
                  }
                }), JA(() => {
                  oA(OA, "aria-labelledby", U(cQ).tag), oA(jA, "id", U(cQ).tag), ZA(PQ, `${U(cQ).name ?? ""}:`);
                }), cA(YQ, OA);
              }), cA(XQ, BA);
            };
            KA(
              yA,
              (XQ) => {
                aA().length > 1 && XQ(oB);
              },
              zA
            );
          }
        };
        KA(HA, (yA) => {
          aA().length === 1 ? yA(DQ) : yA(TA, !1);
        });
      }
      JA(() => {
        Cg(MA, 1, _g([
          "category",
          { extend: aA().length > 1 }
        ])), oA(MA, "aria-labelledby", hA()), oA(pA, "id", hA()), oA(pA, "data-icon", hA()), ZA(vA, aA().length === 1 ? aA()[0]?.name : aA().length > 1 ? eA() : "");
      }), cA(nA, MA);
    }
  );
  var WA = lA(dA, 2), kA = lA(x(WA), 2);
  UQ(kA, 21, () => U(t), CB, (nA, $) => {
    var NA = mi(), T = IB(NA), eA = x(T);
    {
      var hA = (TA) => {
        var yA = yi(), zA = x(yA);
        JA(() => {
          oA(yA, "href", U($).url), ZA(zA, U($).name);
        }), cA(TA, yA);
      }, aA = (TA) => {
        var yA = bi(), zA = x(yA);
        JA(() => ZA(zA, U($).name)), cA(TA, yA);
      };
      KA(eA, (TA) => {
        U($).url ? TA(hA) : TA(aA, !1);
      });
    }
    var MA = lA(T, 2), pA = x(MA), vA = lA(MA, 2), HA = x(vA), DQ = x(HA);
    JA(() => {
      oA(pA, "alt", `${U($).name ?? ""} screen-shot`), ZA(DQ, U($).description);
    }), cA(nA, NA);
  }), JA(() => {
    oA(p, "aria-label", U(Q).name), ZA(j, U(Q).name), oA(P, "aria-label", U(Q).label), ZA(DA, U(Q).label), ZA(S, U(Q).summary);
  }), cA(B, w), DI();
}
const Wi = {};
function Vi(B) {
  const A = OD(Ui, { props: { data: B } });
  return new cC().parseFromString(
    `<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<meta name="viewport" content="width=device-width, initial-scale=1">
			${A.head}
		</head>
		<body>
			${A.body}
		</body>
		</html>`,
    "text/html"
  ).documentElement?.innerHTML;
}
export {
  Wi as pdfOptions,
  Vi as render
};
